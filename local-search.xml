<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>书籍推荐</title>
    <link href="/2025/09/13/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
    <url>/2025/09/13/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">书籍</th><th align="center">作者</th><th align="center">介绍</th><th align="center">读后感</th></tr></thead><tbody><tr><td align="center">民法典</td><td align="center">杨立新</td><td align="center">焦虑迷茫应该看哪些书，我推荐看《民法典》，婚姻不如意、职场迷茫、欠钱不还、房子给谁继承等等，从出生到死亡都能找到答案。</td><td align="center">未读</td></tr><tr><td align="center">向上生长</td><td align="center">九边</td><td align="center">分析解决我们在生活中遇到的各种困惑、难题，然后逐个进行深层分析，把握身边出现的机会。</td><td align="center">流畅易读,鸡汤</td></tr><tr><td align="center">曾国藩传</td><td align="center"></td><td align="center">逆境脱困，逻辑初探,世界观扭转</td><td align="center"></td></tr><tr><td align="center">华杉讲透孙子兵法</td><td align="center"></td><td align="center">逆境脱困，逻辑初探,世界观扭转</td><td align="center"></td></tr><tr><td align="center">中国是部金融史</td><td align="center"></td><td align="center">逆境脱困，逻辑初探,世界观扭转</td><td align="center"></td></tr><tr><td align="center">潜规则</td><td align="center">吴思潜</td><td align="center">贯穿古今的潜规则，也让你明白世界没有黑与白只有混沌，越思考越深奥，特别适合单纯的人看透本质</td><td align="center">制度与人性的思考，历史书，感觉和网红读史差不多</td></tr><tr><td align="center">纳瓦尔宝典</td><td align="center"></td><td align="center">这个我和厂嫂强烈推荐，百万富翁快车道，认知觉醒，把时间当做朋友，财富自由之路</td><td align="center"></td></tr><tr><td align="center">沧浪之水</td><td align="center"></td><td align="center">虽然写的是官场，但套在任何普通人身上豆适用</td><td align="center"></td></tr><tr><td align="center">豆豆三部曲《遥远的救世主》、《天幕红尘》、《背叛》</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">我的阿勒泰，冬牧场</td><td align="center">李娟</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">炼金术士</td><td align="center">保罗.科埃略</td><td align="center">月入0-1万美金，这个阶段最重要的是坚定信心，提升自信：在财富的道路上，我能行！我可以！大多数人都在长年累月的家庭、学校、职场的pua之下，自甘平庸，失去自我价值感和信心。</td><td align="center">无聊的小故事，大胆去做，注重过程会收获结果，抵御诱惑</td></tr><tr><td align="center">思考致富</td><td align="center">拿破仑希尔</td><td align="center">月入0-1万美金…</td><td align="center">难读，想象自己财富自由后的生活，越具体越好，相信自己，制定具体计划</td></tr><tr><td align="center">原子习惯</td><td align="center">詹姆斯.克里尔</td><td align="center">月入0-1万美金…</td><td align="center"></td></tr><tr><td align="center">钱：7步创造终身性收入</td><td align="center">托尼.罗宾斯</td><td align="center">月入0-1万美金…</td><td align="center"></td></tr><tr><td align="center">每周工作4小时</td><td align="center">蒂莫西·费里斯</td><td align="center">月入1万-10万,这个阶段，你应该从work harder向work smarter转变。这几本书，重点是利用巧力，搞人，搞关系，成为杠杆玩家（不是炒股用杠杆的意思</td><td align="center"></td></tr><tr><td align="center">影响力</td><td align="center">罗伯特.西奥迪尼</td><td align="center">月入1万-10万…</td><td align="center"></td></tr><tr><td align="center">一个广告人的自白</td><td align="center">大卫奥格威</td><td align="center">月入1万-10万…</td><td align="center"></td></tr><tr><td align="center">精益创业</td><td align="center">埃里克.莱斯</td><td align="center">月入1万-10万…</td><td align="center"></td></tr><tr><td align="center">掌控谈话 解决问题的关键技能</td><td align="center">Chris Voss</td><td align="center">月入1万-10万…</td><td align="center"></td></tr><tr><td align="center">权利的48条法则</td><td align="center">罗伯特.格林</td><td align="center">月入1万-10万…</td><td align="center"></td></tr><tr><td align="center">在家就能读MBA</td><td align="center">乔西.考夫曼</td><td align="center">月入1万-10万…</td><td align="center"></td></tr><tr><td align="center">聪明的投资者</td><td align="center">本杰明.格雷厄姆</td><td align="center">月入10万美金～100万美金 这个阶段你要开始研究投资，并且进入一些玄学领域（看来老外也一样，钱多就开始要搞玄学）</td><td align="center"></td></tr><tr><td align="center">Reality transurfing</td><td align="center">Vadim Zeland</td><td align="center">月入10万美金～100万…者说这是一本教你掌控现实像魔法一样的书。作者14岁那年第一次接触，反复阅读，开启了他的赚钱之路</td><td align="center"></td></tr><tr><td align="center">错误的行为</td><td align="center">理查德塞勒</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">美联储传</td><td align="center">G.爱德华.格里芬</td><td align="center">月入100万+,日光下没有新事，当你研究历史透彻了，自然就能预测未来。 大佬必须研究银行业的发展史，了解现代商业运行的背后逻辑，透过有形世界剥开层层迷雾，参透最底层的东西</td><td align="center"></td></tr><tr><td align="center">摩根财团</td><td align="center">罗恩.彻诺</td><td align="center">月入100万+</td><td align="center"></td></tr><tr><td align="center">金融投机史</td><td align="center">爱德华.钱塞勒</td><td align="center">月入100万+</td><td align="center"></td></tr></tbody></table><h1 id="理财思维"><a href="#理财思维" class="headerlink" title="理财思维"></a>理财思维</h1><table><thead><tr><th align="center">书籍</th><th align="center">作者</th><th align="center">介绍</th><th align="center">读后感</th></tr></thead><tbody><tr><td align="center">经济学原理</td><td align="center">曼昆</td><td align="center">全球最流行的经济学入门教材之一。语言通俗易懂，案例丰富生动，系统介绍了微观经济学和宏观经济学核心概念。强调经济学思维如何应用于理解现实世界，非常适合零基础或初学者建立系统框架</td><td align="center"></td></tr><tr><td align="center">金融的逻辑</td><td align="center">陈志武</td><td align="center">从中国文化和历史视角出发，深入浅出地阐释金融的核心概念（如货币、信用、风险、杠杆、证券化）及其在经济发展和社会进步中的作用。帮助读者理解现代金融体系运行的底层逻辑，破除对金融的误解，建立正确的金融观</td><td align="center"></td></tr><tr><td align="center">穷查理宝典</td><td align="center">彼得.考夫曼</td><td align="center">收录了投资大师查理·芒格的演讲、箴言和思想精华。核心是“多元思维模型”和“逆向思考”。强调跨学科学习、理性决策、避免常见心理误判（误判心理学）、保持耐心和终身学习</td><td align="center"></td></tr><tr><td align="center">共同基金常识</td><td align="center">约翰.博格</td><td align="center">指数基金之父约翰·博格的经典之作。旗帜鲜明地倡导低成本、分散化的指数化投资。深刻剖析了主动管理的弊端（高成本、低胜率），论证了简单、长期持有低成本指数基金的巨大优势。</td><td align="center"></td></tr><tr><td align="center">指数基金投资指南</td><td align="center">银行螺丝钉</td><td align="center">内指数基金投资的普及佳作。详细介绍了指数基金的种类、优势、估值方法（如市盈率、市净率、股息率）、定投策略以及具体的投资操作步骤。语言平实，案例贴近A股市场，是学习并实践指数基金定投的优秀指南。</td><td align="center"></td></tr><tr><td align="center">小狗钱钱</td><td align="center">博多.舍费尔</td><td align="center">本风靡全球的理财童话。通过小女孩吉娅和她会说话的拉布拉多犬“钱钱”的故事，轻松愉快地传授了关于金钱、储蓄、债务、目标设定和基础投资（如基金）的基本理念</td><td align="center"></td></tr></tbody></table><h1 id="初级投资者入门-建议按顺序"><a href="#初级投资者入门-建议按顺序" class="headerlink" title="初级投资者入门(建议按顺序)"></a>初级投资者入门(建议按顺序)</h1><p>1.《小狗钱钱》——博多·舍费尔<br><strong>关键词</strong>：理财启蒙 &#x2F; 亲子共读 &#x2F; 目标管理<br>用小故事讲理财，温和地引导你理解“钱”是什么、怎么存、怎么变多。非常适合家庭共读，也帮你建立第一个“储蓄-目标-复利”模型。<br>2.《穷爸爸富爸爸》——罗伯特·清崎<br><strong>关键词</strong>：资产思维 &#x2F; 财商觉醒 &#x2F; 收入结构<br>提出“穷人靠工资，富人靠资产”的本质差异。帮你第一次分清资产 vs 负债，唤醒你对“被动收入”和“财务自由”的理解。<br>3. 《薛兆丰经济学讲义》——薛兆丰<br><strong>关键词</strong>：机会成本 &#x2F; 理性决策 &#x2F; 市场理解<br>虽然不直接讲投资，但它是理性思维的训练营。你会更理解供需关系、价格机制、信息不对称等，提升你对经济与市场的感知力。<br>4.《投资稳赚：博格谈指数基金》——约翰·博格<br><strong>关键词</strong>：指数投资 &#x2F; 低成本 &#x2F; 长期主义<br>Vanguard创始人博格之作，告诉你不追热点、踏实买大盘的逻辑，是普通人最靠谱的方式。适合想稳健复利+长期投资的你。<br>5. 《漫步华尔街》——伯顿·马尔基尔<br><strong>关键词</strong>：市场有效 &#x2F; 资产配置 &#x2F; 投资常识<br>用数据告诉你：预测市场不靠谱、分散投资才安全。书中涉及基金、股票、黄金、比特币等多种资产，适合打基础时阅读。<br>6. 《聪明的投资者》——本杰明·格雷厄姆<br><strong>关键词</strong>：价值投资 &#x2F; 安全边际 &#x2F; 情绪控制<br>这是巴菲特奉为圭臬的书。虽然有些章节略显晦涩，但它构建了投资人格的骨架。适合慢读、精读、回读。<br>7.《炒股的智慧》——陈江挺<br><strong>关键词</strong>：交易心理 &#x2F; 技术逻辑 &#x2F; 散户实战<br>接地气、很实用。适合开始接触股市、想尝试操作型交易的普通投资者，尤其适合从“炒股经验”中提炼原则的人。<br>8.《股票魔法师 II：像冠军一样思考和交易》——马克·米勒维尼<br><strong>关键词</strong>：趋势交易 &#x2F; 资金管理 &#x2F; 盈亏控制<br>如果你对短线、技术交易有兴趣，这是专业但可理解的训练手册。讲如何“止损、择股、上车、下车”，适合动手派。<br>9. 《原则》——瑞·达利欧<br><strong>关键词</strong>：系统决策 &#x2F; 人性理解 &#x2F; 投资体系<br>不教你买什么股票，但教你构建稳定、反复可用的决策系统。适合想长期经营个人资产和公司运营的人。<br>10. 《以交易为生》——亚历山大·埃尔德<br><strong>关键词</strong>：交易系统 &#x2F; 情绪管理 &#x2F; 心理纪律<br>从“交易不是靠赌，而是靠流程”出发，讲解三位一体：思维、方法、资金管理，是交易型投资者的实战工具书。</p><h1 id="通义推荐"><a href="#通义推荐" class="headerlink" title="通义推荐"></a>通义推荐</h1><h2 id="投资理念与心态"><a href="#投资理念与心态" class="headerlink" title="投资理念与心态"></a>投资理念与心态</h2><p>《炒股的智慧》<br>作者陈江挺结合自己在华尔街的炒股经验，从人性角度分析股票涨跌，强调炒股心态和策略的重要性。<br>《股票大作手回忆录》<br>通过讲述传奇交易员杰西·利弗莫尔的经历，揭示交易心理和人性弱点对市场行为的影响。</p><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><p>《日本蜡烛图技术》<br>史蒂夫·尼森详细介绍了蜡烛图的历史、原理和应用技巧，是学习技术分析的基础书籍。<br>《股市趋势技术分析》<br>全面介绍了技术分析的理论和方法，包括图表分析、趋势判断等，适合构建交易体系。<br>《期货市场技术分析》<br>约翰·墨菲的经典之作，涵盖技术分析的基本概念、图表类型、技术指标等，适用于股票和期货市场。</p><h2 id="价值投资"><a href="#价值投资" class="headerlink" title="价值投资"></a>价值投资</h2><p>《证券分析》<br>本杰明·格雷厄姆与戴维·多德合著，提出了价值投资的理念，阐释了证券分析的基本框架。<br>《聪明的投资者》<br>格雷厄姆的另一经典著作，强调安全边际和内在价值，适合长期投资者。</p><h2 id="交易策略与系统"><a href="#交易策略与系统" class="headerlink" title="交易策略与系统"></a>交易策略与系统</h2><p>《海龟交易法则》<br>揭示了海龟交易系统的核心策略，包括入场、止损、加仓等规则，帮助建立机械化的交易系统。<br>《专业投机原理》<br>维克多·斯波朗迪介绍了自己的交易方法和策略，强调资金管理和风险控制的重要性。</p><h2 id="交易心理"><a href="#交易心理" class="headerlink" title="交易心理"></a>交易心理</h2><p>《交易心理分析》<br>布雷特·斯坦伯格深入探讨了交易中的心理问题，提供了实用的心理训练方法。</p><h2 id="市场与经济"><a href="#市场与经济" class="headerlink" title="市场与经济"></a>市场与经济</h2><p>《江恩华尔街45年》<br>威廉·江恩总结了自己多年的交易经验和研究心得，介绍了时间循环规则、图表分析等。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cpp-左右值</title>
    <link href="/2025/05/17/Cpp-%E5%B7%A6%E5%8F%B3%E5%80%BC/"/>
    <url>/2025/05/17/Cpp-%E5%B7%A6%E5%8F%B3%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>原因是C++为了兼容C，同时他既要高层的抽象，又离不开底层的限制，导致的，属于历史包袱</p><h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><ul><li>C语言中函数返回值首先用一个或多个寄存器进行传递</li></ul><h2 id="寄存器空间不够"><a href="#寄存器空间不够" class="headerlink" title="寄存器空间不够"></a>寄存器空间不够</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-type">long</span> a, b, c;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> <span class="hljs-built_in">Demo</span>()&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> t = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，如果寄存器空间不够，编译器其实把返回值变成了出参，直接拿着将要接受返回值的变量地址进到函数里面来处理。<br>即<strong>函数返回值会被转换为出参，内部直接操作外部栈空间</strong></p><h2 id="只用返回值的部分"><a href="#只用返回值的部分" class="headerlink" title="只用返回值的部分"></a>只用返回值的部分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-type">long</span> a, b, c;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> <span class="hljs-built_in">Demo1</span>() &#123;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> t = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">long</span> a = <span class="hljs-built_in">Demo1</span>().a; <span class="hljs-comment">// 只要其中的一个成员</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译器还是会分配一片用于保存返回值的空间，把这个空间的地址写在rdi中，然后拿着这个空间到Demo1中来操作。等Demo1函数执行完，再根据需要，把这片空间中的数据复制给局部变量a<br>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> tmp = <span class="hljs-built_in">Demo1</span>(); <span class="hljs-comment">// 注意这个变量其实是匿名的</span><br>  <span class="hljs-type">int</span> a = tmp.a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在C语言中函数返回值做如下处理</p><ul><li>如果能在一个寄存器存下，就会存到寄存器中</li><li>如果在一个寄存器存不下，就会考虑拆分到多个寄存器中</li><li>如果多个可用的寄存器都存不下，就会考虑直接用内存来存放，在调用函数之前先开放一片内存空间用于储存返回值，然后函数内部直接使用这片空间</li><li>如果调用方直接接收函数返回值，那么就会直接把这片空间标记给这个变量</li><li>如果调用方只使用返回值的一部分，那么这片空间就会成为一个匿名的空间存在（只有地址，但没有变量名）</li></ul><h2 id="C-构造和析构的问题"><a href="#C-构造和析构的问题" class="headerlink" title="C++构造和析构的问题"></a>C++构造和析构的问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-built_in">Test</span>() &#123;&#125;<br>  ~<span class="hljs-built_in">Test</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-function">Test <span class="hljs-title">Demo1</span><span class="hljs-params">()</span> </span>&#123;<br>  Test t;<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  Test t = <span class="hljs-built_in">Demo1</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>由于构造函数和析构函数跟变量生命周期相绑定了，因此这时并不能直接把「函数返回值转出参」了，而是先生成一个局部变量，然后通过拷贝构造函数来构造「返回值」，再析构这个局部变量。所以整个过程会多一次拷贝和析构的过程<br>这么做，是为了保证对象的行为自闭环，但只有当析构函数和拷贝构造函数是非默认行为的时候，这样做才有意义，如果真的就是 C 类型的结构体，那就没这个必要了，按照原来 C 的方式来编译即可。因此 C++在这里强行定义了<strong>「平凡（trivial）」类型</strong>的概念，主要就是为了指导编译器，对于平凡类型，直接按照 C 的方式来编译，而对于非平凡的类型，要调用构造和析构函数，因此必须按照新的方式来处理（刚才例子那样的方式）。</p><h2 id="直接使用部分返回值"><a href="#直接使用部分返回值" class="headerlink" title="直接使用部分返回值"></a>直接使用部分返回值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-built_in">Test</span>() &#123;&#125;<br>  ~<span class="hljs-built_in">Test</span>() &#123;&#125;<br>  <span class="hljs-type">int</span> a;<br>&#125;;<br><br><span class="hljs-function">Test <span class="hljs-title">Demo1</span><span class="hljs-params">()</span> </span>&#123;<br>  Test t;<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-built_in">Demo1</span>().a;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里仍然会分配一个匿名的空间用于接收返回值，然后再从这个匿名空间中取值复制给局部变量a。从上面的代码能看出，匿名空间在rbp-8的位置，局部变量a在rbp-4的位置。但这里非常有意思的是，在给局部变量赋值后，立刻对匿名空间做了一次析构（所以它把rbp-8写到了rdi中，然后call了析构函数）。<strong>「如果用匿名空间接收函数返回值的话，在处理完函数调用语句后，匿名空间将会被析构」</strong></p><h1 id="左右值"><a href="#左右值" class="headerlink" title="左右值"></a>左右值</h1><h2 id="纯右值-prvalue"><a href="#纯右值-prvalue" class="headerlink" title="纯右值(prvalue)"></a>纯右值(prvalue)</h2><p>举例来说，1这就是个纯右值，它在汇编中就是一个单纯的常数。然后就是返回值通过寄存器来进行的这种情况。对于 C&#x2F;C++这种语言来说，我们可以尽情操作内存，但没法染指寄存器，所以在它看来，寄存器中的数就跟一个常数值一样，只能感知到它的值而已，不能去操控，不能去改变。换一种说法，prvalue 就是「没有内存实体」的值，常数没有内存实体，寄存器中的数据也没有内存实体。所以 prvalue 没有地址。</p><h2 id="将亡值-xvalue"><a href="#将亡值-xvalue" class="headerlink" title="将亡值(xvalue)"></a>将亡值(xvalue)</h2><p>返回值」被保存在一个匿名的内存空间中，它在完成某一个动作之后就失效了（非平凡析构类型的就会调用析构函数）。比如用上一节的例子来说，从Demo1函数的返回值（匿名空间）获取了成员a交给了局部变量，然后，这个匿名空间就失效了，所以调用了~Demo析构函数。我们把这种值称为 xvalue（将亡值），xvalue 也有内存实体。</p><h2 id="左值与将亡值区别"><a href="#左值与将亡值区别" class="headerlink" title="左值与将亡值区别"></a>左值与将亡值区别</h2><p>在 C++中生命周期比在 C 中更加重要，在 C 中讨论生命周期其实仅仅在于初始化和赋值的问题（比如说局部 static 变量的问题），但到了 C++中，生命周期会直接决定了构造和析构函数的调用，因此更加重要。xvalue 会在当前语句结束时立刻析构，而 lvalue 会在所属代码块结束时再析构。所以针对于 xvalue 的情况，在 C 中并不明显，反正我们是从匿名的内存空间读取出数据来，这件事情就结束了；但 C++中就会涉及析构函数的问题，这就是 xvalue 在 C++中非常特殊的原因。</p><h2 id="xvalue-取址问题与-C-引用"><a href="#xvalue-取址问题与-C-引用" class="headerlink" title="xvalue 取址问题与 C++引用"></a>xvalue 取址问题与 C++引用</h2><p>对于 prvalue 来说，它是纯「值」或「寄存器值」，因此不能取地址，这件事无可厚非。但对于 xvalue 来说呢？xvalue 有内存实体，但为什么也不能取地址呢？</p><p>原因就是在于，原本 C 语言在设计这个部分的时候，函数返回值究竟要写到一个局部变量里，还是要写到一个匿名的内存空间里这件事是不能仅通过一个函数调用语句来判断，而是要通过上下文。也就是说，struct Test t &#x3D; Demo1();的时候，t本身的地址就是返回值地址，此时返回值是 lvalue（因为t就是 lvalue）；而如果是int ta &#x3D; Demo1().a;的时候，返回值的地址是一个匿名的空间，此时返回值就是 xvalue，而这里的ta就不再是返回值的地址。所以，如果你什么都不给，单纯给一个Demo1();，编译器就无法判断要选取哪一种方式，所以干脆就不支持&amp;Demo1();这种写法，你得表达清楚了，我才能确定你要的是谁的地址。所以前一种情况下的&amp;t就是返回值所在的地址，而后一种情况的&amp;ta就并不是返回值所在地址了。</p><p>原本 C 中的这种方式倒是也合理，但是 C++却引入了「引用」的概念，希望让「xx 的引用」从「语义上」成为「xx 的别名」这种感觉。但 C++在实现引用的时候，又没法做到真的给变量起别名，所以转而使用指针的语法糖来实现引用。比如说：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> &amp;r = a;<br></code></pre></td></tr></table></figure><p>语义上，表达的是「a是一个变量，r代指这个变量，对r做任何行为就等价于对a做同样的行为，所以r是a的替身（引用）」。但实际上却做的是「定义了一个新的变量pr，初始化为a的地址，对p做任何行为就等价于对*pr做任何行为，这是一个取地址和解指针的语法糖」。</p><p>既然本质是指针，那么指针的解类型就是可以手动定义的，同理，变量的引用类型也是可以手动定义的。（本质上就不是别名，如果是别名的话，那类型怎么能变化呢？）比如说：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> &amp;r = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">char</span> &amp;&gt;(a);<br><span class="hljs-comment">//等价于</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> *pr = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">char</span> *&gt;(&amp;a);<br></code></pre></td></tr></table></figure><p>变化的仅仅是指针的解类型而已。自然没什么问题。既然解类型可以强转，自然也就符合隐式转换特性，我们知道可变指针可以隐式转换为不可变指针，那么「可变引用」也自然可以隐式转换为「不可变引用」，比如说</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;r = a;<br><span class="hljs-comment">// 等价于：</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;r = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;&gt;(a);<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *pr = &amp;a;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *pr = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">int</span> *&gt;(&amp;a);<br></code></pre></td></tr></table></figure><p>绕来绕去本质都是指针的行为。刚才我们说到 rvalue 是不能取址的，那么自然，我们就不能用一个普通的引用来接收函数返回值:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">Test &amp;r = <span class="hljs-built_in">Demo1</span>(); <span class="hljs-comment">// 不可以！因为它等价于</span><br>Test *pr = &amp;<span class="hljs-built_in">Demo1</span>(); <span class="hljs-comment">// 这个不可以，所以上面的也不可以</span><br></code></pre></td></tr></table></figure><h2 id="常引用与右值"><a href="#常引用与右值" class="headerlink" title="常引用与右值"></a>常引用与右值</h2><p>虽然引用本质上就是指针的语法糖，但 C++并不满足于此，它为了让「语义」更加接近人类的直觉，它做了这样一件事：让用const修饰的引用可以绑定函数的返回值。</p><p>从语义上来说，它不希望我们程序员去区分「寄存器返回值」还是「内存空间返回值」，既然是函数的返回值，你就可以认为它是一个「纯值」就好了。或者换一个说法，如果你要屏蔽寄存器这一层的硬件实现，我们就不应该区分寄存器返回值还是内存返回值，而是假设寄存器足够大，那么函数返回值就一定是个「纯值」。那么这个「纯值」就叫做 rvalue。</p><p>这就是我前面提到的「语言设计」层面，在语言设计上，函数返回值就应当是个 rvalue，只不过在编译器实现的时候，根据返回值的大小，决定它放到寄存器里还是内存里，放寄存器里的就是 prvalue，放内存里的就是 xvalue。所以 prvalue 和 xvalue 合称 rvalue，就是这么来的。</p><p>而用const修饰的引用，它绑定普通变量的时候，语义上解释为「一个变量的替身，并且不可变」，实际上是「含了一次const_cast隐式转换的指针的语法糖」。</p><p>当它绑定函数返回值的时候，语义上解释为「一个值的替身（当然也是不可变的）」，实际上是代指一片内存空间，如果函数是通过寄存器返回的，那么就把寄存器的值复制到这片空间，而如果函数是通过内存方式返回的，那么就把这片内存空间传入函数中作为「类似于出参」的方式。</p><p>两种方式都同为「一个替身，并且不可变」，因此又把const修饰的引用叫做「常引用」。</p><p>等等！这里好像有点奇怪哎？！照这么说的话，常引用去接受函数返回值的情况，不是跟一个普通变量去接受返回值的情况一模一样了吗？对，是的，没错！你的想法是对的！，下面两行代码其实会生成相同的汇编指令：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-type">long</span> a, b, c;<br>&#125;;<br><br><span class="hljs-function">Test <span class="hljs-title">Demo1</span><span class="hljs-params">()</span> </span>&#123;<br>  Test t&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">const</span> Test &amp;t1 = <span class="hljs-built_in">Demo1</span>();<br>  <span class="hljs-comment">// 汇编指令等价于</span><br>  <span class="hljs-type">const</span> Test t2 = <span class="hljs-built_in">Demo1</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，如果返回值是通过寄存器传递的也是一样所以，上面两个例子中，无论是t1还是t2，本质都是一个普通的局部变量，它们有内存实体，并且生命周期跟随栈空间，因此都是 lvalue。这是本文第四个重点！！「引用本身是 lvalue」。也就是说，函数返回值是 rvalue（有可能是 prvalue，也有可能是 xvalue），但如果你用引用来接收了，它就会变成 lvalue。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>对于非平凡类型，为了保证对象的行为完整性，函数返回值会单独作为一个临时对象，如果需要在栈上使用，那么会拷贝给栈上的变量。</li><li>为了希望这片临时空间能够被代码捕获到，于是允许了用常引用来绑定函数返回值。但如果这时返回值仍然保持 xvalue 的特性的话，会引入野指针问题，违背了「引用临时空间」的原意，因此不得不将这种情况改成 lvalue，让常引用所引用的空间跟随其所在的栈空间来「延长」声明周期。</li><li>又因为常引用有const修饰，不能修改对象，因此引入了「右值引用」，当用右值引用绑定函数返回值时，行为跟常引用是一致的，可以减少一次 xvalue 的生成，「延长」声明周期，同时还可以修改对象。</li><li>又发现还是直接用变量来接收函数返回值更加直观、符合直觉，而这种情况下 xvalue 的生成并没有太大的必要，因此又规定了「复制省略」，来优化这一次复制。（优化之后，用变量接收函数返回值和用右值引用接收函数返回值就完全没有区别了；而用 const 变量接收函数返回值跟用常引用接收函数返回值也没有区别了。）</li></ul><h1 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h1><p>C++在设计时应当很单纯地认为 value 分两类：一类是变量，一类是值。变量它有内存实体，可以出现在赋值语句的左边，所以称为「左值」；值没有内存实体，只能出现在赋值语句的右边，所以称为「右值」。</p><p>但在实现时，却受到了 C 语言特性的约束（更准确来说是硬件的约束），造成我们不能把所有的右值都按照统一的方式来传递，所以才按照 C 语言处理返回值的方式强行划分出了 prvalue 和 xvalue，其作用就是用来指导析构函数的调用，以实现对象系统的自闭环。</p><p>C 语言原本就比较面相硬件，所以它的处理是对于机器来说更加合理的。而 C++则希望能提供一套对程序员更加友好的「语义」，所以它在「语义」的设计上是对人更加合理的，就比如这里的常引用，其实就是想成为一个「不可变的替身」。但又必须向下兼容 C 的解析方式，因此做了一系列的语法糖。而语法糖背后又会触发底层硬件不同处理方式的问题，所以又不得不为了区分，而强行引入奇怪的概念（比如这里的 xvalue）。</p><p>原本「找补」到这里（划分出了 xvalue 和常引用的概念后）基本已经可以子闭环了。但 C++偏偏就是非常倔强，又“贴心”地给程序员提供了「移动语义」，让当前的这个闭环瞬间被打破，然后又不得不建立一个新的理论闭环。</p><ul><li>当用常引用接收函数返回值时，临时空间不会立即释放，而是跟随常引用成为了栈上的变量</li></ul><h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><p>以 C++14 及以前的标准来说，我们发现，如果直接用一个变量来接收返回值，会多一次临时对象的拷贝和析构，用常引用虽然可以减少这一次拷贝，但常引用是用const修饰的，不可修改（如果要修改的话，还是得再去拷贝构造一个新的变量）。而为了解决这个问题，C++引入了「右值引用」。</p><p>其实这个语法完完全全就是为了解决函数返回值问题的，但为什么叫「右值引用」呢？我们在前面解释过，从语义上来说，返回值可以理解为都是 rvalue（可能是 prvalue，可能是 xvalue），因此用来接收 rvalue 的引用，就被叫做了 rvalue-reference，翻译为「右值引用」。但大家一定一定要知道的是，这是「语义」上的解释，实际只要有引用来接收函数返回值的话，它就会变成 lvalue。<br>从行为上来说，右值引用接收函数返回值和用常引用接收函数返回值的情况几乎完全相同，区别仅仅在于，右值引用不需要const修饰，因此可以更改。相比直接用变量来接收的情况，少了一次 xvalue 的中间值，也就减少了一次复制和析构。那么结论也就呼之欲出了：右值引用从语义上来说，是对右值的引用，但一旦完成了这种引用，其实整个过程就不会出现右值了，而是用一个左值来保存返回值，这就是我们为什么一直强调说「右值引用本身是左值」了。</p><h2 id="Copy-Elision"><a href="#Copy-Elision" class="headerlink" title="Copy Elision"></a>Copy Elision</h2><p>C++ -fno-elide-constructors这个编译参数，其实它就是用于关闭编译器的自动复制省略的。在 C++17 以前，虽然语言标准是没有定义复制省略的，但编译器早早就发现了这个问题，于是做了一些定制化的优化（称为返回值优化，Return Value Optimization，或 RVO），这个参数就是关闭 RVO，完全按照语言标准来进行编译。而在 C++17 标准中，定义了复制省略的方式，因此编译器就必须按照语言标准定义的那样来处理返回值了，所以在 C++17 标准下，这个编译参数也就不再生效了。</p><h2 id="移动语义的诞生"><a href="#移动语义的诞生" class="headerlink" title="移动语义的诞生"></a>移动语义的诞生</h2><p>原本，右值引用概念的引入就是为了做返回值优化的，但有了 Copy Elision（以下简称 CE）以后，仿佛右值引用在这个场景下了一个菜鸡，但这并不意味着右值引用将会成为历史语法而惨遭淘汰。因为它还有另一个重要的用途——移动语义。<br>移动语义原本是为了解决资源复用问题的，我们来看下面这个实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">String</span>();<br>  ~<span class="hljs-built_in">String</span>();<br><br>  <span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> String &amp;);<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">char</span> *buf_;<br>&#125;;<br><br><span class="hljs-comment">// 由于算法本身不是本例程的重点，因此忽略掉一切扩容和优化问题，简单书写</span><br>String::<span class="hljs-built_in">String</span>(): <span class="hljs-built_in">buf_</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">1024</span>]) &#123;&#125;<br>String::~<span class="hljs-built_in">String</span>() &#123;<br>  <span class="hljs-keyword">if</span> (buf != <span class="hljs-literal">nullptr</span>) &#123;<br>    <span class="hljs-keyword">delete</span> [] buf_;<br>  &#125;<br>&#125;<br><br>String::<span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> String &amp;str) : <span class="hljs-built_in">buf_</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">1024</span>]) &#123;<br>  std::<span class="hljs-built_in">memcpy</span>(buf_, str.buf_, <span class="hljs-number">1024</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo1</span><span class="hljs-params">()</span> </span>&#123;<br>  String str1;<br>  <span class="hljs-comment">// 这里对str1做了一些操作，比如说添加了一些数据之类的</span><br>  <span class="hljs-keyword">return</span> str1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  String str = <span class="hljs-built_in">Demo1</span>(); <span class="hljs-comment">// 会触发一次拷贝构造</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意在上例中，我们用一个简单的字符串处理类来说明问题。Demo2中，用str来接收Demo1的返回值，这里会触发 CE，直接用Demo1中的局部变量来拷贝构造这里的str。拷贝构造会调用拷贝构造函数，而我们可以看到，拷贝构造函数中是一次内存的深复制。也就是说，我们构造str会先分配一片空间，然后把str1中的buf_对应的数据拷贝到了str的buf_中，然后跟随着Demo1的结束，刚才str1的这片空间会被释放掉（析构函数中有delete []）。</p><p>这平白多一次内部的数据复制，就成为了 C++希望优化的点。假如说，新的对象能够「直接拾取」原有对象的内部空间，岂不是可以节约资源，减少复制？于是 C++引入了「移动构造函数」和「移动赋值函数」，就是说，当你用了一个「马上就不用的对象」来构造新对象的时候，就调用这个移动构造函数，里面应当执行浅复制，来延长内部资源的寿命。</p><p>那么，怎么区分「马上就不用的对象」和「一会还要继续用的对象」呢？看这里所谓「马上就不用的对象」是不是很符合 xvalue 的定义？那我就看看，如果我是用一个 xvalue 来构造新对象的话，我就复用资源；而如果是一个普通的 lvalue 的话，那说明它后面还有用，我就复制资源。那如何表示这个参数只接受 xvalue 呢？有三种方法：1.用变量接收；2.用常引用接收；3.用右值引用接收。</p><p>那么这里，C++又从「语义」上做了区分。当右值引用做函数参数时，认为优先匹配函数返回值。什么意思呢？就是对于重载函数的情况，如果我们<strong>直接用函数返回值作为实参的话，优先匹配右值引用的重载</strong>。用例子来说就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span> &#123;&#125;;<br><br><span class="hljs-function">Test <span class="hljs-title">Demo1</span><span class="hljs-params">()</span> </span>&#123;<br>  Test t;<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> Test &amp;)</span> </span>&#123;<br>  std::cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Test &amp;&amp;)</span> </span>&#123;<br>  std::cout &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  Test t;<br><br>  <span class="hljs-built_in">f</span>(t); <span class="hljs-comment">// 1</span><br>  <span class="hljs-built_in">f</span>(<span class="hljs-built_in">Demo1</span>()); <span class="hljs-comment">// 2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里有 2 个f函数的重载，对于f(t)这种调用来说，由于t本身是普通变量，不是直接函数返回值，那么这种情况只能命中常引用的版本，所以会打印1。而对于f(Demo1())这种调用来说，两个版本的f都可以匹配，但由于我们刚才提到的优先原则，如果存在右值引用的重载版本，遇到直接用函数返回值作为形参的这种情况，优先匹配右值引用的重载，所以会打印2。</p><p>大家注意，这里的这种优先原则并没有什么道理可言，就是语言标准强行规定的，用于区分你是变量传入，还是函数返回值直接传入。所以，有了这个原则，我们就可以完善刚才的移动构造函数了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">String</span>();<br>  ~<span class="hljs-built_in">String</span>();<br><br>  <span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> String &amp;);<br>  <span class="hljs-built_in">String</span>(String &amp;&amp;); <span class="hljs-comment">// 移动构造函数</span><br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">char</span> *buf_;<br>&#125;;<br><br>String::<span class="hljs-built_in">String</span>(String &amp;&amp;str): <span class="hljs-built_in">buf_</span>(str.buf_) &#123; <span class="hljs-comment">// 直接浅复制</span><br>  str.buf_ = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-comment">// 【其他函数实现省略，可以看前面的例程】</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  String str = <span class="hljs-built_in">Demo1</span>(); <span class="hljs-comment">// 调用移动构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>有了这个例子我们就知道了，右值引用最大的价值已经不在于优化返回值了，而是用于标记实参是否是直接的函数返回值。<br>！！重点来了！！ 有些教程资料可能会这么解释：函数返回值是右值，所以有右值引用接收，所以表「移动」语义的函数参数是右值引用。乍一看这个说法好像没问题，但其实经不起推敲，因为其实整个过程没有出现任何一个右值。对于String的移动构造函数来说，str是右值引用，在它的内部就是一个普通的变量，当我们在Demo2中用他来接收Demo1返回值的时候，命中了「右值引用接收函数返回值」这一情况，根据我们之前的分析，此时str是 lvalue。所以整个过程是没有出现一个 rvalue 的。</p><p>这就是笔者反复强调，C++的「语义」和「实际处理」的区别。所以这里从语义上来说函数返回值是 rvalue，包括常数也是一种 rvalue，所以右值引用做函数参数时，用于「接收」一个 rvalue。那么这里更加强调的是语义上的「接收」，这里希望接收一个右值。但右值引用本身其实就是一个栈上的普通变量，它是 lvalue。</p><p>笔者更希望大家能够看到它的本质，右值引用做函数参数是为了优先匹配直接传入函数返回值的情况，从而跟常引用做参数来进行区分。匹配之后会按照返回值转出参的这种方式，成为一个栈上的普通变量，自然就是 lvalue。</p><p>而通常情况下，用右值引用接收一个对象，是为了复用它的资源，来进行浅复制的。就好像，我们把原本的资源「移动」到了新的对象当中去，因此称之为「移动语义」。含有移动语义的构造函数就称为「移动构造函数」、含有移动语义的赋值函数就称为「移动赋值函数」。所以大家一定要清楚，这里的「移动」是「语义」上的，并没有真的移动，一般就是用来做浅复制的。当然了，你确实可以用右值引用做参数但是不做「移动」的事情（就比如说我们之前的例子中那个f函数一样），所以更加说明了这是「语义」上的，而实际只是一个软约束。</p><p>这样一来这个值类型体系总该闭环了吧？兄弟你还是太天真了，接下来就是整个体系里最复杂的一个环节——std::move。</p><h2 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a>std::move</h2><p>刚才我们解释了如果用一个右值（函数返回值、函数返回值的一部分、或者常数）做参数时，会命中右值引用的重载版本，从而实现移动语义，做浅复制，来节省资源。</p><p>但如果我们想对一个不是右值的量做同样的事情呢？这里还是用上一节的String为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  String str1;<br><br>  String str2 = str1; <span class="hljs-comment">// 这里会调用拷贝构造，因为str1是左值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果我希望，用str1构造str2时，不用拷贝构造，而是用移动构造呢？或者说，虽然str1是个左值，但我仍然希望复用它里面的资源给到新的对象，这怎么办？这就要用到魔法操作了。我们知道，如果要进行移动语义，那么就需要用右值引用来接收。但现在str1是个左值，我们要是能给他强行「掰右」的话，不就可以「欺骗」编译器，把它当做右值来处理了嘛。反正移动语义本身就是个软约束，又不会真的去 check 入参的左右性。</p><p>所以，我们的魔法操作就是，把这个str1，伪装成右值，骗过编译器去触发右值引用的重载函数。像这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  String str1;<br><br>  String str2 = <span class="hljs-built_in">static_cast</span>&lt;String &amp;&amp;&gt;(str1); <span class="hljs-comment">// 强制转成右值引用，去触发移动构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里多说一嘴，定义新变量时后面的等号并不是赋值，而是构造参数的语法糖，也就是说上面等价于</p><p>String str2(static_cast&lt;String &amp;&amp;&gt;(str1)); &#x2F;&#x2F; 构造参数，所以是用来匹配函数参数的<br>上面的这个操作由于过于魔幻，因此 STL 提供了一个工具函数来封装这个魔法操作，由于它的目的是为了触发移动语义，因此这个函数被命名为std::move，下面是它的实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> std::<span class="hljs-type">remove_reference_t</span>&lt;T&gt; &amp;&amp;<span class="hljs-title">move</span><span class="hljs-params">(T &amp;&amp;ref)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">static_cast</span>&lt;std::<span class="hljs-type">remove_reference_t</span>&lt;T&gt; &amp;&amp;&gt;(ref);<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，刚才的代码也可以写作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Demo2</span><span class="hljs-params">()</span> </span>&#123;<br>  String str1;<br><br>  String str2 = std::<span class="hljs-built_in">move</span>(str1); <span class="hljs-comment">// 强制转成右值引用，去触发移动语义</span><br>&#125;<br></code></pre></td></tr></table></figure><p>那么这里请读者一定一定要把握一个原则，<strong>std::move的本质是为了伪装，它并不能改变变量的左右性</strong>。也就是说，std::move(str1)并不能把str变成 rvalue，它本身是个变量，那么它就是 lvalue，一直都是。move的作用仅仅在于，构造str2的时候能触发移动构造函数，仅此而已，其他的什么都没变。</p><p>那么也就是说，尽管我们用了「移动语义」来构造了str2，但其实str1还是存在的，该是什么样还是什么样，并不会真的被「移动」。而此时的str2是str1的浅复制版本，原本的话它们的buf_会指向同一片空间的，但因为我们在移动构造函数中强制把原来的对象buf_给置空了，因此这里str1内部会出现空指针。所以这里有一次印证了「移动语义是软约束」这件事，使用之后行为如何，会不会出问题，完全取决我们代码怎么写的。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>还有一个概念笔者一直都没有提，那就是 glvalue（广义左值，Generalized Left-side-hand Value），lvalue 和 xvalue 合称 glvalue，原因就是他们都有内存实体。但其实这个概念并不常用，主要是因为 xvalue 虽然有内存实体，但是无法直接取地址，因此在主框架的设计中，还是把 xvalue 当做 rvalue 来处理了。</p><p>C++之所以会出现这么多难搞的值类别，就是为了在兼容 C 方式的同时，提供一种更高级的语义封装。所以 C++纠结就纠结在这里，一方面希望提供一些高级的语法，让程序员可以屏蔽掉一些底层的概念。另一方面反倒又引入了奇怪的概念让程序员不得不去深入理解底层。所以笔者自己对 C++的经验就是，学习的时候要「深」，一定要搞清底层；而实际使用的时候要「高」，应当使用更加符合直觉的高级语法来屏蔽底层实现。</p><p>本篇文章并没有直接去按理论列举 C++有哪些值类型，分别是什么定义。而是带着大家从汇编指令出发，一点一点的去猜测和体会这样设计的初衷和底层原理，希望能够给读者提供一些不同角度的理解和不一样的思路。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.zhihu.com/question/428340896/answer/2913419725">https://www.zhihu.com/question/428340896/answer/2913419725</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IO多路复用</title>
    <link href="/2025/05/05/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <url>/2025/05/05/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="IO流程"><a href="#IO流程" class="headerlink" title="IO流程"></a>IO流程</h1><p><img src="/images/ioFLow.webp"><br>总的来说IO分两个阶段：</p><ul><li>数据等待阶段：当进程或线程发起IO请求（如：调用 recvfrom 系统调用）时，它会一直阻塞，直到内核确认数据已准备好（例：网卡接收数据、网络数据到达内核缓冲区）。</li><li>数据复制阶段：内核将数据从内核空间复制到用户空间时，线程&#x2F;进程仍处于阻塞状态。此过程线程&#x2F;进程在等待I&#x2F;O完成期间无法执行其他任务（被挂起），CPU资源可能闲置。</li></ul><h2 id="底层数据流"><a href="#底层数据流" class="headerlink" title="底层数据流"></a>底层数据流</h2><p><img src="/images/fiveLayer.webp"><br><img src="/images/fiveStruct.webp"><br><img src="/images/packetFLow.webp"></p><h3 id="到达网卡"><a href="#到达网卡" class="headerlink" title="到达网卡"></a>到达网卡</h3><p>数据包到达网卡之后，网卡会校验接收到的数据包中的目的 MAC 地址是不是自己的 MAC 地址，如果不是的话通常就会丢弃掉<br>这种只接受发送给自己的数据包（其余的扔掉）的工作模式称为非混杂模式（Non-Promiscuous Mode）<br>混杂模式（Promiscuous Mode）则是网卡会接收通过网络传输的所有数据包，而不仅仅是发送给它自己的数据包<br>非混杂模式是网卡默认的工作模式，可以尽可能的保护网络安全和减少网络负载<br>网卡在校验完 MAC 地址之后还会校验数据帧（Data Frame）中校验字段 FCS 来一次确保接收到的数据包是正确的<br>这些主要靠硬件完成，cpu</p><h3 id="网卡硬件缓冲区-——-系统内存（ring-buffer）"><a href="#网卡硬件缓冲区-——-系统内存（ring-buffer）" class="headerlink" title="网卡硬件缓冲区 ——&gt; 系统内存（ring buffer）"></a>网卡硬件缓冲区 ——&gt; 系统内存（ring buffer）</h3><p>当网卡接收到数据包时，它将数据包的内容存储在硬件缓冲区中，然后通过 DMA 将接收到的数据从硬件缓冲区传输到系统内存中的指定位置，这个位置通常是一个环形缓冲区（ ring buffer）<br>DMA（直接内存访问，Direct Memory Access） DMA是一种数据传输技术，允许外设（如网卡、硬盘控制器、显卡等）直接访问计算机内存，而无需经过 CPU 通过 DMA 可以大大提高数据传输的效率，减轻 CPU 的负担</p><h3 id="触发硬中断"><a href="#触发硬中断" class="headerlink" title="触发硬中断"></a>触发硬中断</h3><p>当网卡将数据包 DMA 到用于接收的环形缓冲区（rx_ring）之后，就会触发一个硬中断来告诉 CPU 数据包收到了<br>什么时候会触发一个硬中断，可以通过下面的参数来进行配置：<br>rx-usecs：当过这么长时间过后，一个中断就会被产生<br>rx-frames：当累计接收到这么多个数据帧后，一个中断就会被产生<br>当 ring buffer 满了之后，新来的数据包将给丢弃<br>ifconfig 查看网卡的时候，可以里面有个 overruns，表示因为环形队列满而被丢弃的包<br>CPU 收到硬中断之后就会停止手中的活，保存上下文，然后去调用网卡驱动注册的硬中断处理函数<br>为数据包分配 skb_buff ，当一个数据包经过了网卡引起中断之后，每一个包都会在内存中分配一块区域，称为 sk_buff (套接字缓存，socket buffer )<br>sk_buff  是 Linux 网络的一个核心数据结构</p><h3 id="触发软中断"><a href="#触发软中断" class="headerlink" title="触发软中断"></a>触发软中断</h3><p>网卡的硬中断处理函数处理完之后驱动先 disable 硬中断，然后 enable 软中断<br>待 ring buffer 中的所有数据包被处理完成后，enable 网卡的硬中断，这样下次网卡再收到数据的时候就会通知 CPU<br>内核负责软中断进程 ksoftirqd 发现有软中断请求到来，进行下面的一些操作</p><ul><li>调用 net_rx_action 函数<br>它会通过 poll 函数去 rx_ring 中拿数据帧，获取的时候顺便把 rx_ring 上的数据给删除,除此之外，poll 函数会把 ring buffer 中的数据包转换成内核网络模块能够识别的 skb 格式（即 socket kernel buffer）</li><li>最后进入 netif_receive_skb 处理流程，它是数据链路层接收数据帧的最后一关<br>根据注册在全局数组 ptype_all 和 ptype_base 里的网络层数据帧类型去调用第三层协议的接收函数处理<br>例如对于 ip 包来讲，就会进入到 ip_rcv；如果是 arp 包的话，会进入到 arp_rcv</li></ul><h1 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h1><ul><li>只有数据在用户空间准备就绪，此时进程才解除阻塞状态，阻塞状态，cpu不会分配时间片。</li><li>默认都是阻塞IO</li><li>同步调用并不是阻塞IO，同步调用会占用cpu，可以执行其他逻辑，会主动检测IO是否准备好。</li><li>在IO的两个阶段均会阻塞线程。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>阻塞挂起： 进程&#x2F;线程在等待数据时会被挂起，不占用 CPU 资源。</li><li>及时响应： 每个操作都能得到及时处理，适合对实时性要求较高的场景。</li><li>实现简单： 开发难度低，逻辑直观，代码按顺序执行，无需处理多线程或异步回调的复杂性。</li><li>适用场景： 阻塞式 I&#x2F;O 模型适合并发量较小、对实时性要求较高的应用。但在高并发场景中，其系统开销和性能限制使其不再适用。</li><li>系统开销大：由于每个请求都会阻塞进程&#x2F;线程，因此需要为每个请求分配独立的进程或线程来处理。在高并发场景下，这种模型会消耗大量系统资源（如内存和上下文切换开销），导致性能瓶颈。</li></ol><h1 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h1><p><img src="/images/nonblockio.webp"></p><ul><li>如果内核缓冲区没有数据，内核会立即返回一个错误（如 EWOULDBLOCK 或 EAGAIN），而不会阻塞进程。</li><li>如果内核缓冲区有数据，内核会将数据复制到用户空间并返回成功。</li><li>阻塞 IO 和非阻塞 IO 的区别就在于：应用程序的调用是否立即返回</li></ul><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li>非阻塞： 进程不会被挂起，无论是否有数据都会立即返回。</li><li>轮询机制： 进程需要不断发起系统调用（轮询）来检查数据是否就绪，这会消耗大量 CPU 资源。</li><li>实现难度较低： 相比阻塞式 I&#x2F;O，开发复杂度稍高，但仍属于较简单的模型。</li><li>实时性差： 轮询机制无法保证及时响应数据到达事件，可能导致延迟。</li><li>适用场景： 适合并发量较小、且对实时性要求不高的网络应用开发。由于其 CPU 开销较大，通常不适用于高并发或高性能场景</li></ol><h1 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h1><p><img src="/images/signalIO.webp"><br>在信号驱动 I&#x2F;O 模型中，进程发起一个 I&#x2F;O 操作时，会向内核注册一个信号处理函数（如 SIGIO），然后立即返回，不会被阻塞。当内核数据就绪时，会向进程发送一个信号，进程在信号处理函数中调用 I&#x2F;O 操作（如 recvfrom）读取数据。</p><h2 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h2><ol><li>非阻塞： 进程在等待数据时不会被阻塞，可以继续执行其他任务。</li><li>回调机制： 通过信号通知的方式实现异步事件处理，数据就绪时内核主动通知进程。</li><li>实现难度大： 信号处理函数的编写和调试较为复杂，开发难度较高。</li><li>信号处理复杂性： 信号处理函数需要处理异步事件，可能引入竞态条件和不可预测的行为。</li><li>适用场景有限： 适合对实时性要求较高、但并发量较小的网络应用开发。由于其实现复杂性和潜在问题，通常不适用于高并发或高性能场景。</li></ol><h1 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h1><p><img src="/images/yiBuIO.webp"></p><ul><li>在异步 I&#x2F;O 模型中，当进程发起一个 I&#x2F;O 操作时，会立即返回，不会被阻塞，也不会立即返回结果。内核会负责完成整个 I&#x2F;O 操作（包括数据准备和复制到用户空间），并在操作完成后通知进程。如果 I&#x2F;O 操作成功，进程可以直接获取到数据。</li><li>同步 IO 和异步 IO 的区别就在于：数据拷贝的时候进程是否阻塞</li></ul><h2 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h2><ol><li>完全非阻塞： 进程在发起 I&#x2F;O 操作后不会被阻塞，可以继续执行其他任务。</li><li>Proactor 模式： 内核负责完成 I&#x2F;O 操作并通知进程，进程只需处理最终结果。</li><li>高性能： 适合高并发、高性能场景，能够充分利用系统资源。</li><li>操作系统支持： 异步 I&#x2F;O 需要操作系统的底层支持。在 Linux 中，异步 I&#x2F;O 从 2.5 版本内核开始引入，并在 2.6 版本中成为标准特性。</li><li>实现难度大： 异步 I&#x2F;O 的开发复杂度较高，需要处理回调、事件通知等机制。</li><li>适用场景： 异步 I&#x2F;O 模型非常适合高性能、高并发的网络应用开发，如大规模 Web 服务器、数据库系统等</li></ol><h1 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h1><p><img src="/images/fuyongio.webp"></p><ul><li>**多路:**是指多个网络连接(Socket)</li><li>**复用:**是指通过一个线程同时监控多个文件描述符的就绪状态。这样，程序可以高效地处理多个 I&#x2F;O 事件，而不需要为每个连接创建单独的线程，从而节省系统资源。</li><li>主要具体技术:epoll,poll,select(本质上都是同步IO)</li><li>与多进程和多线程技术相比，I&#x2F;O多路复用技术的最大优势是系统开销小，系统不必创建进程&#x2F;线程，也不必维护这些进程&#x2F;线程，从而大大减小了系统的开销。 I&#x2F;O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I&#x2F;O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I&#x2F;O则无需自己负责进行读写，异步I&#x2F;O的实现会负责把数据从内核拷贝到用户空间</li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><img src="/images/selectIO.gif"></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>每次调用select，都需要把被监控的fds集合从用户态空间拷贝到内核态空间，高并发场景下这样的拷贝会使得消耗的资源是很大的</li><li>能监听端口的数量有限，单个进程所能打开的最大连接数由FD_SETSIZE宏定义，监听上限就等于fds_bits位数组中所有元素的二进制位总数，其大小是32个整数的大小（在32位的机器上，大小就是3232，同理64位机器上为3264），当然我们可以对宏FD_SETSIZE进行修改，然后重新编译内核，但是性能可能会受到影响，一般该数和系统内存关系很大，具体数目可以cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max察看。32位机默认1024个，64位默认2048</li><li>被监控的fds集合中，只要有一个有数据可读，整个socket集合就会被遍历一次调用sk的poll函数收集可读事件：由于当初的需求是朴素，仅仅关心是否有数据可读这样一个事件，当事件通知来的时候，由于数据的到来是异步的，我们不知道事件来的时候，有多少个被监控的socket有数据可读了，于是，只能挨个遍历每个socket来收集可读事件了</li></ul><h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><ul><li>poll 的实现与 select 非常相似，都是通过监视多个文件描述符（fd）来实现 I&#x2F;O 多路复用。两者的主要区别在于描述 fd 集合的方式：select 使用 fd_set 结构，而 poll 使用 pollfd 结构。select 的 fd_set 结构限制了 fd 集合的大小（通常为 1024），而 poll 使用 pollfd 结构，理论上可以支持更多的 fd，解决了 select 的问题 (2)。</li><li>与 select 类似，poll 也存在性能瓶颈。当监视的 fd 数量较多时，poll 需要将整个 pollfd 数组在用户态和内核态之间复制，无论这些 fd 是否就绪。这种复制的开销会随着 fd 数量的增加而线性增长，导致性能下降。</li><li>poll 适合需要监视较多 fd 的场景，但在高并发或 fd 数量非常大的情况下，性能仍然不如 epoll。</li><li>从实现来看。很明显它并没优化大量描述符数组被整体复制于用户态和内核态的地址空间之间，以及个别描述符就绪触发整体描述符集合的遍历的低效问题。</li></ul><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p><img src="/images/epollIO.gif"></p><h3 id="epoll惊群"><a href="#epoll惊群" class="headerlink" title="epoll惊群"></a>epoll惊群</h3><p>多个进程等待在ep-&gt;wq上，事件触发后所有进程都被唤醒，但只有其中1个进程能够成功继续执行的现象。<br>其他被白白唤起的进程等于做了无用功，可能会造成系统负载过高的问题。<br>为了解决epoll惊群，内核后续的高版本又提供了EPOLLEXCLUSIVE选项和SO_REUSEPORT选项，我个人理解两种解决方案思路上的不同点在于：EPOLLEXCLUSIVE是在唤起进程阶段起作用，只唤起排在队列最前面的1个进程；而SO_REUSEPORT是在分配连接时起作用，相当于每个进程自己都有一个独立的epoll实例，内核来决策把连接分配给哪个epoll。</p><h3 id="水平触发-LT-和边缘触发-ET"><a href="#水平触发-LT-和边缘触发-ET" class="headerlink" title="水平触发(LT)和边缘触发(ET)"></a>水平触发(LT)和边缘触发(ET)</h3><ul><li>是epoll_wait的两种工作模式</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>客户端都是输入“abcdefgh” 8个字符，服务端每次接收2个字符。水平触发时，客户端输入8个字符触发了一次读就绪事件，由于被监视文件上还有数据可读故一直返回读就绪，服务端4次循环每次都能取到2个字符，直到8个字符全部读完</li><li>边缘触发时，客户端同样输入8个字符但服务端一次循环读到2个字符后这个读就绪事件就没有了。等客户端再输入一个字符串后，服务端关注到了数据的“变化”继续从缓冲区读接下来的2个字符“c”和”d”</li></ul><h3 id="相比select和poll的优点"><a href="#相比select和poll的优点" class="headerlink" title="相比select和poll的优点"></a>相比select和poll的优点</h3><h4 id="事件驱动机制-基于回调-而非轮询"><a href="#事件驱动机制-基于回调-而非轮询" class="headerlink" title="事件驱动机制(基于回调,而非轮询)"></a>事件驱动机制(基于回调,而非轮询)</h4><ul><li>select 和 poll 的轮询机制： select 和 poll 采用轮询的方式检查所有被监视的文件描述符（fd），无论这些 fd 是否就绪。每次调用时，都需要将整个 fd 集合从用户态复制到内核态，并在内核中遍历所有 fd 来检查其状态。随着 fd 数量的增加，轮询的开销会线性增长，导致性能显著下降。</li><li>epoll 的事件驱动机制：- epoll 使用基于事件回调的机制。内核会维护一个就绪队列，只关注那些状态发生变化的 fd（即活跃的 fd）。一旦检测到epoll管理的socket描述符就绪时，内核会采用类似 callback 的回调机制，将其加入就绪队列，epoll_wait 只需从队列中获取就绪的 fd，而不需要遍历所有 fd。这种机制使得 epoll 的性能不会随着 fd 数量的增加而显著下降。</li></ul><h4 id="避免频繁的用户态与内核态数据拷贝"><a href="#避免频繁的用户态与内核态数据拷贝" class="headerlink" title="避免频繁的用户态与内核态数据拷贝"></a>避免频繁的用户态与内核态数据拷贝</h4><ul><li>select 和 poll 的数据拷贝问题： 每次调用 select 或 poll 时，都需要将整个 fd 集合从用户态复制到内核态，调用结束后再将结果从内核态复制回用户态。这种频繁的数据拷贝在高并发场景下会带来较大的性能开销。</li><li>epoll 的优化： epoll 使用了内存映射（ mmap ）技术，这样便彻底省掉了这些socket描述符在系统调用时拷贝的开销（因为从用户空间到内核空间需要拷贝操作）。mmap将用户空间的一块地址和内核空间的一块地址同时映射到相同的一块物理内存地址（不管是用户空间还是内核空间都是虚拟地址，最终要通过地址映射映射到物理地址），使得这块物理内存对内核和对用户均可见，减少用户态和内核态之间的数据交换，不需要依赖拷贝，这样子内核可以直接看到epoll监听的socket描述符，效率极高。</li></ul><h4 id="支持更大的并发连接数"><a href="#支持更大的并发连接数" class="headerlink" title="支持更大的并发连接数"></a>支持更大的并发连接数</h4><ul><li>select 的 fd 数量限制： select 使用 fd_set 结构，其大小通常被限制为 1024（由<code>__FD_SETSIZE</code>定义），这意味着它最多只能同时监视 1024 个 fd。虽然可以通过修改内核头文件并重新编译内核来扩大这一限制，但这并不能从根本上解决问题。</li><li>poll 的改进与局限： poll 使用 pollfd 结构，理论上可以支持更多的 fd，但它仍然需要遍历所有 fd，性能会随着 fd 数量的增加而下降。</li><li>epoll 的无限制支持： epoll 没有 fd 数量的硬性限制，适合高并发场景，能够轻松支持数万甚至数十万的并发连接。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404643915947966659">https://weibo.com/ttarticle/p/show?id=2309404643915947966659</a></li><li><a href="https://mp.weixin.qq.com/s/26BkzSBHUZTVdgPF8IJRMQ?poc_token=HGNMGGij7DFKRrGtoT0BUEQfFP419iP6G76H6Ke4">https://mp.weixin.qq.com/s/26BkzSBHUZTVdgPF8IJRMQ?poc_token=HGNMGGij7DFKRrGtoT0BUEQfFP419iP6G76H6Ke4</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247486122&idx=1&sn=df659a7458028772c9595e98d5cefbc1&chksm=c2930aeef5e483f843c282f43fcba02c919d773a33a1c54cbf2c5d6f1076500c7c2e27468176&token=198919963&lang=zh_CN#rd">https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&amp;mid=2247486122&amp;idx=1&amp;sn=df659a7458028772c9595e98d5cefbc1&amp;chksm=c2930aeef5e483f843c282f43fcba02c919d773a33a1c54cbf2c5d6f1076500c7c2e27468176&amp;token=198919963&amp;lang=zh_CN#rd</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活Tip</title>
    <link href="/2025/02/10/%E7%94%9F%E6%B4%BBTip/"/>
    <url>/2025/02/10/%E7%94%9F%E6%B4%BBTip/</url>
    
    <content type="html"><![CDATA[<h1 id="鸡汤"><a href="#鸡汤" class="headerlink" title="鸡汤"></a>鸡汤</h1><h2 id="锻炼大脑-避免痴呆"><a href="#锻炼大脑-避免痴呆" class="headerlink" title="锻炼大脑(避免痴呆)"></a>锻炼大脑(避免痴呆)</h2><ul><li>快走:每天快走30分钟,每周5次</li><li>尝试新鲜事物:学习语言,运动</li><li>保持社交</li><li>要有生活目标</li><li>放松</li><li>保护头部</li><li>地中海饮食(七份蔬菜和水果),坚果,核桃,杏仁,豆类,花生等等</li><li>积极</li></ul><h2 id="提高沟通能力"><a href="#提高沟通能力" class="headerlink" title="提高沟通能力"></a>提高沟通能力</h2><ul><li>不要三心二意</li><li>不要说教</li><li>开放式问题而不是一般疑问句</li><li>顺其自然，进行到哪讲哪</li><li>不知道就不知道</li><li>不要把自己经历类比，即使相同也不行，每个人经历都不同</li><li>别重复自己的话</li><li>少说废话，各种细枝末节</li><li>对他人感兴趣，做好大吃一惊其经历的准备</li><li>listen</li></ul><h2 id="21个小习惯"><a href="#21个小习惯" class="headerlink" title="21个小习惯"></a>21个小习惯</h2><ul><li>写下三个你感激的事情</li><li>每周拒绝一次</li><li>晨起锻炼1分钟</li><li>投资经历</li><li>收拾房间</li><li>扔无用东西</li><li>理财</li><li>每小时站起来</li><li>相信简单的谚语(每天花20min学习,5年后你会成为该领域专家)</li><li>多提开放性问题</li><li>关掉通知</li><li>准备好衣服</li><li>少看新闻(两天一次)</li><li>多喝水</li><li>每个月发现新东西,事物，知识</li><li>叠床</li><li>每天一分钟独处</li><li>问问自己做的事，是否值得</li><li>立刻去做某些只要两分钟的事</li><li>注意姿势</li><li>每天阅读15min</li></ul><h2 id="戒掉7种说话习惯"><a href="#戒掉7种说话习惯" class="headerlink" title="戒掉7种说话习惯"></a>戒掉7种说话习惯</h2><ul><li>不要说“只”：我只是想做更好-&gt;我想做更好</li><li>不要说我想要干嘛</li><li>夸奖式介绍朋友,显得自己自信</li><li>少用无意义的恩，啊。。等填充词</li><li>道歉就真正道歉，不要用但是</li><li>猜测某人不喜欢但是还推荐(You probbably don’t care(but))</li><li>不要说某某人使你做某事，显得自己是仆人</li></ul><h2 id="个小习惯"><a href="#个小习惯" class="headerlink" title="个小习惯"></a>个小习惯</h2><ul><li>说到做到</li><li>每天写日记</li><li>不说谎</li><li>抽时间陪朋友</li><li>联系技能</li><li>去健身房</li><li>融入你想要成为的群体</li><li>读书</li><li>制定而复习计划</li><li>不要单独吃饭</li><li>注重衣着</li><li>冥想和反思</li><li>传授知识给他人</li><li>玩耍</li><li>健康饮食</li><li>和不同年龄的人保持交流</li><li>欣赏艺术</li><li>说起床就起床</li><li>大声读出你的梦想</li></ul><h2 id="10种处理焦虑的方法"><a href="#10种处理焦虑的方法" class="headerlink" title="10种处理焦虑的方法"></a>10种处理焦虑的方法</h2><ul><li>写下你的焦虑</li><li>锻炼</li><li>冥想</li><li>少使用互联网</li><li>不要让你的手空着</li><li>使用精油</li><li>说出你的担忧</li><li>在脑中重复忧虑</li><li>考虑外部因素</li><li>分析并分类你的担忧</li></ul><h2 id="梦的解析"><a href="#梦的解析" class="headerlink" title="梦的解析"></a>梦的解析</h2><ul><li>考试考0分,找不到考场，漏写-&gt;生活中正接受考验，让你对未来感到焦虑</li><li>掉牙齿-&gt;没有安全感，觉得自己不够好，不吸引人，害怕别人批评你，自己尴尬</li><li>高处坠落或溺水-&gt;不满足现状，害怕跌到，需要开辟新道路来发现人生意义</li></ul><h2 id="8个改善心理健康的小习惯"><a href="#8个改善心理健康的小习惯" class="headerlink" title="8个改善心理健康的小习惯"></a>8个改善心理健康的小习惯</h2><ul><li>挺直腰杆站起来</li><li>练习乐观思考</li><li>走到大自然中</li><li>拥抱某人</li><li>养宠物</li><li>运动</li><li>充足的睡眠</li><li>写感恩日记</li></ul><h2 id="6个更好生活"><a href="#6个更好生活" class="headerlink" title="6个更好生活"></a>6个更好生活</h2><ul><li>相信你值得</li><li>世界是你的ATM,善待世界</li><li>给自己时间去思考和做梦</li><li>减少有害输入</li><li>立刻行动</li><li>明白真正的裁判是谁</li></ul><h2 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h2><ul><li>冥想</li><li>工作15min</li><li>每天做</li><li>迈出第一步</li><li>倒数让自己行动起来</li><li>志同道合的朋友</li><li>稳定规律的生活</li></ul><h2 id="成功的关键点"><a href="#成功的关键点" class="headerlink" title="成功的关键点"></a>成功的关键点</h2><ul><li>专注自己的进步，而非他人的成就</li><li>学会在危机中寻机</li><li>当你坚持不下去时，更努力些</li><li>切忌骄傲自满，虚心找不足,求精进</li></ul><h2 id="7个要掌握的心理学技巧"><a href="#7个要掌握的心理学技巧" class="headerlink" title="7个要掌握的心理学技巧"></a>7个要掌握的心理学技巧</h2><ul><li>藏拙</li><li>抵抗群体思维</li><li>别在意他人的看法</li><li>别责怪</li><li>不要抢着说话</li><li>别被欲望操纵</li><li>别太较真(那些你帮不上的国家大事,和社会新闻)</li></ul><h2 id="训练大脑"><a href="#训练大脑" class="headerlink" title="训练大脑"></a>训练大脑</h2><ul><li>打破常规，做些新颖的事</li><li>另辟蹊径</li><li>使用非惯用手</li><li>玩观察游戏</li><li>讲故事</li><li>记住你的清单</li><li>停止依赖科技</li><li>练习解决问题</li><li>大声朗读</li><li>在纸上写作</li><li>从一个新的角度看</li></ul><h2 id="五条晨间习惯"><a href="#五条晨间习惯" class="headerlink" title="五条晨间习惯"></a>五条晨间习惯</h2><ul><li>为逆境做好准备</li><li>为美好的一天作计划</li><li>专注你的目标</li><li>提醒自己控制二分法(专注自己可以控制的事)</li><li>记住生命有限</li></ul><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>其实，人类社会的意义不过四个：延续种族 、掌控心智、掌控环境、增进我们的满足感。<br>但人类历史的车轮滚滚向前，谁的生命不是微不足道的呢？即便是苏格拉底、莎士比亚或爱因斯坦，对着漫长的人类社会的河流所作出的贡献都是微不足道的。<br>但我们无需从个体的维度去考虑生命的意义，而是要从全人类的维度去考虑个体的贡献。你会发现，那么，今天赚了点钱，照顾了孩子，收拾了房子，都是有意义的。每个个体都在人类文明这一进程中划上了痕迹</p><h1 id="出境注意"><a href="#出境注意" class="headerlink" title="出境注意"></a>出境注意</h1><ul><li>遭遇盘查莫慌张，妥善应对寻帮助。出国（境）人员如遇他国执法人员盘查，要沉着冷静，理性配合，妥善应对。如语言不通，应寻求翻译协助，切勿随意回答；如提问涉及我国家秘密，应当向其申明并拒绝回答；如遇开箱查验，本人务必在场，以防有人暗中动手脚；如遇到境外间谍情报机关或其他执法部门约谈、攀拉、策反，应坚决表明立场，不到对方指定场所，不签署任何文件，坚持要求联系我驻外使领馆寻求领事保护。</li><li>交友搭讪需谨慎，防范意识不可少。出国（境）人员在旅游期间约伙搭伴，应注意辨别对方人员情况，警惕无端打听个人隐私、索要相关敏感信息的可疑人员，不收取对方提供的任何财物，不透露任何内部信息，不给境外间谍情报机关套取信息、诱导胁迫的可乘之机。此外，出国（境）人员应拒绝为陌生人携带来源不明的物品，并谨慎对待任何过于亲密或异常的行为。</li><li>时刻绷紧保密弦，严防大意失泄密。出国（境）人员应尽量避免在境外使用公共Wi-Fi登录重要账户或传输敏感数据，严禁在公开网络环境中处理国家秘密和工作秘密事项，个人电子设备应提前设置安全防护措施，防止被非法入侵。此外，涉密岗位工作人员出国（境）前要仔细核对携带出国（境）物品是否含有秘密载体，未经有关主管部门批准，任何组织和个人不得携带、传递国家秘密载体出国（境）。出国（境）后更需绷紧保密纪律这根弦，不谈论敏感内容，防止敏感信息外泄。</li><li>言行举止需注意，切勿轻信被利用。境外敌对组织常向我出国（境）人员传播涉我虚假信息、政治谣言、失实报道等，丑化我国国家形象，进行意识形态渗透。出国（境）人员如遇到涉我敏感话题活动时，应保持冷静和理性，客观阐释我经济社会发展成就、展现我良好国际形象，切勿随意传播未经核实的信息，更不能参与、协助可能损害我国家利益的活动。</li></ul><h1 id="举报骚扰电话"><a href="#举报骚扰电话" class="headerlink" title="举报骚扰电话"></a>举报骚扰电话</h1><p>微信搜索##12321举报##</p><h1 id="报案注意点"><a href="#报案注意点" class="headerlink" title="报案注意点"></a>报案注意点</h1><ul><li>报案一定要留下痕迹，比如要求有报案回执，如果不立案要有不予立案通知书，以及报案前先打110留记录</li><li>去国务院小程序投诉要语言精炼，逻辑清晰</li></ul><h1 id="待业交社保"><a href="#待业交社保" class="headerlink" title="待业交社保"></a>待业交社保</h1><ul><li><img src="/images/sheBao1.jpg" alt="p1"> </li><li><img src="/images/sheBao2.jpg" alt="p2"> </li><li><img src="/images/sheBao3.jpg" alt="p3"></li></ul><h1 id="消灭小飞虫"><a href="#消灭小飞虫" class="headerlink" title="消灭小飞虫"></a>消灭小飞虫</h1><p>白醋一次性杯子1&#x2F;4左右，洗洁精2&#x2F;4,搅拌均匀，放一个地方。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令_网络</title>
    <link href="/2024/04/29/Linux%E5%91%BD%E4%BB%A4-%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/04/29/Linux%E5%91%BD%E4%BB%A4-%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><ul><li><code>netstat -a</code>:列出所有端口(包括监听和未监听)</li><li><code>netstat -at</code>:列出所有TCP端口</li><li><code>netstat -l</code>:列出所有监听的服务状态</li><li><code>netstat -antp |grep 6379</code>:查询某个端口</li></ul><h1 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h1><p>探测前往地址IP的路由路径</p><h1 id="host"><a href="#host" class="headerlink" title="host"></a>host</h1><p>DNS查询</p><h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><p>查看路由状态</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令_资源性能篇</title>
    <link href="/2024/04/26/Linux%E5%91%BD%E4%BB%A4-%E8%B5%84%E6%BA%90%E6%80%A7%E8%83%BD%E7%AF%87/"/>
    <url>/2024/04/26/Linux%E5%91%BD%E4%BB%A4-%E8%B5%84%E6%BA%90%E6%80%A7%E8%83%BD%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h1><p>该命令输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">23:51:26 up 21:31, 1 user, load average: 30.02, 26.43, 19.02<br></code></pre></td></tr></table></figure><p>该平均负载指标了<strong>要</strong>运行的任务(进程)数量，包括要在CPU上运行的进程以及在不中断IO(磁盘IO)中阻塞的进程。<br>三个值分别代表了1min，5min,15min的平均值</p><h1 id="dmesg"><a href="#dmesg" class="headerlink" title="dmesg"></a>dmesg</h1><p>操作系统消息日志</p><h1 id="free"><a href="#free" class="headerlink" title="free"></a>free</h1><p><a href="https://linuxtools-rst.readthedocs.io/zh-cn/latest/tool/free.html">linuxtools-free</a></p><h1 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h1><p><code>vmstat [-V] [-n] [delay [count]]</code></p><ul><li>-V表示打印出版本信息；</li><li>-n表示在周期性循环输出时，输出的头部信息仅显示一次；</li><li>delay是两次输出之间的延迟时间；</li><li>count是指按照这个时间间隔统计的次数。</li></ul><h2 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vmstat 1<br>procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br>34  0    0 200889792  73708 591828    0    0     0     5    6   10 96  1  3  0  0<br>32  0    0 200889920  73708 591860    0    0     0   592 13284 4282 98  1  1  0  0<br>32  0    0 200890112  73708 591860    0    0     0     0 9501 2154 99  1  0  0  0<br>32  0    0 200889568  73712 591856    0    0     0    48 11900 2459 99  0  0  0  0<br>32  0    0 200890208  73712 591860    0    0     0     0 15898 4840 98  1  1  0  0<br></code></pre></td></tr></table></figure><h3 id="Procs-进程"><a href="#Procs-进程" class="headerlink" title="Procs(进程)"></a>Procs(进程)</h3><ul><li><code>r</code>:在CPU上运行并等待回合的进程数。由于它不包含IO，因此它比指示CPU饱和的平均负载提供了更多的信息。一个大于CPU核数的r值就是饱和的。</li><li><code>b</code>:等待IO的进程数量</li></ul><h3 id="Memory-内存"><a href="#Memory-内存" class="headerlink" title="Memory(内存)"></a>Memory(内存)</h3><ul><li>free:空闲的内存(单位KB)</li><li>swpd: 使用虚拟内存大小</li><li>buff: 用作缓冲的内存大小</li><li>cache: 用作缓存的内存大小</li></ul><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><ul><li>si: 每秒从交换区写到内存的大小</li><li>so: 每秒写入交换区的内存大小<br>这两个非空，说明物理内存用完了，现在使用交换内存</li></ul><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><ul><li>bi: 每秒读取的块数</li><li>bo: 每秒写入的块数(每块1024bytes)</li></ul><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><ul><li>in: 每秒中断数，包括时钟中断</li><li>cs: 每秒上下文切换数</li></ul><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>显示的是所有cpu的平均值</p><ul><li><code>us、sy、id、wa、st</code>:这些是CPU时间的分类，</li><li>us: 用户进程执行时间(user time)</li><li>sy: 系统进程执行时间(system time)</li><li>id: 空闲时间(包括IO等待时间)</li><li>wa: 等待IO时间</li><li>st: 被偷窃时间（被其它宾客系统进行使用，或宾客系统隔离的驱动程序域Xen）<br>通过将用户时间和系统时间这两个分类相加，即可判断CPU是否繁忙。一定的等待IO时间说明磁盘有可能是性能瓶颈。你可以认为等待IO时间是另一种形式的空闲时间，它提供了它是如何空闲的线索。 IO处理需要占用CPU系统时间。一个较高的CPU系统时间（超过20%）可能会很有趣，有必要进一步研究：也许内核在很低效地处理IO。</li></ul><h1 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h1><p><code>mpstat -P ALL 1</code>：显示每个CPU的时间明细，用于检查不平衡状况</p><h1 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h1><p><code>iostat [参数][时间][次数]</code><br>这是了解块设备（磁盘），应用的工作负载和产生的性能影响的绝佳工具。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>-C 显示CPU使用情况<br>-d 显示磁盘使用情况<br>-k 以 KB 为单位显示<br>-m 以 M 为单位显示<br>-N 显示磁盘阵列(LVM) 信息<br>-n 显示NFS 使用情况<br>-p[磁盘] 显示磁盘和分区的情况<br>-t 显示终端和CPU的信息<br>-x 显示详细信息<br>-V 显示版本信息</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><code>iostat -xz 1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)<br>avg-cpu:  %user   %<span class="hljs-built_in">nice</span> %system %iowait  %steal   %idle<br>          73.96    0.00    3.73    0.03    0.06   22.21<br>Device:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util<br>xvda        0.00     0.23    0.21    0.18     4.52     2.08    34.37     0.00    9.98   13.80    5.42   2.44   0.09<br>xvdb        0.01     0.00    1.02    8.94   127.97   598.53   145.79     0.00    0.43    1.78    0.28   0.25   0.25<br>xvdc        0.01     0.00    1.02    8.86   127.79   595.94   146.50     0.00    0.45    1.82    0.30   0.27   0.26<br>dm-0        0.00     0.00    0.69    2.32    10.47    31.69    28.01     0.01    3.23    0.71    3.98   0.13   0.04<br>dm-1        0.00     0.00    0.00    0.94     0.01     3.78     8.00     0.33  345.84    0.04  346.81   0.01   0.00<br>dm-2        0.00     0.00    0.09    0.07     1.35     0.36    22.50     0.00    2.55    0.23    5.62   1.78   0.03<br></code></pre></td></tr></table></figure><h3 id="cpu属性值"><a href="#cpu属性值" class="headerlink" title="cpu属性值"></a>cpu属性值</h3><ul><li>%user：CPU处在用户模式下的时间百分比。</li><li>%nice：CPU处在带NICE值的用户模式下的时间百分比。</li><li>%system：CPU处在系统模式下的时间百分比。</li><li>%iowait：CPU等待输入输出完成时间的百分比。</li><li>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</li><li>%idle：CPU空闲时间百分比。<br>如果%iowait的值过高，表示硬盘存在I&#x2F;O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。</li></ul><h3 id="disk属性值"><a href="#disk属性值" class="headerlink" title="disk属性值"></a>disk属性值</h3><ul><li>rrqm&#x2F;s: 每秒进行 merge 的读操作数目。即 rmerge&#x2F;s</li><li>wrqm&#x2F;s: 每秒进行 merge 的写操作数目。即 wmerge&#x2F;s</li><li>r&#x2F;s: 每秒完成的读 I&#x2F;O 设备次数。即 rio&#x2F;s</li><li>w&#x2F;s: 每秒完成的写 I&#x2F;O 设备次数。即 wio&#x2F;s</li><li>rsec&#x2F;s: 每秒读扇区数。即 rsect&#x2F;s</li><li>wsec&#x2F;s: 每秒写扇区数。即 wsect&#x2F;s</li><li>rkB&#x2F;s: 每秒读K字节数。是 rsect&#x2F;s 的一半，因为每扇区大小为512字节。</li><li>wkB&#x2F;s: 每秒写K字节数。是 wsect&#x2F;s 的一半。</li><li>avgrq-sz: 平均每次设备I&#x2F;O操作的数据大小 (扇区)。</li><li>avgqu-sz: 平均I&#x2F;O队列长度。发给设备的平均请求数。值大于1可以表明已达到饱和状态（尽管设备通常可以并行处理请求，尤其是在多个后端磁盘所组成的前端虚拟设备的情况下）。</li><li>await: 平均每次设备I&#x2F;O操作的等待时间 (毫秒)。这是应用程序所感受到的时间，它包括IO排队时间和IO服务时间。大于预期的平均时间可能表示块设备饱和或设备出现问题了。</li><li>svctm: 平均每次设备I&#x2F;O操作的服务时间 (毫秒)。</li><li>%util: 一秒中有百分之多少的时间用于 I&#x2F;O 操作，即被io消耗的cpu百分比，设备利用率。这是一个表征繁忙度的百分比，它表示设备每秒工作的时间。尽管它的值取决于设备，但值大于60%通常会导致性能不佳（也会通过await的值观察到）。接近100␐%的值通常表示饱和。</li></ul><h3 id="信息意义"><a href="#信息意义" class="headerlink" title="信息意义"></a>信息意义</h3><ul><li>如果%iowait的值过高，表示硬盘存在I&#x2F;O瓶颈。</li><li>如果 %util 接近 100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘可能存在瓶颈。</li><li>如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；</li><li>如果 await 远大于 svctm，说明I&#x2F;O 队列太长，io响应太慢，则需要进行必要优化。</li><li>如果avgqu-sz比较大，也表示有大量io在等待。</li></ul><h1 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h1><p>sar是System Activity Reporter（系统活动情况报告）的缩写。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。需要启动service(systemctl start sysstat.service),并保存相关日志到文件</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>-A 汇总所有的报告</li><li>-a 报告文件读写使用情况</li><li>-B 报告附加的缓存的使用情况</li><li>-b 报告缓存的使用情况</li><li>-c 报告系统调用的使用情况</li><li>-d 报告磁盘的使用情况</li><li>-g 报告串口的使用情况</li><li>-h 报告关于buffer使用的统计数据</li><li>-m 报告IPC消息队列和信号量的使用情况</li><li>-n 报告命名cache的使用情况</li><li>-p 报告调页活动的使用情况</li><li>-q 报告运行队列和交换队列的平均长度</li><li>-R 报告进程的活动情况</li><li>-r 报告没有使用的内存页面和硬盘块</li><li>-u 报告CPU的利用率</li><li>-v 报告进程、i节点、文件和锁表状态</li><li>-w 报告系统交换活动状况</li><li>-y 报告TTY设备活动状况</li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="sar-n-DEV-1"><a href="#sar-n-DEV-1" class="headerlink" title="sar -n DEV 1"></a><code>sar -n DEV 1</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015     _x86_64_    (32 CPU)<br>12:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil<br>12:16:49 AM      eth0  18763.00   5032.00  20686.42    478.30      0.00      0.00      0.00      0.00<br>12:16:49 AM        lo     14.00     14.00      1.36      1.36      0.00      0.00      0.00      0.00<br>12:16:49 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00<br>12:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil<br>12:16:50 AM      eth0  19763.00   5101.00  21999.10    482.56      0.00      0.00      0.00      0.00<br>12:16:50 AM        lo     20.00     20.00      3.25      3.25      0.00      0.00      0.00      0.00<br>12:16:50 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00<br></code></pre></td></tr></table></figure><p>此命令可以检查网络接口的吞吐量：rxkB&#x2F;s和txkB&#x2F;s，作为工作负载的度量，还可以检查是否已达到网络接口的限制。在上面的示例中，eth0接收速率达到22MB&#x2F;s，即176Mbit&#x2F;s（远低于1Gbit&#x2F;s的网络接口限制，假设是千兆网卡）。</p><h3 id="sar-n-TCP-ETCP-1"><a href="#sar-n-TCP-ETCP-1" class="headerlink" title="sar -n TCP,ETCP 1"></a><code>sar -n TCP,ETCP 1</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)<br>12:17:19 AM  active/s passive/s    iseg/s    oseg/s<br>12:17:20 AM      1.00      0.00  10233.00  18846.00<br>12:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s<br>12:17:20 AM      0.00      0.00      0.00      0.00      0.00<br></code></pre></td></tr></table></figure><p>这是一些关键的TCP指标的摘要，包括：</p><ul><li><code>active/s</code>：每秒本地启动的TCP连接数（例如，通过connect（））。</li><li><code>passive/s</code>：每秒远程启动的TCP连接数（例如，通过accept（））。</li><li><code>retrans/s</code>：每秒TCP重传的次数。<br>主动和被动计数通常作为服务器TCP负载的粗略度量：新接受的连接数（被动）和新出站的连接数（主动）。将主动视为出站，将被动视为入站可能对理解这两个指标有些帮助，但这并不是严格意义上的（例如，考虑从localhost到localhost的连接）。<br>重新传输是网络或服务器问题的迹象；它可能是不可靠的网络（例如，公共Internet），也可能是由于服务器过载并丢弃了数据包。上面的示例仅显示每秒一个新的TCP连接。</li></ul><h3 id="sar-u-1-2"><a href="#sar-u-1-2" class="headerlink" title="sar -u 1 2"></a><code>sar -u 1 2</code></h3><p>cpu使用率</p><ul><li>%user 用户模式下消耗的CPU时间的比例；</li><li>%nice 通过nice改变了进程调度优先级的进程，在用户模式下消耗的CPU时间的比例</li><li>%system 系统模式下消耗的CPU时间的比例；</li><li>%iowait CPU等待磁盘I&#x2F;O导致空闲状态消耗的时间比例；</li><li>%steal 利用Xen等操作系统虚拟化技术，等待其它虚拟CPU计算占用的时间比例；</li><li>%idle CPU空闲时间比例；</li></ul><h3 id="sar-q-1-2"><a href="#sar-q-1-2" class="headerlink" title="sar -q 1 2"></a><code>sar -q 1 2</code></h3><p>cpu平均负载</p><ul><li>runq-sz：运行队列的长度（等待运行的进程数）</li><li>plist-sz：进程列表中进程（processes）和线程（threads）的数量</li><li>ldavg-1：最后1分钟的系统平均负载 ldavg-5：过去5分钟的系统平均负载</li><li>ldavg-15：过去15分钟的系统平均负载</li></ul><h3 id="sar-r-1-2"><a href="#sar-r-1-2" class="headerlink" title="sar -r 1 2"></a><code>sar -r 1 2</code></h3><p>内存情况</p><ul><li>kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.</li><li>kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.</li><li>%memused：物理内存使用率，这个值是kbmemused和内存总量(不包括swap)的一个百分比.</li><li>kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.</li><li>kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).</li><li>%commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.</li></ul><h3 id="sar-W-1-2"><a href="#sar-W-1-2" class="headerlink" title="sar -W 1 2"></a><code>sar -W 1 2</code></h3><p>页面交换情况<br>pswpin&#x2F;s：每秒系统换入的交换页面（swap page）数量<br>pswpout&#x2F;s：每秒系统换出的交换页面（swap page）数量</p><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><ul><li>怀疑CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</li><li>怀疑内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看</li><li>怀疑I&#x2F;O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</li></ul><h1 id="ipcs"><a href="#ipcs" class="headerlink" title="ipcs"></a>ipcs</h1><ul><li><code>ipcs -m</code>:共享内存资源</li><li><code>ipcs -q</code>:队列资源</li><li><code>ipcs -s</code>:信号量资源</li><li><code>ipcs -l</code>:类似于ulimit,列出系统资源限制</li></ul><h2 id="修改ipc资源限制"><a href="#修改ipc资源限制" class="headerlink" title="修改ipc资源限制"></a>修改ipc资源限制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$cat</span> /etc/sysctl.conf<br><span class="hljs-comment"># 一个消息的最大长度</span><br>kernel.msgmax = 524288<br><br><span class="hljs-comment"># 一个消息队列上的最大字节数</span><br><span class="hljs-comment"># 524288*10</span><br>kernel.msgmnb = 5242880<br><br><span class="hljs-comment">#最大消息队列的个数</span><br>kernel.msgmni=2048<br><br><span class="hljs-comment">#一个共享内存区的最大字节数</span><br>kernel.shmmax = 17179869184<br><br><span class="hljs-comment">#系统范围内最大共享内存标识数</span><br>kernel.shmmni=4096<br><br><span class="hljs-comment">#每个信号灯集的最大信号灯数 系统范围内最大信号灯数 每个信号灯支持的最大操作数 系统范围内最大信号灯集数</span><br><span class="hljs-comment">#此参数为系统默认，可以不用修改</span><br><span class="hljs-comment">#kernel.sem = &lt;semmsl&gt; &lt;semmni&gt;*&lt;semmsl&gt; &lt;semopm&gt; &lt;semmni&gt;</span><br>kernel.sem = 250 32000 32 128<br></code></pre></td></tr></table></figure><p>修改保存后使用sysctl -p</p><h2 id="清除IPC资源"><a href="#清除IPC资源" class="headerlink" title="清除IPC资源"></a>清除IPC资源</h2><ul><li>ipcrm -M shmkey  移除用shmkey创建的共享内存段</li><li>ipcrm -m shmid    移除用shmid标识的共享内存段</li><li>ipcrm -Q msgkey  移除用msqkey创建的消息队列</li><li>ipcrm -q msqid  移除用msqid标识的消息队列</li><li>ipcrm -S semkey  移除用semkey创建的信号</li><li>ipcrm -s semid  移除用semid标识的信号</li></ul><h2 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h2><ul><li>清除当前用户创建的所有的IPC资源<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipcs -q | awk <span class="hljs-string">&#x27;&#123; print &quot;ipcrm -q &quot;$2&#125;&#x27;</span> | sh &gt; /dev/null 2&gt;&amp;1;<br>ipcs -m | awk <span class="hljs-string">&#x27;&#123; print &quot;ipcrm -m &quot;$2&#125;&#x27;</span> | sh &gt; /dev/null 2&gt;&amp;1;<br>ipcs -s | awk <span class="hljs-string">&#x27;&#123; print &quot;ipcrm -s &quot;$2&#125;&#x27;</span> | sh &gt; /dev/null 2&gt;&amp;1;<br></code></pre></td></tr></table></figure></li></ul><h1 id="fuser"><a href="#fuser" class="headerlink" title="fuser"></a>fuser</h1><p>显示所有正在使用着指定file,file system或sockets的进程信息<br><code>fuser -m -u redis-server</code>用来查找所有正在使用redis-server的所有进程的PID以及该进程的OWNER<br><code>fuser –k /path/to/your/filename</code>:kill所有正在使用某一指定的file, file system or sockets的进程</p><h1 id="top-htop更强大的替换工具"><a href="#top-htop更强大的替换工具" class="headerlink" title="top(htop更强大的替换工具)"></a>top(htop更强大的替换工具)</h1><h2 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息"></a>输出信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$top</span><br>    top - 09:14:56 up 264 days, 20:56,  1 user,  load average: 0.02, 0.04, 0.00<br>    Tasks:  87 total,   1 running,  86 sleeping,   0 stopped,   0 zombie<br>    Cpu(s):  0.0%us,  0.2%sy,  0.0%ni, 99.7%<span class="hljs-built_in">id</span>,  0.0%wa,  0.0%hi,  0.0%si,  0.2%st<br>    Mem:    377672k total,   322332k used,    55340k free,    32592k buffers<br>    Swap:   397308k total,    67192k used,   330116k free,    71900k cached<br>    PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br>    1 root      20   0  2856  656  388 S  0.0  0.2   0:49.40 init<br>    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd<br>    3 root      20   0     0    0    0 S  0.0  0.0   7:15.20 ksoftirqd/0<br>    4 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 migration/0<br></code></pre></td></tr></table></figure><h3 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h3><ul><li>09:14:56 ： 系统当前时间</li><li>264 days, 20:56 ： 系统开机到现在经过了多少时间</li><li>1 users ： 当前2用户在线</li><li>load average: 0.02, 0.04, 0.00： 系统1分钟、5分钟、15分钟的CPU负载信息</li></ul><h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><ul><li>87 total：很好理解，就是当前有87个任务，也就是87个进程。</li><li>1 running：1个进程正在运行</li><li>86 sleeping：86个进程睡眠</li><li>0 stopped：停止的进程数</li><li>0 zombie：僵死的进程数</li></ul><h3 id="Cpu-s"><a href="#Cpu-s" class="headerlink" title="Cpu(s)"></a>Cpu(s)</h3><ul><li>0.0%us：用户态进程占用CPU时间百分比，不包含renice值为负的任务占用的CPU的时间。</li><li>0.7%sy：内核占用CPU时间百分比</li><li>0.0%ni：改变过优先级的进程占用CPU的百分比</li><li>99.3%id：空闲CPU时间百分比</li><li>0.0%wa：等待I&#x2F;O的CPU时间百分比</li><li>0.0%hi：CPU硬中断时间百分比</li><li>0.0%si：CPU软中断时间百分比<br>注：这里显示数据是所有cpu的平均值，如果想看每一个cpu的处理情况，按1即可；折叠，再次按1；</li></ul><h3 id="Men：内存"><a href="#Men：内存" class="headerlink" title="Men：内存"></a>Men：内存</h3><ul><li>8175320kk total：物理内存总量</li><li>8058868k used：使用的物理内存量</li><li>116452k free：空闲的物理内存量</li><li>283084k buffers：用作内核缓存的物理内存量</li></ul><h3 id="Swap：交换空间"><a href="#Swap：交换空间" class="headerlink" title="Swap：交换空间"></a>Swap：交换空间</h3><ul><li>6881272k total：交换区总量</li><li>4010444k used：使用的交换区量</li><li>2870828k free：空闲的交换区量</li><li>4336992k cached：缓冲交换区总量</li></ul><h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><ul><li>PID：进程的ID</li><li>USER：进程所有者</li><li>PR：进程的优先级别，越小越优先被执行</li><li>NInice：值</li><li>VIRT：进程占用的虚拟内存</li><li>RES：进程占用的物理内存</li><li>SHR：进程使用的共享内存</li><li>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</li><li>%CPU：进程占用CPU的使用率</li><li>%MEM：进程使用的物理内存和总内存的百分比</li><li>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</li><li>COMMAND：进程启动命令名称</li></ul><h2 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h2><ul><li>q：退出top命令</li><li><Space>：立即刷新</li><li>s：设置刷新时间间隔</li><li>c：显示命令完全模式</li><li>t:：显示或隐藏进程和CPU状态信息</li><li>m：显示或隐藏内存状态信息</li><li>l：显示或隐藏uptime信息</li><li>f：增加或减少进程显示标志</li><li>S：累计模式，会把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+</li><li>P：按%CPU使用率排行</li><li>T：按MITE+排行</li><li>M：按%MEM排行</li><li>u：指定显示用户进程</li><li>r：修改进程renice值</li><li>kkill：进程</li><li>i：只显示正在运行的进程</li><li>W：保存对top的设置到文件^&#x2F;.toprc，下次启动将自动调用toprc文件的设置。</li><li>h：帮助命令。</li><li>1: 显示各个Cpu信息</li></ul><h2 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h2><ul><li><code>top -p pid</code>:显示指定进程信息(支持pid,pid多个进程id)</li><li></li></ul><h1 id="查询软硬件信息"><a href="#查询软硬件信息" class="headerlink" title="查询软硬件信息"></a>查询软硬件信息</h1><ul><li><code>uname -a</code>,<code>lsb_release -a</code>linux系统版本</li><li><code>more /etc/release</code>操作系统版本</li><li><code>neofetch</code>系统概览</li><li><code>cat /proc/cpuinfo</code>:cpu信息</li><li><code>cat /proc/meminfo</code>:内存信息</li><li><code>pagesize</code>:显示内存page大小(kb)</li><li><code>ulimit -a</code>:显示系统资源限制信息</li></ul><h1 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h1><h2 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-p:指定进程ID</li><li>-d:指定要显示的文件描述符编号</li><li>-a:列出打开文件存在的进程</li><li>-c&lt;进程名&gt;:列出指定进程所打开的文件</li><li>-g:列出GID号进程详情</li><li>-d&lt;文件号&gt;:列出占用该文件号的进程</li><li>+d&lt;目录&gt;:列出目录下被打开的文件</li><li>+D&lt;目录&gt;:递归列出目录下被打开的文件</li><li>-n&lt;目录&gt;:列出使用NFS的文件</li><li>-i&lt;条件&gt;:列出符合条件的进程。（4、6、协议、:端口、 @ip ）</li><li>-p&lt;进程号&gt;:列出指定进程号所打开的文件</li><li>-u:列出UID号进程详情</li><li>-h:显示帮助信息</li><li>-v:显示版本信息</li></ul><h2 id="列信息"><a href="#列信息" class="headerlink" title="列信息"></a>列信息</h2><ul><li>COMMAND 正在运行的命令名字的前 9 个字符</li><li>PID 进程的 PID</li><li>USER 进程属主的登录名</li><li>DEVICE 设备的设备号（主设备号和从设备号）</li><li>SIZE 如果有的话，表示文件的大小</li><li>NODE 本地文件的节点号</li><li>NAME 文件名</li></ul><h3 id="TYPE"><a href="#TYPE" class="headerlink" title="TYPE"></a>TYPE</h3><p>TYPE 文件的类型</p><ol><li>DIR：表示目录</li><li>CHR：表示字符类型</li><li>BLK：块设备类型</li><li>UNIX： UNIX 域套接字</li><li>FIFO：先进先出 (FIFO) 队列</li><li>IPv4：网际协议 (IP) 套接字</li><li>REG: 常规文件</li></ol><h3 id="FD"><a href="#FD" class="headerlink" title="FD"></a>FD</h3><p>FD 文件描述符号以及访问类型<br>1)cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改<br>2)txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 &#x2F;sbin&#x2F;init 程序<br>3)lnn：library references (AIX);<br>4)er：FD information error (see NAME column);<br>5)jld：jail directory (FreeBSD);<br>6)ltx：shared library text (code and data);<br>7)mxx ：hex memory-mapped type number xx.<br>8)m86：DOS Merge mapped file;<br>9)mem：memory-mapped file;<br>10)mmap：memory-mapped device;<br>11)pd：parent directory;<br>12)rtd：root directory;<br>13)tr：kernel trace file (OpenBSD);<br>14)v86  VP&#x2F;ix mapped file;<br>15)0：表示标准输入<br>16)1：表示标准输出<br>17)2：表示标准错误<br>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等<br>1)u：表示该文件被打开并处于读取&#x2F;写入模式<br>2)r：表示该文件被打开并处于只读模式<br>3)w：表示该文件被打开并处于<br>4)空格：表示该文件的状态模式为unknow，且没有锁定<br>5)-：表示该文件的状态模式为unknow，且被锁定<br>同时在文件状态模式后面，还跟着相关的锁<br>1)N：for a Solaris NFS lock of unknown type;<br>2)r：for read lock on part of the file;<br>3)R：for a read lock on the entire file;<br>4)w：for a write lock on part of the file;文件的部分写锁)<br>5)W：for a write lock on the entire file;整个文件的写锁)<br>6)u：for a read and write lock of any length;<br>7)U：for a lock of unknown type;<br>8)x：for an SCO OpenServer Xenix lock on part      of the file;<br>9)X：for an SCO OpenServer Xenix lock on the      entire file;<br>10)space：if there is no lock.</p><h2 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h2><ul><li><code>lsof -a -p $$ -d 0,1,2</code>显示当前进程0,1,2的文件描述符信息,信息含义如下:</li><li><code>lsof -i tcp</code>:列出所有tcp网络连接信息</li><li><code>lsof - i :3306</code>:列出谁在使用某个端口</li><li><code>lsof -a -u test -i</code>:列出某个用户的所有活跃的网络端口</li><li><code>lsof -i @nf5260i5-td:20,21,80 -r 3</code>:列出目前连接主机nf5260i5-td上端口为：20，21，80相关的所有文件信息，且每隔3秒重复执行</li><li><code>lsof -i 4 -a -p 1234</code>:列出被进程号为1234的进程所打开的所有IPV4 network files</li></ul><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><h2 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>a 显示所有进程</li><li>-a 显示同一终端下的所有程序</li><li>-A 显示所有进程</li><li>c 显示进程的真实名称</li><li>-N 反向选择</li><li>-e 等于“-A”</li><li>e 显示环境变量</li><li>f 显示程序间的关系</li><li>-H 显示树状结构</li><li>r 显示当前终端的进程</li><li>T 显示当前终端的所有程序</li><li>u 指定用户的所有进程</li><li>-au 显示较详细的资讯</li><li>-aux 显示所有包含其他使用者的行程</li><li>-C&lt;命令&gt; 列出指定命令的状况</li><li>–lines&lt;行数&gt; 每页显示的行数</li><li>–width&lt;字符数&gt; 每页显示的字符数</li><li>–help 显示帮助信息</li><li>–version 显示版本显示</li></ul><h2 id="输出列"><a href="#输出列" class="headerlink" title="输出列"></a>输出列</h2><ul><li>F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user</li><li>S 代表这个程序的状态 (STAT)</li><li>UID 程序被该 UID 所拥有</li><li>PID 进程的ID</li><li>PPID 则是其上级父程序的ID</li><li>C CPU 使用的资源百分比</li><li>PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍</li><li>NI 这个是 Nice 值</li><li>ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“</li><li>SZ 使用掉的内存大小</li><li>WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作</li><li>TTY 登入者的终端机位置</li><li>TIME 使用掉的 CPU 时间。</li><li>CMD 所下达的指令为何</li></ul><h3 id="STAT"><a href="#STAT" class="headerlink" title="STAT"></a>STAT</h3><ul><li>D 不可中断 uninterruptible sleep (usually IO)</li><li>R 运行 runnable (on run queue)</li><li>S 中断 sleeping</li><li>T 停止 traced or stopped</li><li>Z 僵死 a defunct (”zombie”) process</li></ul><h3 id="example-4"><a href="#example-4" class="headerlink" title="example"></a>example</h3><ul><li><code>ps -ef</code>:显示所有进程信息，连同命令行</li><li><code>ps aux</code>:列出目前所有的正在内存中的程序</li></ul><h1 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h1><p>strace常用来跟踪进程执行时的系统调用和所接收的信号</p><h2 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息"></a>输出信息</h2><p>每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。</p><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><ul><li>-c 统计每一系统调用的所执行的时间,次数和出错的次数等.</li><li>-d 输出strace关于标准错误的调试信息.</li><li>-f 跟踪由fork调用所产生的子进程.</li><li>-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.</li><li>-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.</li><li>-h 输出简要的帮助信息.</li><li>-i 输出系统调用的入口指针.</li><li>-q 禁止输出关于脱离的消息.</li><li>-r 打印出相对时间关于,,每一个系统调用.</li><li>-t 在输出中的每一行前加上时间信息.</li><li>-tt 在输出中的每一行前加上时间信息,微秒级.</li><li>-ttt 微秒级输出,以秒了表示时间.</li><li>-T 显示每一调用所耗的时间.</li><li>-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.</li><li>-V 输出strace的版本信息.</li><li>-x 以十六进制形式输出非标准字符串</li><li>-xx 所有字符串以十六进制形式输出.</li><li>-a <column>设置返回值的输出位置.默认 为40.<br>输出写入到指定文件中的数据.</li><li>-o filename 将strace的输出写入文件filename</li><li>-p pid 跟踪指定的进程pid.</li><li>-s strsize 指定输出的字符串的最大长度.默认为32.文件名一直全部输出.</li><li>-u username 以username 的UID和GID执行被跟踪的命令</li></ul><h3 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h3><p>-e expr 指定一个表达式,用来控制如何跟踪.格式如下:<br><code>[qualifier=][!]value1[,value2]...</code><br>qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如:<br>-eopen等价于 -e trace&#x3D;open,表示只跟踪open调用.而-etrace!&#x3D;open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none.<br>注意有些shell使用!来执行历史记录里的命令,所以要使用\.</p><ul><li>-e trace&#x3D;<set><br>只跟踪指定的系统 调用.例如:-e trace&#x3D;open,close,rean,write表示只跟踪这四个系统调用.默认的为set&#x3D;all.<ul><li>-e trace&#x3D;file 只跟踪有关文件操作的系统调用.</li><li>-e trace&#x3D;process 只跟踪有关进程控制的系统调用.</li><li>-e trace&#x3D;network 跟踪与网络有关的所有系统调用.</li><li>-e strace&#x3D;signal 跟踪所有与系统信号有关的 系统调用</li><li>-e strace&#x3D;ipc 跟踪所有与进程通讯有关的系统调用</li></ul></li><li>-e abbrev&#x3D;<set> 设定 strace输出的系统调用的结果集.<code>-v</code>等价于<code>abbrev=none</code>.默认为abbrev&#x3D;all.</li><li>-e raw&#x3D;<set> 将指定的系统调用的参数以十六进制显示.</li><li>-e signal&#x3D;<set> 指定跟踪的系统信号.默认为all.如 signal&#x3D;!SIGIO(或者signal&#x3D;!io),表示不跟踪SIGIO信号.<br>-e read&#x3D;<set> 输出从指定文件中读出 的数据.例如:<br>  -e read&#x3D;3,5.从文件描述符3,5读出的系统调用<br>  -e write&#x3D;<set></li></ul><h2 id="example-5"><a href="#example-5" class="headerlink" title="example"></a>example</h2><p><code>strace -o output.txt -T -tt -e trace=all -p 28979</code><br><code>strace -p &lt;process-pid&gt;</code>:实时输出程序的系统调用<br><code>strace -f -F -o ~/straceout.txt myserver</code>:跟踪可执行程序</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++性能篇</title>
    <link href="/2024/04/18/C-%E6%80%A7%E8%83%BD%E7%AF%87/"/>
    <url>/2024/04/18/C-%E6%80%A7%E8%83%BD%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><ul><li>尽可能使用<code>\n</code>,而不是endl</li><li><code>std::ios_base::sync_with_stdio(false)</code>,禁止与printf&#x2F;scanf的同步</li><li><code>&lt;istream_obj&gt;.tie(nullptr)</code>:Disable IO flushing when mixing istream&#x2F;ostream</li><li><code>&lt;ifstream_obj&gt;.rdbuf()-&gt;pubsetbuf(buffer_var,buffer_size)</code>:increase io buffer size</li><li>printf比ostream更快</li><li>LZ4和zstd是很快的开元库</li></ul><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><ul><li>在局部作用域中，static const比const更快，避免了栈分配</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li>尽可能常量放在一起</li><li>unsigned比signed更快</li><li><code>||</code>比<code>|</code>更好</li><li>乘法比除法更快</li><li>Checking if a non-negative value x is within a range [A, B] can be optimized if B &gt; A (useful when the condition is repeated multiple times)</li><li>指针用中括号操作比加法操作更好</li><li>尽可能的使得symbol不全局可见，即多用匿名空间，static</li><li>Prefer signed integer for loop indexing. The compiler optimizes more aggressively such loops since integer overflow is not defined</li><li>exceptions影响性能，尽可能用noexcept</li><li>smart pointer影响性能</li><li>lambda比std::function和函数指针更好</li><li>避免dynamic_cast</li><li>除了以上几点尽可能用STL<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (x &gt;= A &amp;&amp; x &lt;= B)<br><span class="hljs-comment">// STEP 1: subtract A</span><br><span class="hljs-keyword">if</span> (x - A &gt;= A - A &amp;&amp; x - A &lt;= B - A)<br><span class="hljs-comment">// --&gt;</span><br><span class="hljs-keyword">if</span> (x - A &gt;= <span class="hljs-number">0</span> &amp;&amp; x - A &lt;= B - A) <span class="hljs-comment">// B - A is precomputed</span><br><span class="hljs-comment">// STEP 2</span><br><span class="hljs-comment">// - convert &quot;x - A &gt;= 0&quot; --&gt; (unsigned) (x - A)</span><br><span class="hljs-comment">// - &quot;B - A&quot; is always positive</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span>) (x - A) &lt;= (<span class="hljs-type">unsigned</span>) (B - A))<br></code></pre></td></tr></table></figure></li></ul><h1 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h1><table><thead><tr><th align="center">From</th><th align="center">To</th><th align="center">Cost</th></tr></thead><tbody><tr><td align="center">Signed</td><td align="center">Unsigned</td><td align="center">no cost, bit representation is the same</td></tr><tr><td align="center">Unsigned</td><td align="center">Larger Unsigned</td><td align="center">no cost, register extended</td></tr><tr><td align="center">Signed</td><td align="center">Larger Signed</td><td align="center">1 clock-cycle, register + sign extended</td></tr><tr><td align="center">Integer</td><td align="center">Floating-point</td><td align="center">4-16 clock-cycles Signed → Floating-point is faster than Unsigned → Floating-point (except AVX512 instruction set is enabled)</td></tr><tr><td align="center">Floating-point</td><td align="center">Integer</td><td align="center">fast if SSE2, slow otherwise (50-100 clock-cycles)</td></tr></tbody></table><h1 id="Compiler-intrinsic-functions"><a href="#Compiler-intrinsic-functions" class="headerlink" title="Compiler intrinsic functions"></a>Compiler intrinsic functions</h1><p>编译器内提供的函数，可能缺少跨平台支持，但更好的优化，不支持的花会是很危险的</p><h1 id="restrict"><a href="#restrict" class="headerlink" title="__restrict"></a>__restrict</h1><p>该关键字表明，这两个指针指向的内存不在同一快区域，可以使得编译器更好的优化</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">matrix_mul_v1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>* A,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* B,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> N,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span>* C)</span> </span>&#123;<br><span class="hljs-comment">// below is faster</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">matrix_mul_v2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>* __restrict A,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* __restrict B,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> N,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span>* __restrict C)</span> </span>&#123;<br></code></pre></td></tr></table></figure><h1 id="编译器-attribute"><a href="#编译器-attribute" class="headerlink" title="编译器__attribute__"></a>编译器__attribute__</h1><p>设置某些属性可以帮助编译器更好的优化</p><ul><li><code>__attribute__((visibility(&quot;hidden&quot;)))</code>:效果等价于匿名空间</li><li><code>__attribute__(always_inline)</code>:强制inline</li><li><code>__attribute__(noinline)</code>:强制不inline</li><li><code>__attribute__(pure)</code>:attribute (Clang, GCC) specifies that a function has no side effects on its parameters or program state (external global references)</li><li><code>__attribute__(const)</code>:attribute (Clang, GCC) specifies that a function doesn’t depend (read) on external global references</li></ul><h1 id="gprof"><a href="#gprof" class="headerlink" title="gprof"></a>gprof</h1><p>Code Instrumentation<br><code>g++ -pg [flags] &lt;source_files&gt;</code><br>Important: -pg is required also for linking and it is not supported by clang</p><ul><li>Run the program (it produces the file gmon.out)</li><li>Run gprof on gmon.out</li><li><code>gprof -q &lt;executable&gt; gmon.out</code>可以分析出函数调用图</li></ul><h1 id="uftrace"><a href="#uftrace" class="headerlink" title="uftrace"></a>uftrace</h1><p>火焰图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc -pg &lt;program&gt;.cpp<br>$ uftrace record &lt;executable&gt;<br>$ uftrace replay<br></code></pre></td></tr></table></figure><h1 id="性能工具"><a href="#性能工具" class="headerlink" title="性能工具"></a>性能工具</h1><ul><li>callgrind(valgrind)</li><li>cachegrind</li><li>KCachegrind(linux)&#x2F;Qcachegrind(win)</li><li>gprof2dot</li><li>perf</li><li>hotspot</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg</title>
    <link href="/2024/04/07/ffmpeg/"/>
    <url>/2024/04/07/ffmpeg/</url>
    
    <content type="html"><![CDATA[<h1 id="视频剪裁"><a href="#视频剪裁" class="headerlink" title="视频剪裁"></a>视频剪裁</h1><ul><li>裁剪:<code>ffmpeg -i xx.mp4 -vcodec copy -acodec copy -ss 00:00:00 -to 01:18:08 output.mp4</code></li></ul><h2 id="精确剪切"><a href="#精确剪切" class="headerlink" title="精确剪切"></a>精确剪切</h2><p>ffmpeg 会在你输入的时间点附近调整到最接近的关键帧处，这会导致时间不准确，可以先转换为帧内编码（每一帧都是关键帧）<br><code>ffmpeg -i xx.flv -strict -2 -qscale 0 -intra xx2.flv</code></p><h1 id="合并"><a href="#合并" class="headerlink" title="合并:"></a>合并:</h1><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p> 先建立个文本文档file,格式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">file <span class="hljs-string">&#x27;1.mp4&#x27;</span><br>file <span class="hljs-string">&#x27;2.mp4&#x27;</span><br></code></pre></td></tr></table></figure><p><code>ffmpeg -f concat -i file -c copy output.mkv</code><br>或者支持不好先转换ts<br><code>ffmpeg -i 1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts</code></p><p><code>ffmpeg -i 2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts</code></p><p><code>ffmpeg -i &quot;concat:1.ts|2.ts&quot; -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4</code></p><h2 id="重新编码合并"><a href="#重新编码合并" class="headerlink" title="重新编码合并"></a>重新编码合并</h2><p>适用不同编码<br><code>ffmpeg -i input1.mp4 -i input2.webm -i input3.avi -filter_complex &#39;[0:0] [0:1] [1:0] [1:1] [2:0] [2:1] concat=n=3:v=1:a=1 [v] [a]&#39; -map &#39;[v]&#39; -map &#39;[a]&#39; &lt;编码器选项&gt; output.mkv</code><br>[0:0] [0:1] [1:0] [1:1] [2:0] [2:1] 分别表示第一个输入文件的视频、音频、第二个输入文件的视频、音频、第三个输入文件的视频、音频。concat&#x3D;n&#x3D;3:v&#x3D;1:a&#x3D;1 表示有三个输入文件，输出一条视频流和一条音频流。[v] [a] 就是得到的视频流和音频流的名字，注意在 bash 等 shell 中需要用引号，防止通配符扩展。</p><h1 id="视频倒放"><a href="#视频倒放" class="headerlink" title="视频倒放"></a>视频倒放</h1><h2 id="视频倒放，无音频"><a href="#视频倒放，无音频" class="headerlink" title="视频倒放，无音频"></a>视频倒放，无音频</h2><p><code>ffmpeg -i 123.mp4 -filter_complex [0:v]reverse[v] -map [v] -preset superfast out.mp4 </code></p><h2 id="视频倒放，音频不变"><a href="#视频倒放，音频不变" class="headerlink" title="视频倒放，音频不变"></a>视频倒放，音频不变</h2><p><code>ffmpeg -i 123.mp4 -vf reverse out.mp4</code></p><h2 id="音频倒放，视频不变"><a href="#音频倒放，视频不变" class="headerlink" title="音频倒放，视频不变"></a>音频倒放，视频不变</h2><p><code>ffmpeg -i 123.mp4 -map 0 -c:v copy -af &quot;areverse&quot; out.mp4</code></p><h2 id="音视频同时倒放"><a href="#音视频同时倒放" class="headerlink" title="音视频同时倒放"></a>音视频同时倒放</h2><p><code>fmpeg -i 123.mp4 -vf reverse -af areverse -preset superfast out.mp4</code></p><h1 id="视频格式转换"><a href="#视频格式转换" class="headerlink" title="视频格式转换"></a>视频格式转换</h1><ul><li>rmvb-&gt;mp4:<br><code>ffmpeg -i name1.rmvb -c:v libx264 -strict -2 name2.mp4 </code></li></ul><h1 id="字幕"><a href="#字幕" class="headerlink" title="字幕"></a>字幕</h1><ul><li>添加字幕:<br><code>ffmpeg -i 2020-07-13\ 08-20-26.mkv -vf subtitles=test.srt -y output.mkv</code><br>srt格式:<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">03</span>,<span class="hljs-number">000</span> --&gt; <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span>,<span class="hljs-number">000</span><br><span class="hljs-attribute">Hi</span>,I am Nanbert Don De Niro<br><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span>,<span class="hljs-number">000</span> --&gt; <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>,<span class="hljs-number">000</span><br><span class="hljs-attribute">Hi</span>,I am Donald Trump<br>  <br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>,<span class="hljs-number">444</span> --&gt; <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span>,<span class="hljs-number">000</span><br><span class="hljs-attribute">It</span>&#x27;s you,Assole!<br></code></pre></td></tr></table></figure></li></ul><h1 id="视频与声音"><a href="#视频与声音" class="headerlink" title="视频与声音"></a>视频与声音</h1><ul><li>静音:<code>ffmpeg -i 10.mp4 -af &quot;volume=0&quot; 10Silent.mp4</code></li><li>静音一部分:<code>ffmpeg -i 10.mp4 -af &quot;volume=enable=&#39;between(t,0,8)&#39;:volume=0&quot; 10Silent.mp4</code></li><li>去掉原声:<code>ffmpeg -i 12.mp4 -c:v copy -an xx.mp4</code></li><li>合并指定音频:<code>ffmpeg -i out.mp4 -i xx.mp3 xx.mp4</code></li><li>指定合成时间：<code>ffmpeg -i out.mp4 -i xx.mp3 -t 30 xx.mp4</code></li><li>保留视频原声并添加新音频:<code>ffmpeg -i xx.mp3 -i 22.mp4 -filter_complex amix=inputs=2 output.mp4</code></li><li>替换原来的音频：<code>ffmpeg -i xx.wav -i xx.flv -shortest -c copy xx.flv</code></li><li>提取音频：<code>ffmpeg -i xx.flv -vn -acodec copy xx.wav</code></li><li>调整音量：<code>ffmpeg -i input.wav -af &#39;volume=1.5&#39; xx.wav</code></li></ul><h1 id="流媒体"><a href="#流媒体" class="headerlink" title="流媒体"></a>流媒体</h1><ul><li>一边播放一边保存流媒体:<code>ffmpeg -i host/input.m3u8 -c copy out.mkv -c copy -f matroska - | ffplay - </code></li></ul><h1 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h1><ul><li>波形图模式：<code>ffplay -showmode 1 xx.mp3</code></li><li>频谱图模式：<code>ffplay -showmode 2 xx.mp3</code></li><li>音频淡出效果: <code>ffmpeg -i xx.mp3 -filter_complex afade=t=out:st=16:d=4 xx2.mp3</code></li></ul><h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><h2 id="视频全部转换成gif"><a href="#视频全部转换成gif" class="headerlink" title="视频全部转换成gif"></a>视频全部转换成gif</h2><ul><li><code>ffmpeg -i 123.mp4 out.gif</code></li></ul><h2 id="截取部分片段"><a href="#截取部分片段" class="headerlink" title="截取部分片段"></a>截取部分片段</h2><ul><li><code>ffmpeg -t 3 -ss 00:00:02 -i xx.mp4 xx.gif</code></li></ul><h2 id="增加GIF质量"><a href="#增加GIF质量" class="headerlink" title="增加GIF质量"></a>增加GIF质量</h2><ul><li><code>ffmpeg -i  OUTPUT_VIDEO.mp4 -b 2048k OUTPUT_VIDEO.gif</code>:尽可能高质量转换</li></ul><h2 id="将GIF转成视频"><a href="#将GIF转成视频" class="headerlink" title="将GIF转成视频"></a>将GIF转成视频</h2><ul><li><code>ffmpeg -f gif -i xx.gif xx.mp4</code>:将GIF转换为MP4</li></ul><h2 id="设置循环次数"><a href="#设置循环次数" class="headerlink" title="设置循环次数"></a>设置循环次数</h2><p>默认是0,即无限循环<br><code>ffmpeg -ss 9 -t 5 -i xx.mp4 -loop 2 xx.gif</code></p><h2 id="设置低分辨率"><a href="#设置低分辨率" class="headerlink" title="设置低分辨率"></a>设置低分辨率</h2><p><code>ffmpeg -ss 9 -t 5 -i 1.mp4 -loop 0 -vf scale=iw/2:-1:flags=lanczos 1.gif</code><br>scale&#x3D;iw&#x2F;2:-1:flags&#x3D;lanczos（lanczos为缩放算法），将会设置gif图片的宽度为源视频一半，高度为比例缩放</p><h2 id="设置fps-每秒帧数"><a href="#设置fps-每秒帧数" class="headerlink" title="设置fps(每秒帧数)"></a>设置fps(每秒帧数)</h2><p><code>ffmpeg -ss 9 -t 5 -i 1.mp4 -loop 0 -vf &quot;scale=iw/2:-1:flags=lanczos,fps=15&quot; 1.gif</code></p><h2 id="视频画面的一半设成gif"><a href="#视频画面的一半设成gif" class="headerlink" title="视频画面的一半设成gif"></a>视频画面的一半设成gif</h2><p><code>ffmpeg -ss 9 -t 5 -i 1.mp4 -loop 0 -vf &quot;scale=iw/2:-1:flags=lanczos,fps=15,crop=iw/2:ih:0:0&quot; 1.gif</code><br>可能我们只需要将视频画面的一部分转成gif图片，可以使用crop，具体为crop&#x3D;宽度:高度:宽度起始:高度起始，比如crop&#x3D;200:200:0:0，将会从横向0像素，纵向0像素开始，从画面裁剪200x200的区域。</p><h2 id="提高画面的质量"><a href="#提高画面的质量" class="headerlink" title="提高画面的质量"></a>提高画面的质量</h2><p><code>fmpeg -ss 9 -t 5 -i 1.mp4 -loop 0 -vf &quot;scale=iw/2:-1:flags=lanczos,fps=15,crop=iw/2:ih:0:0,split[s1][s2];[s1]palettegen[p];[s2][p]paletteuse&quot; 1.gif</code></p><h1 id="水印"><a href="#水印" class="headerlink" title="水印"></a>水印</h1><h2 id="图片水印"><a href="#图片水印" class="headerlink" title="图片水印"></a>图片水印</h2><p><code>ffmpeg -i xx.mp4 -vf &quot;movie=xx.png[wm];[in][wm]overlay=30:10[out]&quot; output.mp4</code><br>30:10代表图片的像素位置</p><h2 id="左下角添加gif动态水印"><a href="#左下角添加gif动态水印" class="headerlink" title="左下角添加gif动态水印"></a>左下角添加gif动态水印</h2><p><code>ffmpeg -y -i test2.mp4 -ignore_loop 0 -i test.gif  -filter_complex overlay=0:H-h test_out2.mp4</code></p><h2 id="设置显示时间段"><a href="#设置显示时间段" class="headerlink" title="设置显示时间段"></a>设置显示时间段</h2><p><code>ffmpeg -hide_banner -i big_buck_bunny.mp4 -i doggie2.png -filter_complex &quot;overlay=enable=&#39;between(t,5,10)&#39;&quot; out.mp4 -y</code><br>让水印在5-10s时间段显示</p><h2 id="设置两个水印轮番出现"><a href="#设置两个水印轮番出现" class="headerlink" title="设置两个水印轮番出现"></a>设置两个水印轮番出现</h2><p><code>ffmpeg -i big_buck_bunny.mp4 -i doggie1.png -i doggie2.png -filter_complex &quot;overlay=enable=&#39;lte(mod(t,10),4)&#39;,overlay=enable=&#39;gt(mod(t,10),6)&#39;&quot; out.mp4 -y</code><br>上面的命令作用是：第一个水印显示4秒后消失，2秒后第二个水印显示4秒后消失。</p><h2 id="水印位置平移"><a href="#水印位置平移" class="headerlink" title="水印位置平移"></a>水印位置平移</h2><ul><li><code>fmpeg -i big_buck_bunny.mp4 -ignore_loop 0 -i doggie3.gif -lavfi &quot;overlay=x=t*20&quot; -shortest out.mp4 -y</code><br>让水印每秒向右移动20像素，直到消失</li><li><code>ffmpeg -i big_buck_bunny.mp4 -ignore_loop 0 -i doggie3.gif -lavfi &quot;overlay=enable=\&#39;mod(t,10)\&#39;:x=\&#39;100*mod(t,10)-w\&#39;&quot; -shortest out.mp4 -y</code><br>设置水印每隔10秒从左向右移动直至消失</li></ul><h2 id="gif水印循环播放"><a href="#gif水印循环播放" class="headerlink" title="gif水印循环播放"></a>gif水印循环播放</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">第一种：设置gif的-ignore_loop为0，让gif保持循环播放即可，命令如下：<br>ffmpeg -hide_banner -i big_buck_bunny.mp4 -ignore_loop 0 -i doggie3.gif -filter_complex  overlay -shortest out.mp4 -y<br>但是这种方式，只适用于gif格式的图像，如果滤镜是一小段视频就无能为力了。<br><br>第二种：使用movie滤镜，同样是让gif循环播放，虽然这种方式复杂点，不过这种解决方案支持视频水印，命令如下：<br>ffmpeg -hide_banner -i big_buck_bunny.mp4 -vf <span class="hljs-string">&quot;movie=doggie3.gif:loop=0,setpts=N/FRAME_RATE/TB[out];[0:v][out]overlay=x=main_w-overlay_w:y=0&quot;</span> -shortest out.mp4 -y<br>上面的命令有两个地方比较关键：<br><br>loop=0,setpts=N/FRAME_RATE/TB ：设置水印gif无限循环<br>-shortest ：将输出文件的时长设置为第一个视频文件的时长，如果不设置，你会发现命令会一直执行根本不会停下来，因为gif图的循环是无限的<br>这样gif图/短视频就会一直不停的播放了。<br><br><br>希望水印播放一次就不播放了，那就设置上面的eof_action为pass就可以了，如下：<br>ffmpeg -hide_banner -i big_buck_bunny.mp4 -i doggie3.gif -filter_complex <span class="hljs-string">&quot;overlay=x=0:y=0:eof_action=pass&quot;</span> out.mp4 -y<br><br>如果视频一开始就播放且只播放一次，假如水印比较短可能根本就没被注意就过去了，这时可以设置水印出现的延迟时间，使用-itsoffset选项，如下：<br>ffmpeg -hide_banner -i big_buck_bunny.mp4 -itsoffset 3 -i doggie3.gif -filter_complex <span class="hljs-string">&quot;overlay=x=0:y=0:eof_action=pass&quot;</span> out.mp4 -y<br>这样，视频播放3秒后，水印才会出现。<br></code></pre></td></tr></table></figure><h2 id="水印旋转"><a href="#水印旋转" class="headerlink" title="水印旋转"></a>水印旋转</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">如果想实现旋转的功能，需要使用ffmpeg过滤器的链式功能，即：先把作为水印的图片旋转，再覆盖到视频上。<br><br>1. 水印旋转一次<br>ffmpeg -i buck.mp4 -i s1.jpg -lavfi <span class="hljs-string">&quot;[1:v]format=rgba,rotate=&#x27;PI/6:c=0x00000000:ow=hypot(iw,ih):oh=ow&#x27;[out];[0:v][out]overlay=10:10&quot;</span> out.mp4 -y<br><br>思路是：<br>调整水印宽高，根据勾股定律计算图片对角长度(hypot)，将这个值设置为水印的宽高，这样，图片无论如何旋转，都不会超过设定的宽高，也就不会出现图片部分丢失的情况了<br>将图片显示的像素格式转换为rgba格式，如果做过前端的小伙伴会很熟悉的，最后的a表示透明度，如此一来，c=0x00000000的作用就是将图片旋转后的背景变为白色且完全透明，这样就不会遮挡视频了<br><br>2. 让旋转停不下，具体命令如下：<br>ffmpeg -i buck.mp4 -loop 1 -i s1.jpg -lavfi <span class="hljs-string">&quot;[1:v]format=rgba,rotate=&#x27;PI/2*t:c=0x00000000:ow=hypot(iw,ih):oh=ow&#x27;[out];[0:v][out]overlay=10:10&quot;</span> -shortest out.mp4 -y<br>这次水印图片前面添加了-loop 1，正常情况下水印图片默认在播放一次后就停下来，保留最后一帧，所以要让水印图片保持循环才行。<br></code></pre></td></tr></table></figure><h1 id="录屏及摄像头"><a href="#录屏及摄像头" class="headerlink" title="录屏及摄像头"></a>录屏及摄像头</h1><ul><li><code>ffmpeg -devices</code>:列出音频设备及摄像头</li></ul><h2 id="录屏命令"><a href="#录屏命令" class="headerlink" title="录屏命令"></a>录屏命令</h2><p><code>ffmpeg -f x11grab -s 1920x1080 -r 30 -i :0.0 -c:v libx264 output.mp4</code></p><ul><li>-f x11grab 指定使用X11grab设备作为输入。</li><li>-s [分辨率] 设置录制视频的分辨率，例如 1920x1080。不指定就是全屏</li><li>-r [帧率] 设置录制视频的帧率，例如 30。</li><li>-i :0.0 指定要捕获的X11屏幕。:0.0 通常表示第一个屏幕。如果你有多个屏幕或显示设置不同，这个值可能需要调整。</li><li>-c:v [编码器] 设置视频编码器，例如 libx264 用于H.264编码。</li><li>output.mp4 是输出文件的名称。</li></ul><h2 id="录屏加声音"><a href="#录屏加声音" class="headerlink" title="录屏加声音"></a>录屏加声音</h2><p><code>ffmpeg -f x11grab -i :0.0 -f alsa -ac 2 -i hw:2 -vcodec libx264 -acodec libmp3lame -s 1280x720 -r 15 xx.mp4</code><br>alsa使用于linux alsa声卡，<code>hw:2</code>是当前电脑上的设备，可以用<code>arecord -l</code>命令来显示设备，card几就hw:几</p><h2 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h2><p><code>ffmpeg -f v4l2 -framerate 25 -video_size 640x480 -i /dev/video0 xx.mkv</code><br>可以通过<code>v4l2-ctl --list-devices</code>来查看v4l2的设备，</p><h2 id="摄像头加声音"><a href="#摄像头加声音" class="headerlink" title="摄像头加声音"></a>摄像头加声音</h2><p><code>ffmpeg -f v4l2 -framerate 25 -video_size 640x480 -i /dev/video0 -f alsa -ac 2 -i hw:2 -vcodec libx264 -acodec libmp3lame xx.mkv</code></p><h1 id="文字水印"><a href="#文字水印" class="headerlink" title="文字水印"></a>文字水印</h1><p><code>ffmpeg -i xx.mp4 -vf &quot;drawtext=fontfile=simhei.ttf: text=&#39;hi,Nanbert&#39;:x=100:y=1fontsize=24fontcolor=white:shadowy=2&quot; output.mp4</code></p><ul><li>ontfile:字体类型</li><li>text:要添加的文字内容</li><li>fontsize:字体大小</li><li>fontcolor：字体颜色</li></ul><h1 id="各种特效"><a href="#各种特效" class="headerlink" title="各种特效"></a>各种特效</h1><ul><li>渐入:<code>ffmpeg -i in.mp4 -vf fade=in:0:90 out.mp4</code></li><li>黑白:<code>ffmpeg -i in.mp4 -vf lutyuv=&quot;u=128:v=128&quot; out.mp4</code></li><li>锐化:<code>ffmpeg -i in.mp4 -vf unsharp=luma_msize_x=7:luma_msize_y=7:luma_amount=2.5 out.mp4</code></li><li>反锐化:<code>ffmpeg -i in.mp4 -vf unsharp=7:7:-2:7:7:-2 out.mp4</code></li><li>渐晕:<code>ffmpeg -i in.mp4 -vf vignette=PI/4 out.mp4</code></li><li>闪烁渐晕:<code>ffmpeg -i in.mp4 -vf vignette=&#39;PI/4+random(1)*PI/50&#39;:eval=frame out.mp4</code></li><li>视频颤抖:<code>ffmpeg -i in.mp4 -vf crop=&quot;in_w/2:in_h/2:(in_w-out_w)/2+((in_w-out_w)/2)*sin(n/10):(in_h-out_h)/2+((in_h-out_h)/2)*sin(n/7)&quot; out.mp4</code></li><li>色彩变幻:<code>ffmpeg -i in.mp4 -vf hue=&quot;H=2*PI*t:s=sin(2*PI*t)+1&quot; out.mp4</code></li><li>模糊处理:<code>ffmpeg -i in.mp4 -vf boxblur=5:1:cr=0:ar=0 out.mp4</code></li><li>镜像翻转:<code>ffmpeg -i in.mp4 -vf crop=iw/2:ih:0:0,split[left][tmp];[tmp]hflip[right];[left]pad=iw*2[a];[a][right]overlay=w out.mp4</code></li><li>水平翻转:<code>ffmpeg -i in.mp4 -vf geq=p(W-X\\,Y) out.mp4</code></li><li>垂直翻转:<code>ffmpeg -i in.mp4 -vf vflip out.mp4</code></li><li>浮雕效果:<code>ffmpeg -i in.mp4 -vf format=gray,geq=lum_expr=&#39;(p(X,Y)+(256-p(X-4,Y-4)))/2&#39; out.mp4</code></li><li>均匀噪声:<code>ffmpeg -i in.mp4 -vf noise=alls=20:allf=t+u out.mp4</code></li></ul><h1 id="字幕-1"><a href="#字幕-1" class="headerlink" title="字幕"></a>字幕</h1><ul><li><code>ffmpeg -i xx.mp4 -vf ass=xx.ass -b:v 3000k xx.mp4</code></li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li>5秒处截图：<code>ffmpeg -ss 00:00:05 -i xx.mp4 xx.jpg -r 1 -vframes 1 -an -vodec mjpeg</code></li><li>每一帧输出图片：<code>ffmpeg -i xx.mp4 image_%d.jpg</code></li><li>图片转为视频：<code>ffmpeg -f image2 -i image_%d.jpg video.mpg</code></li></ul><h1 id="视频格式的默认编码"><a href="#视频格式的默认编码" class="headerlink" title="视频格式的默认编码"></a>视频格式的默认编码</h1><ul><li>.avi: Audio Codec: mp3, Video Codec: mpeg4</li><li>.mkv: Audio Codec: ac3, Video Codec: H.264</li><li>.mov: Audio Codec: AAC, Video Codec: H.264</li><li>.mp4: Audio Codec: AAC, Video Codec: H.264</li><li>.mpg: Audio Codec: mp2, Video Codec: mpeg1video</li><li>.mxf: Audio Codec: pcm_s16le, Video Codec: mpeg2video</li><li>.wav: Audio Codec: pcm_s16le (16 bit PCM)</li></ul><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://amiaopensource.github.io/ffmprovisr/#SD_HD">ffmprovisr</a><br><a href="https://ffmpeg.xianwaizhiyin.net/">ffmpeg中文教程</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cmake</title>
    <link href="/2024/04/05/cmake/"/>
    <url>/2024/04/05/cmake/</url>
    
    <content type="html"><![CDATA[<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><ul><li><code>cmake -S . -B build</code>:构建build树</li><li><code>cmake --build</code>:build二进制</li><li><code>cmake --fresh -S &lt;source tree&gt; -B &lt;build tree&gt;</code>:确保重头开始cmake</li></ul><table><thead><tr><th align="center">长选项</th><th align="center">短选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>--source &lt;dir&gt;</code></td><td align="center"><code>-S &lt;dir&gt;</code></td><td align="center">指定源码路径</td></tr><tr><td align="center"></td><td align="center"><code>-B &lt;dir&gt;</code></td><td align="center">build树路径，若不存在创建目录</td></tr><tr><td align="center"><code>-build &lt;dir&gt;</code></td><td align="center"></td><td align="center">build二进制路径</td></tr><tr><td align="center"><code>--parallel &lt;number-of-jobs&gt;</code></td><td align="center"><code>-j &lt;number-of-jobs&gt;</code></td><td align="center">多核运行</td></tr><tr><td align="center"></td><td align="center"><code>-G &lt;generator name&gt;</code></td><td align="center">指定生成器，可以–help查看系统上支持的生成器</td></tr><tr><td align="center"></td><td align="center"><code>-C &lt;initial cache script&gt;</code></td><td align="center">预填充缓存信息</td></tr><tr><td align="center"></td><td align="center"><code>-D &lt;var&gt;[:&lt;type&gt;]=&lt;value&gt;</code></td><td align="center">指定变量值,type可选以下值：BOOL，FILEPATH，PATH，STRING 或 INTERNAL</td></tr><tr><td align="center"></td><td align="center"><code>-L</code></td><td align="center">列出缓存变量，-D指定的不会打印, -LH则还会打印变量提供的帮助信息</td></tr><tr><td align="center"></td><td align="center"><code>-U &lt;globbing_expr&gt;</code></td><td align="center">删除一个变量</td></tr><tr><td align="center"><code>--system-information [file]</code></td><td align="center"></td><td align="center">获取关于变量、命令、宏和其他设置的通用信息,可保存在file中</td></tr><tr><td align="center"><code>--log-level=&lt;level&gt;</code></td><td align="center"></td><td align="center">可以是ERROR，WARNING，NOTICE，STATUS，VERBOSE，DEBUG，TRACE，输出打印级别</td></tr><tr><td align="center"><code>--trace</code></td><td align="center"></td><td align="center">它会打印每个执行的命令及其文件名、调用它的行号，以及传递的参数列表</td></tr><tr><td align="center"><code>--list-presets</code></td><td align="center"></td><td align="center">列出所有可用的预设</td></tr><tr><td align="center"><code>--fresh</code></td><td align="center"></td><td align="center">清理目录，等价于手动删除</td></tr><tr><td align="center"><code>--target &lt;target&gt;</code></td><td align="center"><code>-t &lt;target&gt;</code></td><td align="center">指定生成的目标（这些目标通常排除在正常构建外）</td></tr><tr><td align="center"><code>--clean-first</code></td><td align="center"><code>-t clean</code></td><td align="center">只影响目标产物而不影响其他，如缓存</td></tr><tr><td align="center"><code>--config &lt;cfg&gt;</code></td><td align="center"></td><td align="center">指定构建类型，只有visual studio等多配置生成器可用，也可以用<code>CMAKE_BUILD_TYPE</code>指定</td></tr><tr><td align="center"><code>--install &lt;build tree&gt; --install-prefix &lt;prefix&gt;</code></td><td align="center"></td><td align="center">指定安装路径，prefix是前缀路径</td></tr><tr><td align="center"><code>--verbose</code></td><td align="center"><code>-v</code></td><td align="center">输出细节</td></tr><tr><td align="center"></td><td align="center"><code>-E &lt;command&gt; [options]</code></td><td align="center">以平台无关的方式运行单个命令——例如复制文件或计算校验和</td></tr></tbody></table><h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><p>|变量名|类型|含义|<br>|:-:|:-:|<br>|<code>CMAKE_GENERATOR_TOOLSET</code>||<br>|<code>CMAKE_GENERATOR_PLATFORM</code>||<br>|<code>CMAKE_BUILD_TYPE</code>|可选值Debug,Release,MinSizeRel,RelWithDebInfo|</p><h2 id="主机系统变量"><a href="#主机系统变量" class="headerlink" title="主机系统变量"></a>主机系统变量</h2><table><thead><tr><th align="center">变量名</th><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>CMAKE_SIZEOF_VOID_P</code></td><td align="center">Int</td><td align="center">8代表64位，4代表32位</td></tr><tr><td align="center"><code>CMAKE_&lt;LANG&gt;_BYTE_ORDER</code></td><td align="center"></td><td align="center">Lang可选C，CXX等,存放字节序,值有可能是<code>LITTLE_ENDIAN</code>和<code>BIG_ENDIAN</code></td></tr><tr><td align="center"><code>CMAKE_SYSTEM_NAME</code></td><td align="center">String</td><td align="center">存放操作系统类型：<code>Linux,Darwin,Windows,AIX</code></td></tr><tr><td align="center"><code>ANDROID,APPLE,CYGWIN,UNIX,IOS,WIN32,WINCE,WINDOWS_PHONE</code></td><td align="center">Bool</td><td align="center"></td></tr><tr><td align="center"><code>HOSTNAME</code></td><td align="center">String</td><td align="center">主机名</td></tr><tr><td align="center"><code>FQDN</code></td><td align="center">String</td><td align="center">完全限定域名</td></tr><tr><td align="center"><code>TOTAL_VIRTUAL_MEMORY</code></td><td align="center">String</td><td align="center">以 MiB 为单位的虚拟内存总量</td></tr><tr><td align="center"><code>AVAILABLE_VIRTUAL_MEMORY</code></td><td align="center">String</td><td align="center">以 MiB 为单位的可用虚拟内存</td></tr><tr><td align="center"><code>TOTAL_PHYSICAL_MEMORY</code></td><td align="center">String</td><td align="center">以 MiB 为单位的总物理内存</td></tr><tr><td align="center"><code>AVAILABLE_PHYSICAL_MEMORY</code></td><td align="center">String</td><td align="center">以 MiB 为单位的可用物理内存</td></tr><tr><td align="center"><code>OS_NAME</code></td><td align="center">String</td><td align="center">如果存在，则输出 uname -s; 无论是 Windows、Linux，还是 Darwin</td></tr><tr><td align="center"><code>OS_RELEASE</code></td><td align="center"></td><td align="center">操作系统子类型，如 Windows Professional</td></tr><tr><td align="center"><code>OS_VERSION</code></td><td align="center">String</td><td align="center">操作系统构建 ID</td></tr><tr><td align="center"><code>OS_PLATFORM</code></td><td align="center">String</td><td align="center">在 Windows 上和 $ENV{PROCESSOR_ARCHITECTURE} 的值一样. 在 Unix&#x2F;macOS 上和 uname -m 一样</td></tr><tr><td align="center"><code>NUMBER_OF_LOGICAL_CORES</code></td><td align="center"></td><td align="center">逻辑核数</td></tr><tr><td align="center"><code>NUMBER_OF_PHYSICAL_CORES</code></td><td align="center"></td><td align="center">物理核数</td></tr><tr><td align="center"><code>HAS_SERIAL_NUMBER</code></td><td align="center"></td><td align="center">如果处理器有序列号，则为 1</td></tr><tr><td align="center"><code>PROCESSOR_SERIAL_NUMBER</code></td><td align="center"></td><td align="center">处理器序列号</td></tr><tr><td align="center"><code>PROCESSOR_NAME</code></td><td align="center"></td><td align="center">可读的处理器名称</td></tr><tr><td align="center"><code>PROCESSOR_DESCRIPTION</code></td><td align="center"></td><td align="center">可读的完整处理器描述</td></tr><tr><td align="center"><code>IS_64BIT</code></td><td align="center"></td><td align="center">如果处理器是 64 位的为 1</td></tr><tr><td align="center"><code>HAS_FPU</code></td><td align="center"></td><td align="center">如果处理器有浮点单元为 1</td></tr><tr><td align="center"><code>HAS_MMX</code></td><td align="center"></td><td align="center">如果处理器支持 MMX 指令为 1</td></tr><tr><td align="center"><code>HAS_MMX_PLUS</code></td><td align="center"></td><td align="center">如果处理器支持 Ext. MMX 指令为 1</td></tr><tr><td align="center"><code>HAS_SSE</code></td><td align="center"></td><td align="center">如果处理器支持 SSE 指令为 1</td></tr><tr><td align="center"><code>HAS_SSE2</code></td><td align="center"></td><td align="center">如果处理器支持 SSE2 指令为 1</td></tr><tr><td align="center"><code>HAS_SSE_FP</code></td><td align="center"></td><td align="center">如果处理器支持 SSE FP 指令为 1</td></tr><tr><td align="center"><code>HAS_SSE_MMX</code></td><td align="center"></td><td align="center">如果处理器支持 SSE MMX 指令为 1</td></tr><tr><td align="center"><code>HAS_AMD_3DNOW</code></td><td align="center"></td><td align="center">如果处理器支持 3DNow 指令为 1</td></tr><tr><td align="center"><code>HAS_AMD_3DNOW_PLUS</code></td><td align="center"></td><td align="center">如果处理器支持 3DNow+ 指令为 1</td></tr><tr><td align="center"><code>HAS_IA64</code></td><td align="center"></td><td align="center">如果 IA64 处理器模拟 x86，则为 1</td></tr></tbody></table><h1 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h1><h2 id="C-标准"><a href="#C-标准" class="headerlink" title="C++标准"></a>C++标准</h2><ul><li><code>set(CMAKE_CXX_STANDARD &lt;version&gt;)</code></li><li><code>set_property(Target &lt;target&gt; PROPERTY CXX_STANDARD &lt;version&gt;)</code></li><li><code>set_target_properties(&lt;targets&gt; PROPERTIES CXX_STANDARD &lt;version&gt;)</code></li><li><code>target_compile_features(&lt;target&gt; PUBLIC cxx_std_26)</code><br>version可选值有：98,11,14,17,20,23,26<br>使用target_compile_features可选值有cxx_std_14…<br>强制应用标准：<code>set(CMAKE_CXX_STANDARD_REQUIRED ON)</code></li></ul><h2 id="检查支持的编译特性"><a href="#检查支持的编译特性" class="headerlink" title="检查支持的编译特性"></a>检查支持的编译特性</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(FIND CMAKE_CXX_COMPILE_FEATURES cxx_variable_templates result)<br><span class="hljs-keyword">if</span>(result <span class="hljs-keyword">EQUAL</span> -<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Variable templates are required for compilation.&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><p>可以在<a href="https://cmake.org/cmake/help/latest/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html">c++支持特性列表里找到特性的完整列表</a></p><h2 id="过程间优化-ipo"><a href="#过程间优化-ipo" class="headerlink" title="过程间优化(ipo)"></a>过程间优化(ipo)</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span>(CheckIPOSupported)<br>check_ipo_supported(RESULT ipo_supported)<br><span class="hljs-keyword">set</span>(CMAKE_INTERPROCEDURAL_OPTIMIZATION <span class="hljs-variable">$&#123;ipo_supported&#125;</span>)<br></code></pre></td></tr></table></figure><h2 id="禁用源内构建"><a href="#禁用源内构建" class="headerlink" title="禁用源内构建"></a>禁用源内构建</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.26</span>.<span class="hljs-number">0</span>)<br><span class="hljs-keyword">project</span>(NoInSource CXX)<br><span class="hljs-keyword">if</span>(PROJECT_SOURCE_DIR <span class="hljs-keyword">STREQUAL</span> PROJECT_BINARY_DIR)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;In-source builds are not allowed&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;Build successful!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="生成目标依赖图"><a href="#生成目标依赖图" class="headerlink" title="生成目标依赖图"></a>生成目标依赖图</h2><ul><li>使用命令<code>cmake --graphviz=test.dot .</code></li><li>更多信息见官网<strong>CMakeGraphVizOptions</strong>模块,</li><li>默认自定义目标不会出现在图中，可以创建一个<strong>CMakeGraphVizOptions.cmake</strong>文件，里面设置<code>set(GRAPHVIZ_CUSTOM_TARGETS TRUE)</code></li><li>生成的dot文件可以在线查看<a href="https://dreampuf.github.io/GraphvizOnline/">Graphviz</a></li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释：行首添加<code>#</code></li><li>多行注释：以#开始，后跟方括号，任意数量等号&#x3D;可以是0个，以及另一个方括号,并以相同数量等号及方括号关闭<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"> <span class="hljs-comment">#[=[</span><br><span class="hljs-number">2</span> bracket comment<br>    <span class="hljs-number">3</span> <span class="hljs-comment">#[[</span><br><span class="hljs-comment">        4 nested bracket comment</span><br><span class="hljs-comment">    5 #]]</span><br><span class="hljs-number">6</span> <span class="hljs-comment">#]=]</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="括号参数"><a href="#括号参数" class="headerlink" title="括号参数"></a>括号参数</h3><p>括号参数与多行注释格式类似，但它不能嵌套</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">message</span>([[multiline<br>    bracket<br>    argument<br>]])<br><span class="hljs-keyword">message</span>([==[<br>    because we used two <span class="hljs-keyword">equal</span>-signs <span class="hljs-string">&quot;==&quot;</span><br>    this <span class="hljs-keyword">command</span> receives only a single argument<br>    even <span class="hljs-keyword">if</span> it includes two square brackets in a row<br>    &#123; <span class="hljs-string">&quot;petsArray&quot;</span> = [[<span class="hljs-string">&quot;mouse&quot;</span>,<span class="hljs-string">&quot;cat&quot;</span>],[<span class="hljs-string">&quot;dog&quot;</span>]] &#125;<br>]==])<br></code></pre></td></tr></table></figure><h3 id="引号参数"><a href="#引号参数" class="headerlink" title="引号参数"></a>引号参数</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;1. escape sequence: \&quot; \n in a quoted argument&quot;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;2. multi...</span><br><span class="hljs-string">line&quot;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;3. and a variable reference: $&#123;CMAKE_VERSION&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="非引号参数"><a href="#非引号参数" class="headerlink" title="非引号参数"></a>非引号参数</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">message</span>(a\ single\ argument)<br><span class="hljs-keyword">message</span>(two arguments)<br><span class="hljs-keyword">message</span>(three;separated arguments)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;CMAKE_VERSION&#125;</span>) <span class="hljs-comment"># a variable reference</span><br></code></pre></td></tr></table></figure><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><ul><li>设置与读取：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(MyString1 <span class="hljs-string">&quot;Text1&quot;</span>)<br><span class="hljs-keyword">set</span>([[My String2]] <span class="hljs-string">&quot;Text2&quot;</span>)<br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;My String 3&quot;</span> <span class="hljs-string">&quot;Text3&quot;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;MyString1&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;My\ String2&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;My\ String\ 3&#125;</span>)<br></code></pre></td></tr></table></figure></li><li>取消：<code>unset(MyString1)</code></li><li>环境变量：<code>$ENV&#123;&#125;</code></li><li>缓存变量：<code>$CACHE&#123;&#125;</code></li></ul><h3 id="缓存变量"><a href="#缓存变量" class="headerlink" title="缓存变量"></a>缓存变量</h3><ul><li>格式：<code>set(&lt;variable&gt; &lt;value&gt; CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</code></li><li>BOOL: 一个布尔开关值。GUI 将显示一个复选框。</li><li>FILEPATH: 磁盘上一个文件的路径。GUI 将打开一个文件对话框。</li><li>PATH: 磁盘上一个目录的路径。GUI 将打开一个目录对话框。</li><li>STRING: 一 行 文 本。GUI 提 供 了 一 个 要 填 充 的 文 本 字 段， 可 以 通 过 调 用<br>set_property(CACHE <variable> STRINGS <values>) 来替换为下拉控件。</li><li>INTERNAL: 一行文本。GUI 将跳过内部条目。内部条目可以用来在运行之间持久存储变量，<br>使用此类型隐式添加 FORCE 关键字。<br><code>&lt;doctring&gt;</code> 值只是一个标签，GUI 将在字段旁边显示它，以便向用户提供此设置的更多细<br>节。如果缓存文件中不存在该变量或指定了可选的 FORCE 参数，该值将持久化</li></ul><h2 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h2><ul><li><code>set(myList a list of five elements)</code></li><li><code>set(myList &quot;a;list;of;five;elements&quot;)</code></li><li><code>set(myList a list &quot;of;five;elements&quot;)</code></li></ul><h3 id="list命令工具"><a href="#list命令工具" class="headerlink" title="list命令工具"></a>list命令工具</h3><ul><li>list(LENGTH <list> <out-var>)</li><li>list(GET <list> <element index> [<index> …] <out-var>)</li><li>list(JOIN <list> <glue> <out-var>)</li><li>list(SUBLIST <list> <begin> <length> <out-var>)</li><li>list(FIND <list> <value> <out-var>)</li><li>list(APPEND <list> [<element>…])</li><li>list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <regex>)</li><li>list(INSERT <list> <index> [<element>…])</li><li>list(POP_BACK <list> [<out-var>…])</li><li>list(POP_FRONT <list> [<out-var>…])</li><li>list(PREPEND <list> [<element>…])</li><li>list(REMOVE_ITEM <list> <value>…)</li><li>list(REMOVE_AT <list> <index>…)</li><li>list(REMOVE_DUPLICATES <list>)</li><li>list(TRANSFORM <list> <ACTION> […])</li><li>list(REVERSE <list>)</li><li>list(SORT <list> […])</li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">if</span>(&lt;condition&gt;)<br>&lt;commands&gt;<br><span class="hljs-keyword">elseif</span>(&lt;condition&gt;) <span class="hljs-comment"># optional block, can be repeated</span><br>&lt;commands&gt;<br><span class="hljs-keyword">else</span>() <span class="hljs-comment"># optional block</span><br>&lt;commands&gt;<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><h3 id="条件格式"><a href="#条件格式" class="headerlink" title="条件格式"></a>条件格式</h3><ul><li><code>&lt;condition&gt; AND &lt;condition&gt;</code></li><li><code>&lt;condition&gt; OR &lt;condition&gt;</code></li><li><code>NOT &lt;condition&gt;</code></li><li><code>DEFINED &lt;variable&gt;</code></li><li><code>DEFINED CACHE&lt;variable&gt;</code></li><li><code>DEFINED ENV&lt;variable&gt;</code></li><li><code>if(FOO)</code>:在以下情况才为假:<ul><li>OFF, NO, FALSE, N, IGNORE 或 NOTFOUND</li><li>以-NOTFOUND 结尾的字符串</li><li>空字符串</li><li>零</li></ul></li><li><code>if($(QUX))</code>字符串只有在等于 ON、Y、YES、TRUE 或非零数字，才可视为真（这些比较不区分大小写）。</li><li><code>1 LESS/LESS_EQUAL/GREATER/GREATER_EQUAL/EQUAL 2</code></li><li><code>1.3.4 VERSION_LESS_EQUAL 1.4</code></li><li><code>&quot;str1&quot; STREQUAL &quot;$&#123;B&#125;&quot;</code></li><li><code>&lt;VARIABLE|STRING&gt; MATCHES &lt;regex&gt;</code></li><li><code>&lt;VARIABLE|STRING&gt; IN_LIST &lt;VARIABLE&gt;</code></li><li><code>COMMAND &lt;command-name&gt;</code>是否可以调用某个cmake命令</li><li><code>POLICY &lt;policy-id&gt;</code>是否存在cmake策略</li><li><code>TEST &lt;test-name&gt;</code>是否add_test()添加了CTest测试</li><li><code>TARGET &lt;target-name&gt;</code>是否定义了一个构建目标</li><li><code>EXISTS &lt;path-to-file-or-directory&gt;</code></li><li><code>&lt;file1&gt; IS_NEWER_THAN &lt;file2&gt;:</code></li><li><code>IS_DIRECTORY &lt;path-to-directory&gt;</code></li><li><code>IS_SYMLINK &lt;file-name&gt;</code></li><li><code>IS_ABSOLUTE &lt;path&gt;</code></li></ul><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环体支持<code>break()和continue()</code></p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">while</span>(&lt;condition&gt;)<br>&lt;commands&gt;<br><span class="hljs-keyword">endwhile</span>()<br></code></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">foreach</span>(&lt;loop_var&gt; RANGE &lt;max&gt;)<span class="hljs-comment">#CMake 将从 0 迭代到 &lt;max&gt;（包括）。</span><br>    &lt;commands&gt;<br><span class="hljs-keyword">endforeach</span>()<br></code></pre></td></tr></table></figure><ul><li><code>foreach(&lt;loop_var&gt; RANGE &lt;min&gt; &lt;max&gt; [&lt;step&gt;])</code></li><li><code>foreach(&lt;loop_variable&gt; IN [LISTS &lt;lists&gt;] [ITEMS &lt;items&gt;])</code></li><li><code>foreach(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</code></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(MyList <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)<br><span class="hljs-keyword">foreach</span>(VAR IN LISTS MyList ITEMS e f)<span class="hljs-comment">#等价于foreach(VAR 1 2 3 e f)</span><br>    <span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;VAR&#125;</span>)<br><span class="hljs-keyword">endforeach</span>()<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(L1 <span class="hljs-string">&quot;one;two;three;four&quot;</span>)<br><span class="hljs-keyword">set</span>(L2 <span class="hljs-string">&quot;1;2;3;4;5&quot;</span>)<br><span class="hljs-keyword">foreach</span>(num IN ZIP_LISTS L1 L2)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;word=$&#123;num_0&#125;, num=$&#123;num_1&#125;&quot;</span>)<br><span class="hljs-keyword">endforeach</span>()<br><span class="hljs-comment"># 等价于下面</span><br><span class="hljs-comment"># foreach(word num IN ZIP_LISTS L1 L2)</span><br><span class="hljs-comment">#    message(&quot;word=$&#123;word&#125;, num=$&#123;num&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">function</span>(&lt;name&gt; [&lt;argument&gt;...])<br>&lt;commands&gt;<br><span class="hljs-keyword">endfunction</span>()<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">function</span>(MyFunction FirstArg)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;Function: $&#123;CMAKE_CURRENT_FUNCTION&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;File: $&#123;CMAKE_CURRENT_FUNCTION_LIST_FILE&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;FirstArg: $&#123;FirstArg&#125;&quot;</span>)<br>    <span class="hljs-keyword">set</span>(FirstArg <span class="hljs-string">&quot;new value&quot;</span>)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;FirstArg again: $&#123;FirstArg&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;ARGV0: $&#123;ARGV0&#125; ARGV1: $&#123;ARGV1&#125; ARGC: $&#123;ARGC&#125;&quot;</span>)<br><span class="hljs-keyword">endfunction</span>()<br><span class="hljs-keyword">set</span>(FirstArg <span class="hljs-string">&quot;first value&quot;</span>)<br>MyFunction(<span class="hljs-string">&quot;Value1&quot;</span> <span class="hljs-string">&quot;Value2&quot;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;FirstArg in global scope: $&#123;FirstArg&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="cmake-minimum-required"><a href="#cmake-minimum-required" class="headerlink" title="cmake_minimum-required"></a>cmake_minimum-required</h2><ul><li>格式：<code>cmake_minimum_required(VERSION &lt;x.xx&gt;)</code></li><li>意义：设置cmake期望的版本</li></ul><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><ul><li>格式一：<code>project(&lt;PROJECT-NAME&gt; [&lt;language-name&gt;...])</code></li><li>格式二：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">project</span>(&lt;<span class="hljs-keyword">PROJECT</span>-NAME&gt;<br>    [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]<br>    [DESCRIPTION &lt;<span class="hljs-keyword">project</span>-description-<span class="hljs-keyword">string</span>&gt;]<br>    [HOMEPAGE_URL &lt;url-<span class="hljs-keyword">string</span>&gt;]<br>    [LANGUAGES &lt;language-name&gt;...])<br></code></pre></td></tr></table></figure>此命令将设置以下变量:</li><li><code>PROJECT_NAME</code></li><li><code>CMAKE_PROJECT_NAME (only in the top-level CMakeLists.txt)</code></li><li><code>PROJECT_IS_TOP_LEVEL, &lt;PROJECT-NAME&gt;_IS_TOP_LEVEL</code></li><li><code>PROJECT_SOURCE_DIR, &lt;PROJECT-NAME&gt;_SOURCE_DIR</code></li><li><code>PROJECT_BINARY_DIR, &lt;PROJECT-NAME&gt;_BINARY_DIR</code><br>支持语言(仅列常用的)</li><li>C:C</li><li>CXX: C++<br>指定VERSION关键字，将会设置以下变量:</li><li><code>PROJECT_VERSION, &lt;PROJECT-NAME&gt;_VERSION</code></li><li><code>CMAKE_PROJECT_VERSION (only in the top-level CMakeLists.txt)</code></li><li><code>PROJECT_VERSION_MAJOR, &lt;PROJECT-NAME&gt;_VERSION_MAJOR</code></li><li><code>PROJECT_VERSION_MINOR, &lt;PROJECT-NAME&gt;_VERSION_MINOR</code></li><li><code>PROJECT_VERSION_PATCH, &lt;PROJECT-NAME&gt;_VERSION_PATCH</code></li><li><code>PROJECT_VERSION_TWEAK, &lt;PROJECT-NAME&gt;_VERSION_TWEAK</code><br>类似设置DESCRIPTION和HOMEPAGE_URL将设置以下变量</li><li><code>PROJECT_DESCRIPTION, &lt;PROJECT-NAME&gt;_DESCRIPTION</code></li><li><code>PROJECT_HOMEPAGE_URL, &lt;PROJECT-NAME&gt;_HOMEPAGE_URL</code></li></ul><h2 id="add-subdirectory"><a href="#add-subdirectory" class="headerlink" title="add_subdirectory"></a>add_subdirectory</h2><ul><li>格式：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></li><li>意义：<code>将计算source_dir 路径（相对于当前目录）并解析其中的CMakeLists.txt 文件</code></li><li><strong>[binary_dir]</strong>: 构建的文件将写入该路径，默认是构建树</li><li><strong>[EXCLUDE_FROM_ALL]</strong>: 禁用子目录中定义的目标的自动构建</li></ul><h2 id="add-executable"><a href="#add-executable" class="headerlink" title="add_executable"></a>add_executable</h2><ul><li>格式：<code>add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [source1 source2...])</code></li><li>[WIN32],[MACOSX_BUNDLE]分别生成win和mac下的gui程序</li><li>[EXCLUDE_FROM_ALL]将使得该目标在默认构建中排除在外，必须-t明确指明</li></ul><h2 id="add-library"><a href="#add-library" class="headerlink" title="add_library"></a>add_library</h2><ul><li>格式：<code>add_library(&lt;name&gt; [STATIC|SHARED|MODULE] [EXCLUDE_FROM_ALL] [source1 source2...])</code></li><li>[STATIC|SHARED|MODULE],分别对应静态，动态，模块</li></ul><h2 id="add-custom-target"><a href="#add-custom-target" class="headerlink" title="add_custom_target"></a>add_custom_target</h2><ul><li>格式：<code>add_custom_target(Name [ALL] [COMMAND command2 [args2...] ...])</code><br>[ALL]与[EXCLUDE_FROM_ALL]含义相反，自定义目标默认不生成,自定义目标通常用于以下场景：</li><li>计算其他二进制文件的校验和</li><li>运行代码消毒器并收集结果</li><li>将编译报告发送到指标通道<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.26</span>)<br><span class="hljs-keyword">project</span>(BankApp CXX)<br><span class="hljs-keyword">add_executable</span>(terminal_app terminal_app.cpp)<br><span class="hljs-keyword">add_executable</span>(gui_app gui_app.cpp)<br><span class="hljs-keyword">target_link_libraries</span>(terminal_app calculations)<br><span class="hljs-keyword">target_link_libraries</span>(gui_app calculations drawing)<br><span class="hljs-keyword">add_library</span>(calculations calculations.cpp)<br><span class="hljs-keyword">add_library</span>(drawing drawing.cpp)<br><span class="hljs-keyword">add_custom_target</span>(checksum ALL<br>    <span class="hljs-keyword">COMMAND</span> sh -c <span class="hljs-string">&quot;cksum terminal_app&gt;terminal.ck&quot;</span><br>    <span class="hljs-keyword">COMMAND</span> sh -c <span class="hljs-string">&quot;cksum gui_app&gt;gui.ck&quot;</span><br>    BYPRODUCTS terminal.ck gui.ck<br>    COMMENT <span class="hljs-string">&quot;Checking the sums...&quot;</span><br>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="find-package"><a href="#find-package" class="headerlink" title="find_package"></a>find_package</h2><ul><li><code>find_package(&lt;Name&gt; [version] [EXACT] [QUIET] [REQUIRED])</code><br>[version]可以指定一个范围，如<code>1.22...1.40.1</code>,EXACT指定确切版本，而不是更新,QUIET抑制包被找到的信息<br>当找到库后，cmake将会自动设置以下变量：</li><li><code>&lt;PKG_NAME&gt;_FOUND</code>: 这表明是否成功找到了包。</li><li><code>&lt;PKG_NAME&gt;_INCLUDE_DIRS 或 &lt;PKG_NAME&gt;_INCLUDES</code>: 这指向包的头文件所在的目<br>录。</li><li><code>&lt;PKG_NAME&gt;_LIBRARIES 或 &lt;PKG_NAME&gt;_LIBS</code>: 这些是要链接的库的列表。<br>可以设置扫描路径<code>CMAKE_MODULE_PATH</code>，而不是系统默认的</li></ul><h2 id="message"><a href="#message" class="headerlink" title="message"></a>message</h2><ul><li><code>message(&lt;MODE&gt; ”text to print”)</code><br>MODE可选以下：</li><li>FATAL_ERROR: 停止处理和生成。</li><li>SEND_ERROR: 继续处理，但跳过生成。</li><li>WARNING: 继续处理。</li><li>AUTHOR_WARNING: 输出警告，但继续处理。</li><li>DEPRECATION: 如 果 启 用 了 CMAKE_ERROR_DEPRECATED 或 CMAKE_WARN_DEPRECATED，则输出相应地信息。</li><li>NOTICE 或省略模式（默认）: 输出消息到 stderr，以吸引使用者的注意。</li><li>STATUS: 继续处理，推荐用于向用户显示的主要消息。</li><li>VERBOSE: 继续处理，应用于更详细的信息，通常不是非常必要。</li><li>DEBUG: 继续处理，应包含项目出现问题时，对处理问题有帮助的详细信息。</li><li>TRACE: 继续处理，建议在项目开发期间输出消息。通常，这类消息会在发布项目之前移除。</li></ul><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><ul><li>file(READ <filename> <out-var> […])</li><li>file({WRITE | APPEND} <filename> <content>…)</li><li>file(DOWNLOAD <url> [<file>] […])</li></ul><h2 id="execute-process"><a href="#execute-process" class="headerlink" title="execute_process()"></a>execute_process()</h2><ul><li><code>execute_process(COMMAND &lt;cmd1&gt; [&lt;arguments&gt;]... [OPTIONS])</code><br>可选地 TIMEOUT 参数，用来在进程未在所需限制内完成任务时终止该进程，并且可以根据<br>需要设置 WORKING_DIRECTORY 。<br>所有任务的退出代码可以通过提供 RESULTS_VARIABLE 参数来收集到一个列表中。如果只<br>对最后执行的命令的结果感兴趣，请使用单数形式：RESULT_VARIABLE 。<br>为了收集输出，CMake 提供了两个参数：OUTPUT_VARIABLE 和 ERROR_VARIABLE（用法<br>类似）。如果想合并 stdout 和 stderr，请为这两个参数使用相同的变量。</li></ul><h2 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h2><h3 id="别名目标"><a href="#别名目标" class="headerlink" title="别名目标"></a>别名目标</h3><p>别名目标的确切作用就是你所期望的——为目标创建另一个不同的名称引用</p><ul><li><code>add_executable(&lt;name&gt; ALIAS &lt;target&gt;)</code></li><li><code>add_library(&lt;name&gt; ALIAS &lt;target&gt;)</code></li></ul><h3 id="接口库"><a href="#接口库" class="headerlink" title="接口库"></a>接口库</h3><ul><li><code>add_library(&lt;name&gt; INTERFACE [item1 ...])</code><br>有两个作用：一是<strong>代表仅包含头文件的库</strong>,二是<strong>将一堆传播属性打包成一个逻辑单元</strong><br>例子一：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(Eigen INTERFACE<br>  src/eigen.h src/vector.h src/matrix.h<br>)<br><span class="hljs-keyword">target_include_directories</span>(Eigen INTERFACE<br>  $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src&gt;<br>  $&lt;INSTALL_INTERFACE:<span class="hljs-keyword">include</span>/Eigen&gt;<br>)<br><span class="hljs-keyword">target_link_libraries</span>(executable Eigen)<br></code></pre></td></tr></table></figure>例子二：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(warning_properties INTERFACE)<br><span class="hljs-keyword">target_compile_options</span>(warning_properties INTERFACE<br>    -Wall -Wextra -Wpedantic<br>)<br><span class="hljs-number">5</span> <span class="hljs-keyword">target_link_libraries</span>(executable warning_properties)<br></code></pre></td></tr></table></figure></li></ul><h2 id="对象库"><a href="#对象库" class="headerlink" title="对象库"></a>对象库</h2><p>即.o对象文件</p><ul><li><code>add_library(&lt;target&gt; OBJECT &lt;sources&gt;)</code><br>可以使用target_link_libraries()作为依赖添加，抑或是如下：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(... $&lt;TARGET_OBJECTS:objname&gt; ...)<br><span class="hljs-keyword">add_executable</span>(... $&lt;TARGET_OBJECTS:objname&gt; ...)<br></code></pre></td></tr></table></figure></li></ul><h2 id="target-include-directories"><a href="#target-include-directories" class="headerlink" title="target_include_directories"></a>target_include_directories</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_include_directories</span>(&lt;<span class="hljs-keyword">target</span>&gt; [SYSTEM] [AFTER|BEFORE]<br>&lt;INTERFACE|PUBLIC|PRIVATE&gt; [item1...]<br>[&lt;INTERFACE|PUBLIC|PRIVATE&gt; [item2...]<br>...])<br></code></pre></td></tr></table></figure><p>SYSTEM 关键字告诉编译器给定的目录应该视为标准系统目录（与尖括号形式一起使用）。<br>BEFORE或AFTER决定是否将这些头文件放在已有的路径之前或之后</p><h2 id="target-compile-definitions"><a href="#target-compile-definitions" class="headerlink" title="target_compile_definitions"></a>target_compile_definitions</h2><ul><li><code>target_compile_definitions(&lt;target&gt; [PRIVATE|PUBLIC|INTERFACE] [var1 &quot;var2=value&quot; ...])</code><br>定义宏变量,相当于-D传递,也可以传递-D选项<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_compile_definitions</span>(<span class="hljs-keyword">defined</span> PRIVATE ABC <span class="hljs-string">&quot;DEF=$&#123;VAR&#125;&quot;</span>)<br><span class="hljs-keyword">target_compile_definitions</span>(hello PRIVATE -DFOO)<br><span class="hljs-keyword">target_compile_definitions</span>(hello PRIVATE -D FOO)<br></code></pre></td></tr></table></figure></li></ul><h2 id="target-compile-options"><a href="#target-compile-options" class="headerlink" title="target_compile_options"></a>target_compile_options</h2><ul><li>传递编译器参数</li><li><code>target_compile_options(&lt;target&gt; [BEFORE] &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...] &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...]</code></li></ul><h2 id="target-precompile-headers"><a href="#target-precompile-headers" class="headerlink" title="target_precompile_headers"></a>target_precompile_headers</h2><ul><li>预编译头文件</li><li><code>target_precompile_headers(&lt;target&gt; &lt;INTERFACE|PUBLIC|PRIVATE&gt; [header1...] [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [header2...] ...])</code><br>添加的头文件列表存储在PRECOMPILE_HEADERS属性中,不应该对使用install命令导出的目标执行此操作</li></ul><h1 id="目标的属性"><a href="#目标的属性" class="headerlink" title="目标的属性"></a>目标的属性</h1><ul><li>获取属性值:<code>get_target_property(&lt;var&gt; &lt;target&gt; &lt;property-name&gt;)</code></li><li>设置属性:<code>set_target_properties(&lt;target1&gt; &lt;target2&gt; ...  PROPERTIES &lt;prop1-name&gt; &lt;value1&gt; &lt;prop2-name&gt; &lt;value2&gt; ...)</code>或 <code>set_property(Target &lt;target&gt; PROPERTY &lt;prop-name&gt; &lt;value&gt;)</code></li></ul><h2 id="属性传播"><a href="#属性传播" class="headerlink" title="属性传播"></a>属性传播</h2><ul><li>PRIVATE:设置源目标属性</li><li>INTERFACE:设置使用目标的目标属性</li><li>PUBLIC：设置源目标和使用目标属性<br>当指定 PRIVATE 或 PUBLIC 关键字时，CMake 将在目 标的属性中存储提供的值，COMPILE_DEFINITIONS。此外，关键字是 INTERFACE 或 PUBLIC， 将在具有 INTERFACE_前缀的属性中存储值——INTERFACE_COMPILE_DEFINITIONS。配置阶 段，CMake 将读取源目标的接口属性，并将其内容附加到目标目标。就这样传播属性，或 CMake 所说的传递目标的使用要求。<br>设置属性时需要指定上述关键字，如<code>target_compile_definitions(&lt;source&gt; &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...])</code>, <code>target_link_libraries(&lt;target&gt; &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item1&gt; [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...])</code>这个命令也需要传播关键字</li></ul><h2 id="自定义属性的传播"><a href="#自定义属性的传播" class="headerlink" title="自定义属性的传播"></a>自定义属性的传播</h2><p>CMake 默认不会传播自定义属性（这个机制只适用 于内置目标属性），必须明确地将自定义属性添加到“兼容”属性列表中。<br>每个目标都有四个这样的列表：</p><ul><li>COMPATIBLE_INTEERFACE_BOOL</li><li>COMPATIBLE_INTERFACE_STRING</li><li>COMPATIBLE_INTERFACE_NUMBER_MAX</li><li>COMPATIBLE_INTERFACE_NUMBER_MIN<br>将属性添加到它们中的任何一个，都会触发传播和兼容性检查。BOOL 列表将检查所有传递到 目标目标的属性是否评估为相同的布尔值。类似地，STRING 将评估为字符串。NUMBER_MAX 和 NUMBER_MIN 略有不同——传递的值不必匹配，但目标目标将只接收最高或最低值。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.26</span>)<br> <span class="hljs-keyword">project</span>(PropagatedProperties CXX)<br><br><span class="hljs-keyword">add_library</span>(source1 empty.cpp)<br><span class="hljs-keyword">set_property</span>(<span class="hljs-keyword">TARGET</span> source1 PROPERTY INTERFACE_LIB_VERSION <span class="hljs-number">4</span>)<br><span class="hljs-keyword">set_property</span>(<span class="hljs-keyword">TARGET</span> source1 APPEND PROPERTY<br>    COMPATIBLE_INTERFACE_STRING LIB_VERSION)<br><br><span class="hljs-keyword">add_library</span>(source2 empty.cpp)<br><span class="hljs-keyword">set_property</span>(<span class="hljs-keyword">TARGET</span> source2 PROPERTY INTERFACE_LIB_VERSION <span class="hljs-number">4</span>)<br><span class="hljs-keyword">add_library</span>(destination empty.cpp)<br><span class="hljs-keyword">target_link_libraries</span>(destination source1 source2)<br></code></pre></td></tr></table></figure><p>CMake 将这个自定义属性传播到相应目标，并检查所有源目标的版本是否完全匹配（兼容性属性只需在目标目标上设置一次）。</p><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://kubasejdak.com/19-reasons-why-cmake-is-actually-awesome">19 reasons why cmake is actually awesome</a><br><a href="https://cliutils.gitlab.io/modern-cmake/">an introduction to modern cmake</a><br><a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">effective modern cmake</a><br><a href="https://github.com/onqtam/awesome-cmake">awesome cmake</a><br><a href="https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/Useful-Variables">useful variables</a></p><h1 id="CTest"><a href="#CTest" class="headerlink" title="CTest"></a>CTest</h1><p>testing tool(integrated in CMake)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>c++_tools</title>
    <link href="/2024/04/05/c-tools/"/>
    <url>/2024/04/05/c-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>用来检测内存和线程bug</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>valgrind &lt;-options&gt; ./program &lt;args&gt;</code>,program should be compiled with -g</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li><code>--leak-check=full</code> print details for each “definitely lost” or “possibly lost”<br>block, including where it was allocated</li><li><code>--show-leak-kinds=all</code> to combine with –leak-check&#x3D;full. Print all leak kinds</li><li><code>--track-fds=yes</code> list open file descriptors on exit (not closed)</li><li><code>--track-origins=yes</code> tracks the origin of uninitialized values (very slow execution)</li></ul><h1 id="c-filt"><a href="#c-filt" class="headerlink" title="c++filt"></a>c++filt</h1><ul><li><code>c++filt</code>可以把mangle的字符串demangle</li></ul><h1 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h1><ul><li><code>ldd</code> shows the shared objects (shared libraries) required by a program or other shared objects</li></ul><h2 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/app/todeav1/test<span class="hljs-variable">$ldd</span> <span class="hljs-built_in">test</span><br>libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00000039a7e00000)<br>libm.so.6 =&gt; /lib64/libm.so.6 (0x0000003996400000)<br>libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00000039a5600000)<br>libc.so.6 =&gt; /lib64/libc.so.6 (0x0000003995800000)<br>/lib64/ld-linux-x86-64.so.2 (0x0000003995400000)<br></code></pre></td></tr></table></figure><ul><li>第一列：程序需要依赖什么库</li><li>第二列：系统提供的与程序需要的库所对应的库</li><li>第三列：库加载的开始地址</li></ul><h1 id="nm"><a href="#nm" class="headerlink" title="nm"></a>nm</h1><p>The nm utility provides information on the symbols being used in an object file or executable file</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>-a或–debug-syms：显示所有的符号，包括debugger-only symbols。</li><li>-B：等同于–format&#x3D;bsd，用来兼容MIPS的nm。</li><li>-C或–demangle：将低级符号名解析(demangle)成用户级名字。这样可以使得C++函数名具有可读性。</li><li>–no-demangle：默认的选项，不需要将低级符号名解析成用户级名。</li><li>-D或–dynamic：显示动态符号。该任选项仅对于动态目标(例如特定类型的共享库)有意义。</li><li>-f format：使用format格式输出。format可以选取bsd、sysv或posix，该选项在GNU的nm中有用。默认为bsd。</li><li>-g或–extern-only：仅显示外部符号。</li><li>-n、-v或–numeric-sort：按符号对应地址的顺序排序，而非按符号名的字符顺序。</li><li>-p或–no-sort：按目标文件中遇到的符号顺序显示，不排序。</li><li>-P或–portability：使用POSIX.2标准输出格式代替默认的输出格式。等同于使用任选项-f posix。</li><li>-s或–print-armap：当列出库中成员的符号时，包含索引。索引的内容包含：哪些模块包含哪些名字的映射。</li><li>-r或–reverse-sort：反转排序的顺序(例如，升序变为降序)。</li><li>–size-sort：按大小排列符号顺序。该大小是按照一个符号的值与它下一个符号的值进行计算的。</li><li>–target&#x3D;bfdname：指定一个目标代码的格式，而非使用系统的默认格式。</li><li>-u或–undefined-only：仅显示没有定义的符号(那些外部符号)。</li><li>–defined-only:仅显示定义的符号。</li><li>-l或–line-numbers：对每个符号，使用调试信息来试图找到文件名和行号。</li><li>-V或–version：显示nm的版本号。</li><li>–help：显示nm的选项。</li></ul><h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><p>对于每一个符号来说，其类型如果是小写的，则表明该符号是local的；大写则表明该符号是global(external)的</p><ul><li>A 该符号的值是绝对的，在以后的链接过程中，不允许进行改变。这样的符号值，常常出现在中断向量表中，例如用符号来表示各个中断向量函数在中断向量表中的位置。</li><li>B 该符号的值出现在非初始化数据段(bss)中。例如，在一个文件中定义全局static int test。则该符号test的类型为b，位于bss section中。其值表示该符号在bss段中的偏移。一般而言，bss段分配于RAM中。</li><li>C 该符号为common。common symbol是未初始话数据段。该符号没有包含于一个普通section中。只有在链接过程中才进行分配。符号的值表示该符号需要的字节数。例如在一个c文件中，定义int test，并且该符号在别的地方会被引用，则该符号类型即为C。否则其类型为B。</li><li>D 该符号位于初始化数据段中。一般来说，分配到data section中。</li><li>G 该符号也位于初始化数据段中。主要用于small object提高访问small data object的一种方式。</li><li>I 该符号是对另一个符号的间接引用。</li><li>N 该符号是一个debugging符号。</li><li>R 该符号位于只读数据区。<ul><li>例如定义全局const int test[] &#x3D; {123, 123};则test就是一个只读数据区的符号。</li><li>值得注意的是，如果在一个函数中定义<code>const char *test = “abc”, const char test_int = 3</code>。使用nm都不会得到符号信息，但是字符串”abc”分配于只读存储器中，test在rodata section中，大小为4。</li></ul></li><li>S 符号位于非初始化数据区，用于small object。</li><li>T 该符号位于代码区text section。</li><li>U 该符号在当前文件中是未定义的，即该符号的定义在别的文件中。 例如，当前文件调用另一个文件中定义的函数，在这个被调用的函数在当前就是未定义的；但是在定义它的文件中类型是T。但是对于全局变量来说，在定义它的文件中，其符号类型为C，在使用它的文件中，其类型为U。</li><li>V 该符号是一个weak object。</li><li>W The symbol is a weak symbol that has not been specifically tagged as a weak object symbol.</li><li>? 该符号类型没有定义</li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><ul><li><code>nm -uCA *.o|grep foo</code>:等价于<code>objdump -t; readelf -s</code></li><li><code>nm -e a.out</code>:对象文件的静态和外部符</li><li><code>nm -xv a.out</code>:以十六进制显示符号大小和值并且按值排序符号</li><li><code>nm -X64 /usr/lib/libc.a</code>:显示 libc.a 中所有 64 位对象符号，忽略所有 32 位对象</li></ul><h1 id="size"><a href="#size" class="headerlink" title="size"></a>size</h1><p>查看程序被映射到内存中的映像所占用的大小信息。</p><h2 id="各个段"><a href="#各个段" class="headerlink" title="各个段"></a>各个段</h2><p>程序映射到内存中，从低地址到高地址依次为下列段:</p><ul><li>代码段： 只读，可共享; 代码段（code segment&#x2F;text segment ）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</li><li>数据段： 储存已被初始化了的静态数据。数据段（data segment ）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</li><li>BSS 段：未初始化的数据段. BSS 段（bss segment ）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS 是英文Block Started by Symbol 的简称。BSS 段属于静态内存分配。</li><li>堆（heap ）： 堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc 等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free 等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）</li><li>栈(stack) ：栈又称堆栈，是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{} ”中定义的变量（但不包括static 声明的变量，static 意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存&#x2F; 恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</li></ul><h1 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h1><ul><li><code>readelf</code>:displays information about ELF format object files<br>这个工具和objdump命令提供的功能类似，但是它显示的信息更为具体，并且它不依赖BFD库</li></ul><h2 id="elf文件种类"><a href="#elf文件种类" class="headerlink" title="elf文件种类"></a>elf文件种类</h2><ul><li>可重定位的对象文件：由汇编器生成的.o文件</li><li>可执行对象文件</li><li>动态库文件</li></ul><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="center">短选项</th><th align="center">长选项</th><th align="center">comment</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">–all</td><td align="center">全部,Equivalent to: -h -l -S -s -r -d -V -A -I</td></tr><tr><td align="center">-h</td><td align="center">–file-header</td><td align="center">文件头Display the ELF file header</td></tr><tr><td align="center">-l</td><td align="center">–program-headers&#x2F;-segments</td><td align="center">程序Display the program headers</td></tr><tr><td align="center">-S</td><td align="center">–section-headers&#x2F;–sections</td><td align="center">段头Display the sections’ header</td></tr><tr><td align="center">-e</td><td align="center">–headers</td><td align="center">全部头Equivalent to: -h -l -S</td></tr><tr><td align="center">-s</td><td align="center">–syms&#x2F;–symbols</td><td align="center">符号表 Display the symbol table</td></tr><tr><td align="center">-n</td><td align="center">–notes</td><td align="center">内核注释 Display the core notes (if present)</td></tr><tr><td align="center">-r</td><td align="center">–relocs</td><td align="center">重定位 Display the relocations (if present)</td></tr><tr><td align="center">-u</td><td align="center">–unwind</td><td align="center">Display the unwind info (if present)</td></tr><tr><td align="center">-d</td><td align="center">–dynamic</td><td align="center">动态段 Display the dynamic segment (if present)</td></tr><tr><td align="center">-V</td><td align="center">–version-info</td><td align="center">版本 Display the version sections (if present)</td></tr><tr><td align="center">-A</td><td align="center">–arch-specific</td><td align="center">CPU构架 Display architecture specific information (if any).</td></tr><tr><td align="center">-D</td><td align="center">–use-dynamic</td><td align="center">动态段 Use the dynamic section info when displaying symbols</td></tr><tr><td align="center">-x</td><td align="center">–hex-dump&#x3D;<number></td><td align="center">显示 段内内容Dump the contents of section <number></td></tr><tr><td align="center">-I</td><td align="center">–histogram</td><td align="center">Display histogram of bucket list lengths</td></tr><tr><td align="center">-W</td><td align="center">–wide</td><td align="center">宽行输出 Allow output width to exceed 80 characters</td></tr><tr><td align="center">-H</td><td align="center">–help</td><td align="center">Display this information</td></tr><tr><td align="center">-v</td><td align="center">–version</td><td align="center">Display the version number of readelf</td></tr></tbody></table><h2 id="常见输出信息"><a href="#常见输出信息" class="headerlink" title="常见输出信息"></a>常见输出信息</h2><ul><li>.text section 里装载了可执行代码；</li><li>.data section 里面装载了被初始化的数据；</li><li>.bss section 里面装载了未被初始化的数据；</li><li>以 .rec 打头的 sections 里面装载了重定位条目；</li><li>.symtab 或者 .dynsym section 里面装载了符号信息；</li><li>.strtab 或者 .dynstr section 里面装载了字符串信息；<br>more:<img src="http://www.cnblogs.com/xmphoenix/archive/2011/10/23/2221879.html"></li></ul><h2 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h2><ul><li><code>readelf -h main| grep Machine</code>:查看程序的可运行的架构平台</li><li><code>readelf -S main|grep debug</code>:编译时是否使用了-g选项</li></ul><h1 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h1><ul><li><code>objdump</code>:displays information about object files</li></ul><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><p>-f 显示文件头信息<br>-D 反汇编所有section (-d反汇编特定section)<br>-h 显示目标文件各个section的头部摘要信息<br>-x 显示所有可用的头信息，包括符号表、重定位入口。-x 等价于 -a -f -h -r -t 同时指定。<br>-i 显示对于 -b 或者 -m 选项可用的架构和目标格式列表。<br>-r 显示文件的重定位入口。如果和-d或者-D一起使用，重定位部分以反汇编后的格式显示出来。<br>-R 显示文件的动态重定位入口，仅仅对于动态目标文件有意义，比如某些共享库。<br>-S 尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数。<br>-t 显示文件的符号表入口。类似于nm -s提供的信息</p><h2 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h2><ul><li><code>objdump -i</code>:查看本机目标结构(大小端)</li><li><code>objdump -d main.o</code>:反汇编程序</li><li><code>objdump -t main.o</code>:显示符号表入口</li><li>below:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ objdump -t -C something.so | c++filt<br>... <span class="hljs-built_in">df</span> *ABS* ... prog.cpp<br>... O .rodata ... CC1<br>... O .rodata ... CC2<br>... F .text ... g()<br>... O .rodata ... (anonymous namespace)::CC3<br>... O .rodata ... (anonymous namespace)::CC4<br>... F .text ... (anonymous namespace)::h()<br>... F .text ... (anonymous namespace)::B::j1()<br>... F .text ... (anonymous namespace)::B::j2()<br></code></pre></td></tr></table></figure></li></ul><h1 id="cppcheck"><a href="#cppcheck" class="headerlink" title="cppcheck"></a>cppcheck</h1><h1 id="gcovr-有bug"><a href="#gcovr-有bug" class="headerlink" title="gcovr(有bug)"></a>gcovr(有bug)</h1><p>覆盖率工具，需要配合g++的<code>--coverage</code>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc -g --coverage program.cpp -o program<br>$ ./program 9<br>first<br>$ gcovr -r --html --html-details &lt;path&gt; <span class="hljs-comment"># generate html</span><br></code></pre></td></tr></table></figure><h1 id="clang-tidy"><a href="#clang-tidy" class="headerlink" title="clang-tidy"></a>clang-tidy</h1><p>代码风格及静态检查</p><h1 id="doxygen"><a href="#doxygen" class="headerlink" title="doxygen"></a>doxygen</h1><p>生成帮助文档，配置文件Doxyfile</p><ul><li><code>doxygen -g</code></li><li>comment the code with <code>///</code> or <code>/** comment *</code></li><li>generate doxygen base configuration file</li></ul><h2 id="注释关键字"><a href="#注释关键字" class="headerlink" title="注释关键字"></a>注释关键字</h2><ul><li><code>@file</code> Document a file</li><li><code>@brief</code> Brief description for an entity</li><li><code>@param</code> Run-time parameter description</li><li><code>@tparam</code> Template parameter description</li><li><code>@return</code> Return value description</li></ul><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">HAVE DOT = YES<br>GRAPHICAL HIERARCHY = YES<br>CALL GRAPH = YES<br>CALLER GRAPH = YES<br></code></pre></td></tr></table></figure><h2 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @file</span><br><span class="hljs-comment">* @copyright MyProject</span><br><span class="hljs-comment">* license BSD3, Apache, MIT, etc.</span><br><span class="hljs-comment">* @author MySelf</span><br><span class="hljs-comment">* @version v3.14159265359</span><br><span class="hljs-comment">* @date March, 2018</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/// @brief Namespace brief description</span><br><span class="hljs-keyword">namespace</span> my_namespace &#123;<br><span class="hljs-comment">/// @brief &quot;Class brief description&quot;</span><br><span class="hljs-comment">/// @tparam R &quot;Class template for&quot;</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @brief &quot;What the function does?&quot;</span><br><span class="hljs-comment">* @details &quot;Some additional details&quot;,</span><br><span class="hljs-comment">* Latex/MathJax: $\sqrt a$</span><br><span class="hljs-comment">* @tparam T Type of input and output</span><br><span class="hljs-comment">* @param[in] input Input array</span><br><span class="hljs-comment">* @param[out] output Output array</span><br><span class="hljs-comment">* @return `true` if correct,</span><br><span class="hljs-comment">* `false` otherwise</span><br><span class="hljs-comment">* @remark it is *useful* if ...</span><br><span class="hljs-comment">* @warning the behavior is **undefined** if</span><br><span class="hljs-comment">* @p input is `nullptr`</span><br><span class="hljs-comment">* @see related_function</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">my_function</span><span class="hljs-params">(<span class="hljs-type">const</span> T* input, T* output)</span></span>;<br><span class="hljs-comment">/// @brief</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">related_function</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h1 id="cloc"><a href="#cloc" class="headerlink" title="cloc"></a>cloc</h1><p>行数统计信息</p><h1 id="lizard"><a href="#lizard" class="headerlink" title="lizard"></a>lizard</h1><p>圈复杂度分析工具<br><code>lizard my_project/</code></p><h2 id="example-4"><a href="#example-4" class="headerlink" title="example"></a>example</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$lizard</span> my_project/<br>==============================================================<br>NLOC CCN token param <span class="hljs-keyword">function</span>@line@file<br>--------------------------------------------------------------<br>10 2 29 2 start_new_player@26@./html_game.c<br>6 1 3 0 set_shutdown_flag@449@./httpd.c<br>24 3 61 1 server_main@454@./httpd.c<br>--------------------------------------------------------------<br></code></pre></td></tr></table></figure><ul><li>CCN:圈复杂度</li><li>NLOC：无注释的代码行数</li><li>token：number of conditional statements</li></ul><h1 id="clang-format"><a href="#clang-format" class="headerlink" title="clang-format"></a>clang-format</h1><h1 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h1><p>pstack是一个脚本工具，可显示每个进程的栈跟踪。pstack命令必须由相应进程的属主或root运行<br><code>pstrack &lt;program-pid&gt;</code></p><h1 id="compiler-explorer"><a href="#compiler-explorer" class="headerlink" title="compiler explorer"></a>compiler explorer</h1><p>编码实时二进制查看</p><h1 id="cppinsights"><a href="#cppinsights" class="headerlink" title="cppinsights"></a>cppinsights</h1><p>编译器实时查看</p><h1 id="AI补全工具"><a href="#AI补全工具" class="headerlink" title="AI补全工具"></a>AI补全工具</h1><ul><li>CoPilot</li><li>TabNine</li><li>Kite</li></ul><h1 id="代码在线搜索"><a href="#代码在线搜索" class="headerlink" title="代码在线搜索"></a>代码在线搜索</h1><ul><li><a href="https://searchcode.com/">searchcode</a></li><li><a href="https://grep.app/">grep.app</a></li></ul><h1 id="在线代码段性能比较"><a href="#在线代码段性能比较" class="headerlink" title="在线代码段性能比较"></a>在线代码段性能比较</h1><ul><li><a href="http://quick-bench.com/">benchmark</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>translation_unit</title>
    <link href="/2024/03/30/translation-unit/"/>
    <url>/2024/03/30/translation-unit/</url>
    
    <content type="html"><![CDATA[<h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><p><img src="/images/compile_process.png"></p><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>static修饰的全局变量或函数旨在当前文件可见属于内部链接</li><li>非static修饰的全局变量和函数在不同编译单元，如果有相同的名字，会产生编译错误</li><li>static的局部变量的是否内外部连接依赖于所在函数的连接属性</li></ul><h1 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h1><ul><li>extern修饰的变量或函数必须定义在唯一一个编译单元</li><li>函数默认就是extern，无需加extern修饰符</li></ul><h1 id="const和constexpr"><a href="#const和constexpr" class="headerlink" title="const和constexpr"></a>const和constexpr</h1><ul><li>const和constexpr变量是内部连接(inline修饰符除外)</li><li>const变量在不同编译单元，有不同的地址</li><li>最好不要和inline一起用，尽管会使const成external linkage,但会造成可能undefined behaviour</li></ul><h1 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h1><ul><li>inline修饰的函数或变量，可以被多次包含而不被编译器报重定义错误</li><li>inline entities cannot be exported, namely, used by other translation units even<br>if they have external linkage (related warning: -Wundefined-inline )</li><li>inline doesn’t mean that the compiler is forced to perform function inlining. It<br>just increases the optimization heuristic threshold</li></ul><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><ul><li>匿名的namespace是内部连接</li></ul><h1 id="No-Linkage"><a href="#No-Linkage" class="headerlink" title="No Linkage"></a>No Linkage</h1><ul><li>局部变量（非static）</li><li>函数</li><li>类</li></ul><h1 id="Internal-Linkage"><a href="#Internal-Linkage" class="headerlink" title="Internal Linkage"></a>Internal Linkage</h1><ul><li>static 全局变量</li><li>const或constexpr(non-inline,non-template,non-specialized,non-extern)</li><li>static 函数</li><li>匿名namespace内的所有内容包括类</li></ul><h1 id="External-Linkage"><a href="#External-Linkage" class="headerlink" title="External Linkage"></a>External Linkage</h1><ul><li>没修饰符的全局变量(extern除外)</li><li>template&#x2F;specialized的全局变量</li><li>inline的全局变量 const????????</li><li>没有修饰符的函数</li><li>template&#x2F;specialized的函数</li><li>枚举，类以及它们的静态、非静态成员</li></ul><h1 id="ODR"><a href="#ODR" class="headerlink" title="ODR"></a>ODR</h1><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><ol><li>In any (single) translation unit, a template, type, function, or object, cannot<br>have more than one definition</li></ol><ul><li>Compiler error otherwise</li><li>Any number of declarations are allowed</li></ul><ol start="2"><li>In the entire program, an object or non-inline function cannot have more<br>than one definition</li></ol><ul><li>Multiple definitions linking error otherwise</li><li>Entities with internal linkage in different translation units are allowed, even if their<br>names and types are the same</li></ul><ol start="3"><li>A template, type, or inline functions&#x2F;variables, can be defined in more than<br>one translation unit. For a given entity, each definition must be the same</li></ol><ul><li>Undefined behavior otherwise(为啥不报错误)</li><li>Common case: same header included in multiple translation units</li></ul><h2 id="编译器辅助flag"><a href="#编译器辅助flag" class="headerlink" title="编译器辅助flag"></a>编译器辅助flag</h2><p>以下flag可以帮助检查rule</p><ul><li>-detect-odr-violations flag for gold&#x2F;llvm linker</li><li>-Wodr -flto flag for GCC</li><li>Clang address sanitizer + ASAN OPTIONS&#x3D;detect odr violation&#x3D;2</li></ul><h2 id="UnknownTitle"><a href="#UnknownTitle" class="headerlink" title="UnknownTitle"></a>UnknownTitle</h2><ul><li>模板，类型或inline 函数和变量可以在不同单元定义(定义肯定是一样的，最简单例子头文件可被多个文件包含)<ul><li>连接器会移除inline&#x2F;template多余的定义</li><li>inline &#x2F; template entities have the same linkage as the corresponding variables&#x2F;functions without the specifier</li><li>inline &#x2F; template entities have a unique memory address across all translation units</li></ul></li></ul><h2 id="function-template-case"><a href="#function-template-case" class="headerlink" title="function template case"></a>function template case</h2><ul><li>case 1<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//==========================</span><br>header.hpp:<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T x)</span> </span>&#123;&#125;; <span class="hljs-comment">// DECLARATION and DEFINITION</span><br><span class="hljs-comment">//===========================</span><br>main.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// call f&lt;int&gt;()</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">3.3f</span>); <span class="hljs-comment">// call f&lt;float&gt;()</span><br><span class="hljs-built_in">f</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// call f&lt;char&gt;()</span><br>&#125;<br><span class="hljs-comment">//=====================================================</span><br>source.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// call f&lt;int&gt;()</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">3.3f</span>); <span class="hljs-comment">// call f&lt;float&gt;()</span><br><span class="hljs-built_in">f</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// call f&lt;char&gt;()</span><br>&#125;<br><span class="hljs-comment">//=====================================================</span><br><span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;() , <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">float</span>&gt;() , <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">char</span>&gt;() <span class="hljs-function">are generated two <span class="hljs-title">times</span> <span class="hljs-params">(in both translation units)</span></span><br></code></pre></td></tr></table></figure></li><li>case 2<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//==================================</span><br>header.hpp:<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T x)</span></span>; <span class="hljs-comment">// DECLARATION</span><br><span class="hljs-comment">//=================================</span><br>main.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// call f&lt;int&gt;()</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">3.3f</span>); <span class="hljs-comment">// call f&lt;float&gt;()</span><br><span class="hljs-comment">// f(&#x27;a&#x27;); // linking error</span><br>&#125; <span class="hljs-comment">// the specialization does not exist</span><br><span class="hljs-comment">//=================================</span><br>source.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T x)</span> </span>&#123;&#125; <span class="hljs-comment">// DEFINITION</span><br><span class="hljs-comment">// template SPECIALIZATION</span><br><span class="hljs-keyword">template</span> <span class="hljs-type">void</span> <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-type">int</span>);<br><span class="hljs-keyword">template</span> <span class="hljs-type">void</span> <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">float</span>&gt;(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// any explicit instance is also</span><br><span class="hljs-comment">// fine, e.g. f&lt;int&gt;(3)</span><br></code></pre></td></tr></table></figure></li><li>case 3<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//==================================</span><br>header.hpp:<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// DECLARATION and DEFINITION</span><br><span class="hljs-comment">//==================================</span><br>main.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>&lt;<span class="hljs-type">char</span>&gt;(); <span class="hljs-comment">// use the generic function</span><br><span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;(); <span class="hljs-comment">// use the specialization</span><br>&#125;<br><span class="hljs-comment">//=================================</span><br>source.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-type">void</span> <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;() &#123;&#125; <span class="hljs-comment">// SPECIALIZATION</span><br><span class="hljs-comment">// DEFINITION</span><br></code></pre></td></tr></table></figure></li><li>case 4<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//===============================</span><br>header.hpp:<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// DECLARATION and DEFINITION</span><br><span class="hljs-comment">//============================</span><br>main.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">template</span> <span class="hljs-type">void</span> <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;();<br><span class="hljs-comment">// f&lt;int&gt;() is not generated by the</span><br><span class="hljs-comment">// compiler in this translation unit</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;();<br>&#125;<br><span class="hljs-comment">//==========================</span><br>source.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>&gt;();<br>&#125;<br><span class="hljs-comment">// or &#x27;template void f&lt;int&gt;(int);&#x27;</span><br></code></pre></td></tr></table></figure></li><li>case 5<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//===================</span><br>header.hpp:<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// DECLARATION</span><br><span class="hljs-comment">// template&lt;&gt; // linking error</span><br><span class="hljs-comment">// void f&lt;int&gt;() &#123;&#125; // multiple definitions -&gt; included twice</span><br><span class="hljs-comment">// full specializations are like standard functions</span><br><span class="hljs-comment">// it can be solved by adding &quot;inline&quot;</span><br><span class="hljs-comment">//===================</span><br>main.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-comment">//=====================</span><br>source.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-comment">// some code</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="class-template-case"><a href="#class-template-case" class="headerlink" title="class template case"></a>class template case</h2><ul><li>case 1<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//=====================header.hpp:</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>T x = <span class="hljs-number">3</span>; <span class="hljs-comment">// &quot;inline&quot; DEFINITION</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125;; <span class="hljs-comment">// &quot;inline&quot; DEFINITION</span><br>&#125;;<br><span class="hljs-comment">//====================main.cpp:</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>A&lt;<span class="hljs-type">int</span>&gt; a1; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">float</span>&gt; a2; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">char</span>&gt; a3; <span class="hljs-comment">// ok</span><br>&#125;<br><span class="hljs-comment">//===================source.cpp:</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> </span>&#123;<br>A&lt;<span class="hljs-type">int</span>&gt; a1; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">float</span>&gt; a2; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">char</span>&gt; a3; <span class="hljs-comment">// ok</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>case 2<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//==========================header.hpp:</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>T x;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// DECLARATION</span><br>&#125;;<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.i.hpp&quot;</span></span><br><span class="hljs-comment">//==========================header.i.hpp:</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>T A&lt;T&gt;::x = <span class="hljs-number">3</span>; <span class="hljs-comment">// DEFINITION</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> A&lt;T&gt;::<span class="hljs-built_in">f</span>() &#123;&#125; <span class="hljs-comment">// DEFINITION</span><br><span class="hljs-comment">//==========================main.cpp:</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>A&lt;<span class="hljs-type">int</span>&gt; a1; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">float</span>&gt; a2; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">char</span>&gt; a3; <span class="hljs-comment">// ok</span><br>&#125;<br><span class="hljs-comment">//==========================source.cpp:</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> </span>&#123;<br>A&lt;<span class="hljs-type">int</span>&gt; a1; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">float</span>&gt; a2; <span class="hljs-comment">// ok</span><br>A&lt;<span class="hljs-type">char</span>&gt; a3; <span class="hljs-comment">// ok</span><br>&#125; <br></code></pre></td></tr></table></figure></li><li>case 3<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//============================header.hpp:</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>T x;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// DECLARATION</span><br>&#125;;<br><span class="hljs-comment">//============================main.cpp:</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>A&lt;<span class="hljs-type">int</span>&gt; a1; <span class="hljs-comment">// ok</span><br><span class="hljs-comment">// A&lt;char&gt; a2; // linking error</span><br>&#125; <span class="hljs-comment">// &#x27;f()&#x27; is undefined</span><br><span class="hljs-comment">// while &#x27;x&#x27; has an undefined</span><br><span class="hljs-comment">// value for A&lt;char&gt;</span><br>source.cpp:<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;header.hpp&quot;</span></span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">int</span> A&lt;T&gt;::x = <span class="hljs-number">3</span>; <span class="hljs-comment">// initialization</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> A&lt;T&gt;::<span class="hljs-built_in">f</span>() &#123;&#125; <span class="hljs-comment">// DEFINITION</span><br><span class="hljs-comment">// generate template special</span><br><span class="hljs-keyword">template</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&lt;<span class="hljs-type">int</span>&gt;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h1><ul><li>If the same identifier within a translation unit appears with both internal and external linkage,<br>the behavior is undefined</li><li>inline , constexpr (which implies inline for functions) functions are not<br>accessible by other translation units even with external linkage</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++_Template</title>
    <link href="/2024/03/24/C-Template/"/>
    <url>/2024/03/24/C-Template/</url>
    
    <content type="html"><![CDATA[<h1 id="Class-Template-Deduction-Guide"><a href="#Class-Template-Deduction-Guide" class="headerlink" title="Class Template-Deduction Guide"></a>Class Template-Deduction Guide</h1><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span> <span class="hljs-comment">// std::remove_reference_t</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> <span class="hljs-comment">// std::vector</span></span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Container</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Iter&gt;</span><br><span class="hljs-function"><span class="hljs-title">Container</span><span class="hljs-params">(Iter beg, Iter end)</span> </span>&#123;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Iter&gt;</span><br><span class="hljs-function"><span class="hljs-title">Container</span><span class="hljs-params">(Iter b, Iter e)</span> -&gt; <span class="hljs-comment">// deduction guide</span></span><br><span class="hljs-function">Container&lt;<span class="hljs-keyword">typename</span> std::iterator_traits&lt;Iter&gt;::value_type&gt;</span>;<br>std::vector v&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>Container c&#123;v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()&#125;; <span class="hljs-comment">// construct &#x27;Container&lt;int&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyString</span> &#123;<br><span class="hljs-built_in">MyString</span>(T) &#123;&#125;<br>&#125;;<br><span class="hljs-comment">// constructor class instantiation</span><br><span class="hljs-built_in">MyString</span>(<span class="hljs-type">char</span> <span class="hljs-type">const</span>*) -&gt; MyString&lt;std::string&gt;; <span class="hljs-comment">// deduction guide</span><br>MyString s&#123;<span class="hljs-string">&quot;abc&quot;</span>&#125;; <span class="hljs-comment">// construct &#x27;MyString&lt;std::string&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="类与成员函数"><a href="#类与成员函数" class="headerlink" title="类与成员函数"></a>类与成员函数</h1><p>有两种方式：</p><ul><li>Generic class + generic function</li><li>Full class specialization + generic&#x2F;full specialization function<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> Y&gt;</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> Y&gt;<br><span class="hljs-type">void</span> A&lt;T, R&gt;::<span class="hljs-built_in">f</span>() &#123;&#125;<br><span class="hljs-comment">// ok, A&lt;T, R&gt; and f&lt;X, Y&gt; are not specialized</span><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> Y&gt;<br><span class="hljs-type">void</span> A&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">f</span>() &#123;&#125;<br><span class="hljs-comment">// ok, A&lt;int, int&gt; is full specialized</span><br><span class="hljs-comment">// ok, f&lt;X, Y&gt; is not specialized</span><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-type">void</span> A&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;() &#123;&#125;<br><span class="hljs-comment">// ok, A&lt;int, int&gt; and f&lt;int, int&gt; are full specialized</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> Y&gt;<br><span class="hljs-type">void</span> A&lt;T, <span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">f</span>() &#123;&#125;<br><span class="hljs-comment">// error A&lt;T, int&gt; is partially specialized</span><br><span class="hljs-comment">// (A&lt;T, int&gt; class must be defined before)</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> X&gt;<br><span class="hljs-type">void</span> A&lt;T, R&gt;::<span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>, X&gt;() &#123;&#125;<br><span class="hljs-comment">// error function members cannot be partially specialized</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt;<br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-type">void</span> A&lt;T, R&gt;::<span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;() &#123;&#125;<br><span class="hljs-comment">// error function members of a non-specialized class cannot be specialized</span><br><span class="hljs-comment">// (requires a binding to a specific template instantiation at compile-time)</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="enable-if"><a href="#enable-if" class="headerlink" title="enable_if"></a>enable_if</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">bool</span> Condition, <span class="hljs-keyword">typename</span> T = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> enable_if &#123;<br><span class="hljs-comment">// &quot;type&quot; is not defined if &quot;Condition == false&quot;</span><br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">enable_if</span>&lt;<span class="hljs-literal">true</span>, T&gt; &#123;<br>    <span class="hljs-keyword">using</span> type = T;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="array-pointer"><a href="#array-pointer" class="headerlink" title="array&#x2F;pointer"></a>array&#x2F;pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-type">int</span> Size&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T (&amp;array)[Size])</span> </span>&#123;&#125; <span class="hljs-comment">// (1)</span><br><span class="hljs-comment">//template&lt;typename T, int Size&gt;</span><br><span class="hljs-comment">//void f(T* array) &#123;&#125; // (2)</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>std::<span class="hljs-type">enable_if_t</span>&lt;std::is_pointer_v&lt;T&gt;&gt;<br><span class="hljs-built_in">f</span>(T ptr) &#123;&#125; <span class="hljs-comment">// (3)</span><br><span class="hljs-type">int</span> array[<span class="hljs-number">3</span>];<br><span class="hljs-built_in">f</span>(array); <span class="hljs-comment">// It is not possible to call (1) if (2) is present</span><br><span class="hljs-comment">// The reason is that &#x27;array&#x27; decays to a pointer</span><br><span class="hljs-comment">// Now with (3), the code calls (1)</span><br></code></pre></td></tr></table></figure><h2 id="检查类是否含有某个成员"><a href="#检查类是否含有某个成员" class="headerlink" title="检查类是否含有某个成员"></a>检查类是否含有某个成员</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br><span class="hljs-keyword">using</span> type = <span class="hljs-type">int</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span> &#123;&#125;;<br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span></span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> has_x : std::false_type &#123;&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">has_x</span>&lt;T, <span class="hljs-keyword">decltype</span>((<span class="hljs-type">void</span>) T::x)&gt; : std::true_type &#123;&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> has_y : std::false_type &#123;&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">has_y</span>&lt;T, <span class="hljs-keyword">decltype</span>((<span class="hljs-type">void</span>) std::<span class="hljs-built_in">declval</span>&lt;T&gt;().y)&gt; : std::true_type &#123;&#125;;<br>has_x&lt; A &gt;::value; <span class="hljs-comment">// returns true</span><br>has_x&lt; B &gt;::value; <span class="hljs-comment">// returns false</span><br>has_y&lt; A &gt;::value; <span class="hljs-comment">// returns true</span><br>has_y&lt; B &gt;::value; <span class="hljs-comment">// returns false</span><br></code></pre></td></tr></table></figure><h2 id="判断是否定义某个类型"><a href="#判断是否定义某个类型" class="headerlink" title="判断是否定义某个类型"></a>判断是否定义某个类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>...&gt;<br><span class="hljs-keyword">using</span> <span class="hljs-type">void_t</span> = <span class="hljs-type">void</span>; <span class="hljs-comment">// included in C++17 &lt;utility&gt;</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> has_type : std::false_type &#123;&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">has_type</span>&lt;T,<br>std::<span class="hljs-type">void_t</span>&lt;<span class="hljs-keyword">typename</span> T::type&gt; &gt; : std::true_type &#123;&#125;;<br>has_type&lt; A &gt;::value; <span class="hljs-comment">// returns true</span><br>has_type&lt; B &gt;::value; <span class="hljs-comment">// returns false</span><br></code></pre></td></tr></table></figure><h2 id="判断是否支持流操作"><a href="#判断是否支持流操作" class="headerlink" title="判断是否支持流操作"></a>判断是否支持流操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> EnableP = <span class="hljs-keyword">decltype</span>( std::<span class="hljs-built_in">declval</span>&lt;std::ostream&amp;&gt;() &lt;&lt;<br>std::<span class="hljs-built_in">declval</span>&lt;T&gt;() );<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> is_stream_supported : std::false_type &#123;&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_stream_supported</span>&lt;T, EnableP&lt;T&gt;&gt; : std::true_type &#123;&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;&#125;;<br>is_stream_supported&lt;<span class="hljs-type">int</span>&gt;::value; <span class="hljs-comment">// returns true</span><br>is_stream_supported&lt;A&gt;::value; <span class="hljs-comment">// returns false</span><br></code></pre></td></tr></table></figure><h1 id="模板参数类型"><a href="#模板参数类型" class="headerlink" title="模板参数类型"></a>模板参数类型</h1><ul><li>integral type</li><li>enum, enum class</li><li>floating-point type(c++20)</li><li>auto placeholder(c++ 17)</li><li>class literals and concepts(c++20)</li><li>typename一般类型</li><li>function</li><li>reference&#x2F;pointer to global static function or object</li><li>pointer to member type</li><li>nullptr(c++14)</li></ul><h2 id="array-pointer-1"><a href="#array-pointer-1" class="headerlink" title="array&#x2F;pointer"></a>array&#x2F;pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span>* ptr&gt; <span class="hljs-comment">// pointer</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; ptr[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-built_in">int</span> (&amp;array)[<span class="hljs-number">3</span>]&gt; <span class="hljs-comment">// reference</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; array[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-type">int</span> array[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;; <span class="hljs-comment">// global</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">f</span>&lt;array&gt;(); <span class="hljs-comment">// print 2</span><br><span class="hljs-built_in">g</span>&lt;array&gt;(); <span class="hljs-comment">// print 2</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="class-member"><a href="#class-member" class="headerlink" title="class member"></a>class member</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> y[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> A::*x&gt; <span class="hljs-comment">// pointer to</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">h1</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// member type</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-built_in">int</span> (A::*y)[<span class="hljs-number">3</span>]&gt; <span class="hljs-comment">// pointer to</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">h2</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// member type</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">h1</span>&lt;&amp;A::x&gt;();<br><span class="hljs-built_in">h2</span>&lt;&amp;A::y&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="function-type"><a href="#function-type" class="headerlink" title="function type"></a>function type</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-built_in">int</span> (*F)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; <span class="hljs-comment">// &lt;-- signature of &quot;f&quot;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">apply1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">F</span>(a, b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a + b; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a * b; &#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">decltype</span>(f) F&gt; <span class="hljs-comment">// alternative syntax</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">apply2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">F</span>(a, b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">apply1</span>&lt;f&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// return 5</span><br><span class="hljs-built_in">apply2</span>&lt;g&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// return 6</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="type-traits"><a href="#type-traits" class="headerlink" title="type_traits"></a>type_traits</h1><ul><li><code>#include&lt;type_traits&gt;</code></li><li>std::is_integral<T>::value 等价于 std::is_integral_v<T></li></ul><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">is_integral</td><td align="center">checks for an integral type(bool,char,unsigned char,short,int,long,etc)</td></tr><tr><td align="center">is_floating_point</td><td align="center">checks for a floating-point type(float,double)</td></tr><tr><td align="center">is_arithmetic</td><td align="center">checks for a integral or floating-point type</td></tr><tr><td align="center">is_signed</td><td align="center">checks for a signed type</td></tr><tr><td align="center">is_unsigned</td><td align="center">checks for an unsigned type</td></tr><tr><td align="center">is_enum</td><td align="center">checks for an enumerator type(enum,enum class)</td></tr><tr><td align="center">is_void</td><td align="center">checks for(void)</td></tr><tr><td align="center">is_pointer</td><td align="center">checks for a pointer(<code>T*</code>)</td></tr><tr><td align="center">is_null_pointer</td><td align="center"></td></tr><tr><td align="center">is_reference</td><td align="center">checks for a reference(T&amp;)</td></tr><tr><td align="center">is_array</td><td align="center">checks for an array(<code>T (&amp;)[N]</code>)</td></tr><tr><td align="center">is_function</td><td align="center"></td></tr><tr><td align="center">is_class</td><td align="center">checks for a class type(struct class)</td></tr><tr><td align="center">is_abstract</td><td align="center">checks for a class with at least one pure virtual function</td></tr><tr><td align="center">is_polymorphic</td><td align="center">checks for a class with at least one virtual function</td></tr><tr><td align="center">is_const</td><td align="center"></td></tr><tr><td align="center">is_same&lt;T,R&gt;</td><td align="center">checks if T and R are the same type</td></tr><tr><td align="center">is_base_of&lt;T,R&gt;</td><td align="center">checks if T is base of R</td></tr><tr><td align="center">is_convertible&lt;T,R&gt;</td><td align="center">checks if T can be converted to R</td></tr></tbody></table><ul><li>using U &#x3D; typename std::make_unsigned<int>::type 等价于 std::make_unsigned_t<T>;</li></ul><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">make_signed</td><td align="center">make a signed type</td></tr><tr><td align="center">make_unsigned</td><td align="center">makes an unsigned type</td></tr><tr><td align="center">remove_pointer</td><td align="center">remove pointer(<code>T*-&gt;T</code>)</td></tr><tr><td align="center">add_pointer</td><td align="center">add pointer(<code>T-&gt;T*</code>)</td></tr><tr><td align="center">remove_reference</td><td align="center">remove reference(<code>T*-&gt;T</code>)</td></tr><tr><td align="center">add_lvalue_reference</td><td align="center">add reference(T-&gt;T&amp;)</td></tr><tr><td align="center">remove_const</td><td align="center">remove const</td></tr><tr><td align="center">add_const</td><td align="center">add const</td></tr><tr><td align="center">common_type&lt;T,R&gt;</td><td align="center">(see the example)</td></tr><tr><td align="center">conditional&lt;pred,T,R&gt;</td><td align="center">returns T if pred is true,R otherwise</td></tr><tr><td align="center">decay<T></td><td align="center">returns the same type as a function parameter passed by-value</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span></span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt;<br>std::<span class="hljs-type">common_type_t</span>&lt;R, T&gt; <span class="hljs-comment">// &lt;-- return type</span><br><span class="hljs-built_in">add</span>(T a, R b) &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-comment">// we can also use decltype to derive the result type</span><br><span class="hljs-keyword">using</span> <span class="hljs-type">result_t</span> = <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4.0f</span>));<br><span class="hljs-type">result_t</span> x = <span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4.0f</span>);<br></code></pre></td></tr></table></figure><ul><li>如果 T 是一个引用类型（如 int&amp;），std::decay<T>::type 就是 int。</li><li>如果 T 是一个数组类型（如 int[5]），std::decay<T>::type 就是 int*。</li><li>如果 T 是一个函数类型，std::decay<T>::type 就是相应的函数指针类型。</li><li>如果 T 是一个 cv-qualified 类型（如 const int 或 volatile int），std::decay<T>::type 就是没有这些限定符的 int。</li></ul><h1 id="Variadic-Template"><a href="#Variadic-Template" class="headerlink" title="Variadic Template"></a>Variadic Template</h1><ul><li>可以用<code>sizeof...(args)</code>得出个数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// BASE CASE</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T a, R b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-comment">// RECURSIVE CASE</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... TArgs&gt; <span class="hljs-comment">// Variadic typename</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T a, TArgs... args)</span> </span>&#123; <span class="hljs-comment">// Typename expansion</span><br><span class="hljs-keyword">return</span> a + <span class="hljs-built_in">add</span>(args...); <span class="hljs-comment">// Arguments expansion</span><br>&#125;<br><span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3.0</span>); <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 9</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 14</span><br><span class="hljs-comment">// add(2); // compile error the base case accepts only two arguments</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="存到数组"><a href="#存到数组" class="headerlink" title="存到数组"></a>存到数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... TArgs&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(TArgs... args)</span> </span>&#123;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> Size = <span class="hljs-keyword">sizeof</span>...(args);<br><span class="hljs-type">int</span> array[] = &#123;args...&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : array)<br>cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// print &quot;1 2 3&quot;</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// print &quot;1 2 3 4&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Folding-Expression"><a href="#Folding-Expression" class="headerlink" title="Folding Expression"></a>Folding Expression</h2><ul><li>Example1<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add_unary</span><span class="hljs-params">(Args... args)</span> </span>&#123; <span class="hljs-comment">// Unary folding</span><br><span class="hljs-keyword">return</span> (... + args); <span class="hljs-comment">// unfold: 1 + 2.0f + 3ull</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add_binary</span><span class="hljs-params">(Args... args)</span> </span>&#123; <span class="hljs-comment">// Binary folding</span><br><span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> + ... + args); <span class="hljs-comment">// unfold: 1 + 1 + 2.0f + 3ull</span><br>&#125;<br><span class="hljs-built_in">add_unary</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2.0f</span>, <span class="hljs-number">3ll</span>); <span class="hljs-comment">// returns 6.0f (float)</span><br><span class="hljs-built_in">add_binary</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2.0f</span>, <span class="hljs-number">3ll</span>); <span class="hljs-comment">// returns 7.0f (float) </span><br></code></pre></td></tr></table></figure></li><li>Example2<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">square</span><span class="hljs-params">(T value)</span> </span>&#123; <span class="hljs-keyword">return</span> value * value; &#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... TArgs&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add_square</span><span class="hljs-params">(TArgs... args)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">square</span>(args) + ...); <span class="hljs-comment">// square() is applied to each</span><br>&#125; <span class="hljs-comment">// variadic argument</span><br><span class="hljs-built_in">add_square</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3.0f</span>); <span class="hljs-comment">// returns 17.0f</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="获取函数的形参个数"><a href="#获取函数的形参个数" class="headerlink" title="获取函数的形参个数"></a>获取函数的形参个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>;<br><span class="hljs-comment">// generic function pointer</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>&lt;<span class="hljs-built_in">R</span>(*)(Args...)&gt; &#123;<br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = <span class="hljs-keyword">sizeof</span>...(Args);<br>&#125;;<br><span class="hljs-comment">// generic function reference</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>&lt;<span class="hljs-built_in">R</span>(&amp;)(Args...)&gt; &#123;<br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = <span class="hljs-keyword">sizeof</span>...(Args);<br>&#125;;<br><span class="hljs-comment">// generic function object</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>&lt;<span class="hljs-built_in">R</span>(Args...)&gt; &#123;<br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = <span class="hljs-keyword">sizeof</span>...(Args);<br>&#125;; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>, <span class="hljs-type">double</span>)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// function object</span><br>GetArity&lt;<span class="hljs-keyword">decltype</span>(f)&gt;::value;<br><span class="hljs-keyword">auto</span>&amp; g = f;<br><span class="hljs-comment">// function reference</span><br>GetArity&lt;<span class="hljs-keyword">decltype</span>(g)&gt;::value;<br><span class="hljs-comment">// function reference</span><br>GetArity&lt;<span class="hljs-keyword">decltype</span>((f))&gt;::value;<br><span class="hljs-keyword">auto</span>* h = f;<br><span class="hljs-comment">// function pointer</span><br>GetArity&lt;<span class="hljs-keyword">decltype</span>(h)&gt;::value;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获得lamda或operator-的参数个数"><a href="#获得lamda或operator-的参数个数" class="headerlink" title="获得lamda或operator()的参数个数"></a>获得lamda或operator()的参数个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span> C, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>&lt;<span class="hljs-built_in">R</span>(C::*)(Args...)&gt; &#123; <span class="hljs-comment">// class member</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = <span class="hljs-keyword">sizeof</span>...(Args);<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span> C, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GetArity</span>&lt;<span class="hljs-built_in">R</span>(C::*)(Args...) <span class="hljs-type">const</span>&gt; &#123; <span class="hljs-comment">// &quot;const&quot; class member</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = <span class="hljs-keyword">sizeof</span>...(Args);<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">char</span>, <span class="hljs-type">char</span>)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">char</span>, <span class="hljs-type">char</span>)</span> <span class="hljs-type">const</span> </span>&#123;&#125;<br>&#125;;<br>GetArity&lt;A&gt;::value; <span class="hljs-comment">// call GetArity&lt;R(C::*)(Args...)&gt;</span><br>GetArity&lt;<span class="hljs-type">const</span> A&gt;::value; <span class="hljs-comment">// call GetArity&lt;R(C::*)(Args...) const&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Concepts和requires-c-20"><a href="#Concepts和requires-c-20" class="headerlink" title="Concepts和requires(c++20)"></a>Concepts和requires(c++20)</h1><h2 id="concepts语法"><a href="#concepts语法" class="headerlink" title="concepts语法"></a>concepts语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">[<span class="hljs-keyword">template</span> arguments]<br><span class="hljs-keyword">concept</span> [name] = [compile-time boolean expression];<br></code></pre></td></tr></table></figure><h2 id="concepts例子"><a href="#concepts例子" class="headerlink" title="concepts例子"></a>concepts例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Arithmetic = std::is_arithmetic_v&lt;T&gt;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Arithmetic T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T valueA, T valueB)</span> </span>&#123;<br><span class="hljs-keyword">return</span> valueA + valueB;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="requires-clause语法"><a href="#requires-clause语法" class="headerlink" title="requires clause语法"></a>requires clause语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">requires</span> [compile-time boolean expression <span class="hljs-keyword">or</span> Concept]<br></code></pre></td></tr></table></figure><h3 id="concept-example"><a href="#concept-example" class="headerlink" title="concept example"></a>concept example</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">requires</span> Arithmetic&lt;T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T valueA, T valueB)</span> </span>&#123;<br><span class="hljs-keyword">return</span> valueA + valueB;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bool-expression-example"><a href="#bool-expression-example" class="headerlink" title="bool expression example"></a>bool expression example</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T valueA, T valueB)</span> <span class="hljs-title">requires</span> <span class="hljs-params">(<span class="hljs-keyword">sizeof</span>(T) == <span class="hljs-number">4</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> valueA + valueB;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="requires-expression语法"><a href="#requires-expression语法" class="headerlink" title="requires expression语法"></a>requires expression语法</h2><p>A requires expression is a compile-time expression of type bool that defines the<br>constraints on template arguments</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">requires</span> [(arguments)] &#123;<br>[SFINAE contrain]; <span class="hljs-comment">// or</span><br><span class="hljs-keyword">requires</span> [predicate];<br>&#125; -&gt; <span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> MyConcept = <span class="hljs-built_in">requires</span> (T a, T b) &#123; <span class="hljs-comment">// First case: SFINAE constrains</span><br>a + b; <span class="hljs-comment">// Req. 1 - support add operator</span><br>a[<span class="hljs-number">0</span>]; <span class="hljs-comment">// Req. 2 - support subscript operator</span><br>a.x; <span class="hljs-comment">// Req. 3 - has &quot;x&quot; data member</span><br>a.<span class="hljs-built_in">f</span>(); <span class="hljs-comment">// Req. 4 - has &quot;f&quot; function member</span><br><span class="hljs-keyword">typename</span> T::type; <span class="hljs-comment">// Req. 5 - has &quot;type&quot; field</span><br>&#125;;<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concept&gt;</span></span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> MyConcept2 = <span class="hljs-built_in">requires</span> (T a, T b) &#123;<br>&#123;*a + <span class="hljs-number">1</span>&#125; -&gt; std::convertible_to&lt;<span class="hljs-type">float</span>&gt;; <span class="hljs-comment">// Req. 6 - can be deferred and the sum</span><br><span class="hljs-comment">// with an integer is convertible</span><br><span class="hljs-comment">// to float</span><br>&#123;a * a&#125; -&gt; std::same_as&lt;<span class="hljs-type">int</span>&gt;; <span class="hljs-comment">// Req. 7 - &quot;a * a&quot; must be valid and</span><br><span class="hljs-comment">// the result type is &quot;int&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="requires-Clause-Expression"><a href="#requires-Clause-Expression" class="headerlink" title="requires Clause + Expression"></a>requires Clause + Expression</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a)</span> <span class="hljs-keyword">requires</span> <span class="hljs-keyword">requires</span> </span>&#123; T::value; &#125;<br><span class="hljs-comment">// clause -&gt; SFINAE followed by</span><br><span class="hljs-comment">// expression -&gt; bool (zero args)</span><br>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">increment</span><span class="hljs-params">(T a)</span> <span class="hljs-keyword">requires</span> <span class="hljs-title">requires</span> <span class="hljs-params">(T x)</span> </span>&#123; x + <span class="hljs-number">1</span>; &#125;<br><span class="hljs-comment">// clause -&gt; SFINAE followed by</span><br><span class="hljs-comment">// expression -&gt; bool (one arg)</span><br>&#123;<br><span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="利用特例化判断类型是否一致"><a href="#利用特例化判断类型是否一致" class="headerlink" title="利用特例化判断类型是否一致"></a>利用特例化判断类型是否一致</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> R&gt; <span class="hljs-comment">// GENERIC template declaration</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_same</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> value = <span class="hljs-literal">false</span>;<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_same</span>&lt;T, T&gt; &#123; <span class="hljs-comment">// PARTIAL template specialization</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> value = <span class="hljs-literal">true</span>;<br>&#125;;<br>cout &lt;&lt; is_same&lt; <span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;::value; <span class="hljs-comment">// print false, generic template</span><br>cout &lt;&lt; is_same&lt;<span class="hljs-type">float</span>, <span class="hljs-type">float</span>&gt;::value; <span class="hljs-comment">// print true, partial template</span><br></code></pre></td></tr></table></figure><h2 id="利用特例化判断const指针"><a href="#利用特例化判断const指针" class="headerlink" title="利用特例化判断const指针"></a>利用特例化判断const指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span></span><br><span class="hljs-comment">// std::true type and std::false type contain a field &quot;value&quot;</span><br><span class="hljs-comment">// set to true or false respectively</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_const_pointer</span> : std::false_type &#123;&#125;; <span class="hljs-comment">// GENERIC template declaration</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> R&gt; <span class="hljs-comment">// PARTIAL specialization</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_const_pointer</span>&lt;<span class="hljs-type">const</span> R*&gt; : std::true_type &#123;&#125;;<br>cout &lt;&lt; is_const_pointer&lt;<span class="hljs-type">int</span>*&gt;::value; <span class="hljs-comment">// print false, generic template</span><br>cout &lt;&lt; is_const_pointer&lt;<span class="hljs-type">const</span> <span class="hljs-type">int</span>*&gt;::value; <span class="hljs-comment">// print true, partial template</span><br>cout &lt;&lt; is_const_pointer&lt;<span class="hljs-type">int</span>* <span class="hljs-type">const</span>&gt;::value; <span class="hljs-comment">// print false, generic template</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python基础</title>
    <link href="/2024/01/10/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/10/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>python不支持重载，但是支持默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> a+b+c<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>add(c=<span class="hljs-number">50</span>,a=<span class="hljs-number">2</span>, b= <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        total+=val<br>    <span class="hljs-keyword">return</span> total<br></code></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul><li>python中每个文件就代表一个模块,模块名即为文件名</li><li><code>__name__</code>是python中一个隐含的变量，它代表了模块的名字，只有被Python解释器直接执行的模块的名字才是<code>__main__</code></li></ul><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    b = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-comment"># Python中可以在函数内部再定义函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>        c = <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(a)//全局变量<br>        <span class="hljs-built_in">print</span>(b)//嵌套变量<br>        <span class="hljs-built_in">print</span>(c)//局部变量<br>    bar()<br>    <span class="hljs-comment"># print(c)  # NameError: name &#x27;c&#x27; is not defined</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span> <span class="hljs-comment"># 不属于任何函数，即为全局变量</span><br>    <span class="hljs-comment"># print(b)  # NameError: name &#x27;b&#x27; is not defined</span><br>    foo()<br></code></pre></td></tr></table></figure><ul><li>除上述的全局作用域、嵌套作用域、局部作用域外，还存在内置作用域，如input,print,int等</li><li>查一个变量会按局部作用域、嵌套作用域、全局作用域、内置作用域来找</li></ul><h2 id="global和nonlocal"><a href="#global和nonlocal" class="headerlink" title="global和nonlocal"></a>global和nonlocal</h2><ul><li>global一般用在函数中指示该变量来自全局，如果全局中没有,那么就会定义一个，并置于全局中</li><li>nonlocal则指示变量处于嵌套作用域中</li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>闭包可以使一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以用它的值</li></ul><h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><h2 id="matplotlib依赖路径"><a href="#matplotlib依赖路径" class="headerlink" title="matplotlib依赖路径"></a>matplotlib依赖路径</h2><ul><li>numpy-&gt;contourpy-&gt;cycler-&gt;fonttools-&gt;kiwisolver-&gt;packaging-&gt;pillow-&gt;pyparsing-&gt;six-&gt;python_dateutil-&gt;matplotlib</li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li>支持<code>*</code>号，重复字符串</li><li>三个单引号或双引号，可以支持折行</li><li><code>s1 = r&#39;\n\hello&#39;&#39;</code>,不会转义</li></ul><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><table><thead><tr><th align="center">用法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">len(str1)</td><td align="center">计算字符串长度</td></tr><tr><td align="center">str1.capitalize()</td><td align="center">获得字符串首字母大写的拷贝</td></tr><tr><td align="center">str1.title()</td><td align="center">获得每个单词首字母大写的拷贝</td></tr><tr><td align="center">str1.upper()</td><td align="center">获得字符串变大写的拷贝</td></tr><tr><td align="center">str1.find(‘a’)</td><td align="center">查找子串的位置，如果没有返回-1</td></tr><tr><td align="center">str1.index(‘a’)</td><td align="center">查找子串的位置，如果没有抛出异常</td></tr><tr><td align="center">str1.startswith(‘he’)</td><td align="center">是否以指定的字符串开头</td></tr><tr><td align="center">str1.endswith(‘he’)</td><td align="center">是否以指定的字符串结尾</td></tr><tr><td align="center">str1.center(50, ‘*‘)</td><td align="center">以指定宽度居中并在两侧填充指定字符</td></tr><tr><td align="center">str1.rjust(50, ‘*‘)</td><td align="center">以指定宽度靠右放置</td></tr><tr><td align="center">str1.ljust(50, ‘*‘)</td><td align="center">以指定宽度靠左放置</td></tr><tr><td align="center">str1.isdigit()</td><td align="center">检查字符串是否只由数字组成</td></tr><tr><td align="center">str1.isalpha()</td><td align="center">检查字符串是否只由字母组成</td></tr><tr><td align="center">str1.isalnum()</td><td align="center">检查字符串是否由字母和数字组成</td></tr><tr><td align="center">str1.strip()</td><td align="center">去除左右两侧空格的拷贝</td></tr><tr><td align="center">str1.lstrip()</td><td align="center">去除左两侧空格的拷贝</td></tr><tr><td align="center">str1.rstrip()</td><td align="center">去除右两侧空格的拷贝</td></tr></tbody></table><h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><ul><li>定义：<code>t = []</code></li><li>转换元组：<code>tuple1 = tuple(list1)</code></li></ul><h2 id="同时遍历元素和下标"><a href="#同时遍历元素和下标" class="headerlink" title="同时遍历元素和下标"></a>同时遍历元素和下标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(index, elem)<br></code></pre></td></tr></table></figure><h2 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h2><table><thead><tr><th align="center">例子</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">list1.append(ele)</td><td align="center">在末尾增加一个元素</td></tr><tr><td align="center">list1.insert(1, 400)</td><td align="center">在下标为1的元素前加个元素</td></tr><tr><td align="center">list1.extend(list2)</td><td align="center">合并两个列表，等价于list1+&#x3D;list2</td></tr><tr><td align="center">list1.remove(value)</td><td align="center">去除列表中第一个为value的元素,如果列表中没该元素则抛出异常</td></tr><tr><td align="center">list1.pop(index1)</td><td align="center">去除下标为index1的元素，默认为末尾元素</td></tr><tr><td align="center">list1.clear()</td><td align="center">清空列表</td></tr><tr><td align="center">list1.reverse()</td><td align="center">倒转元素</td></tr><tr><td align="center">list1.sort(reverse&#x3D;True)</td><td align="center">列表本身排序</td></tr><tr><td align="center">sorted(list1, reverse&#x3D;True)</td><td align="center">返回列表逆排序的拷贝</td></tr></tbody></table><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ul><li><code>fruits[::-1]</code>: 获得倒转元素列表的拷贝</li><li><code>fruits[:]</code>: 获得列表的拷贝</li></ul><h1 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h1><ul><li>生成式：<code>f = [x+y for x in &#39;ABCDE&#39; for y in &#39;1234567&#39;]</code>,耗费空间更多</li><li>生成器：<code>f = (x ** 2 for x in range(1,1000))</code>,不占用额外空间，但是取元素时会内部计算</li></ul><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li>定义：<code>t = (&#39;ss&#39;, &#39;gg&#39;)</code></li><li>转换列表：<code>list1 = list(tuple1)</code></li><li>相比列表的优势:tuple不可变，时空上都优于列表</li></ul><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ul><li>定义：<code>set1 = set()</code>,<code>set2 = set((1,2,3,4,3,2))</code>,<code>set3=set(range(1,10))</code></li><li>set里的元素是排好序的</li></ul><h2 id="相关函数-1"><a href="#相关函数-1" class="headerlink" title="相关函数"></a>相关函数</h2><table><thead><tr><th align="center">例子</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">set1.add(value)</td><td align="center">增加一个元素</td></tr><tr><td align="center">set2.update([11,12])</td><td align="center">增加一个列表的元素</td></tr><tr><td align="center">set2.remove(12)</td><td align="center">去除值12元素，没有会抛出异常</td></tr><tr><td align="center">set2.discard(12)</td><td align="center">同remove但不会抛出异常</td></tr><tr><td align="center">set1.pop()</td><td align="center">删除末尾元素</td></tr><tr><td align="center">set1.issuperset(set2)</td><td align="center">set2是否包含set1</td></tr><tr><td align="center">set1.issubset(set2)</td><td align="center">set1是否包含set2</td></tr></tbody></table><p><img src="/images/python_set.png"></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><code>scores = &#123;&#39;骆昊&#39;: 95, &#39;白元芳&#39;: 78, &#39;狄仁杰&#39;: 82&#125;</code></li><li><code>items1 = dict(one=1, two=2, three=3, four=4)</code></li><li><code>items2 = dict(zip([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;123&#39;))</code></li><li><code>items3 = &#123;num: num ** 2 for num in range(1, 10)&#125;</code></li></ul><h2 id="函数相关-1"><a href="#函数相关-1" class="headerlink" title="函数相关"></a>函数相关</h2><table><thead><tr><th align="center">例子</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">scores.update(冷面&#x3D;67, 方启鹤&#x3D;85)</td><td align="center">增加两组元素</td></tr><tr><td align="center">scores.get(‘xx’,60)</td><td align="center">get方法也是通过键获取对应的值,如果不存在返回60</td></tr><tr><td align="center">scores.popitem()</td><td align="center">去除末尾元素</td></tr><tr><td align="center">scores.pop(‘xx’, 10)</td><td align="center">去除键为xx的元素,如果没有返回10</td></tr><tr><td align="center">scores.clear()</td><td align="center">清空</td></tr></tbody></table><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span><br>    <span class="hljs-comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))<br>    <span class="hljs-comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span><br>    <span class="hljs-comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">watch_movie</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.age &lt; <span class="hljs-number">18</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)<br></code></pre></td></tr></table></figure><h2 id="访问可见性"><a href="#访问可见性" class="headerlink" title="访问可见性"></a>访问可见性</h2><ul><li>在属性或方法前加两个下划线<code>__</code>，则是私有的，可以加<code>_Test</code>前缀强制访问，例如<code>a.__bar()</code>不可以访问，<code>a._Test__bar()</code>即可访问</li><li>可以通过装饰器property设置setter和getter<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br>    <span class="hljs-comment"># 修改器 - setter方法</span><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">12</span>)<br>    person.play()<br>    person.age = <span class="hljs-number">22</span><br>    person.play()<br>    <span class="hljs-comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li></ul><h2 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h2><p>果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, _age和_gender属性</span><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_age&#x27;</span>, <span class="hljs-string">&#x27;_gender&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">22</span>)<br>    person.play()<br>    person._gender = <span class="hljs-string">&#x27;男&#x27;</span><br>    <span class="hljs-comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span><br>    <span class="hljs-comment"># person._is_gay = True</span><br></code></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, c</span>):<br>        self._a = a<br>        self._b = b<br>        self._c = c<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">a, b, c</span>):<br>        <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br><span class="hljs-keyword">if</span> Triangle.is_valid(a, b, c):<br></code></pre></td></tr></table></figure><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, localtime, sleep<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span></span>):<br>        self._hour = hour<br>        self._minute = minute<br>        self._second = second<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">now</span>(<span class="hljs-params">cls</span>):<br>        ctime = localtime(time())<br>        <span class="hljs-keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)<br>clock = Clock.now()<br></code></pre></td></tr></table></figure><h2 id="虚类"><a href="#虚类" class="headerlink" title="虚类"></a>虚类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-built_in">object</span>, metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nickname</span>):<br>        self._nickname = nickname<br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h1 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h1><ul><li>sys.getsizeof(var1): 打印变量的空间</li></ul><h1 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h1><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><ul><li><code>__doc__</code>：xx.<strong>doc</strong>,会打印xx函数或方法的说明</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/12/hello-world/"/>
    <url>/2023/12/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>定时器</title>
    <link href="/2023/10/31/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2023/10/31/%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SIGALRM信号"><a href="#SIGALRM信号" class="headerlink" title="SIGALRM信号"></a>SIGALRM信号</h1><h2 id="配合setitimer"><a href="#配合setitimer" class="headerlink" title="配合setitimer"></a>配合setitimer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">timer_isr</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;timer_isr: press &#x27;c&#x27; and enter to exit:\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> c;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">itimerval</span> mtimer;<br>mtimer.it_value.tv_sec = <span class="hljs-number">5</span>;<br>mtimer.it_value.tv_usec = <span class="hljs-number">0</span>;<br>mtimer.it_interval.tv_sec = <span class="hljs-number">2</span>;<br>mtimer.it_interval.tv_usec = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">signal</span>(SIGALRM, timer_isr);<br><span class="hljs-built_in">setitimer</span>(ITIMER_REAL, &amp;mtimer, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">if</span> (c ==<span class="hljs-string">&#x27;c&#x27;</span> || c == <span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>进程与线程</title>
    <link href="/2023/09/03/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/09/03/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="7进程环境"><a href="#7进程环境" class="headerlink" title="7进程环境"></a>7进程环境</h1><h2 id="main函数的启动"><a href="#main函数的启动" class="headerlink" title="main函数的启动"></a>main函数的启动</h2><p>当内核执行c程序时，在调用main前先调用一个特殊的启动例程。可执行程序文件将此启动例程指定为程序的起始地址（连接器指定）,启动例程从内核取得命令行参数和环境变量值，然后调用main函数</p><h2 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h2><h3 id="8种终止方式"><a href="#8种终止方式" class="headerlink" title="8种终止方式"></a>8种终止方式</h3><ol><li>从main返回</li><li>调用exit</li><li>调用_exit或_Exit</li><li>最后一个线程从其启动例程返回</li><li>最后一个线程调用pthread_exit<br>异常终止:</li><li>调用abort</li><li>接到一个信号</li><li>最后一个线程对取消请求做出响应</li></ol><h3 id="atexit函数"><a href="#atexit函数" class="headerlink" title="atexit函数"></a>atexit函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">atexit</span><span class="hljs-params">(<span class="hljs-type">void</span> (*func)(<span class="hljs-type">void</span>))</span>;<br><span class="hljs-comment">// 登记成功返回0</span><br></code></pre></td></tr></table></figure><p>终止处理函数，一个进程可以登记最多32个函数<br><img src="/images/exit.png"></p><h2 id="内存空间分布"><a href="#内存空间分布" class="headerlink" title="内存空间分布"></a>内存空间分布</h2><p><img src="/images/memory_struct.png"><br>磁盘上的可执行文件并不存放bss内容，内核在程序开始运行前将它们都设为0。磁盘可执行文件只存取text和初始化段<br><code>size /path/bin</code>可查看某执行文件的各个段的长度</p><h2 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h2><p>gcc默认使用共享库，可使用-static阻止使用共享库</p><h2 id="内存分配函数"><a href="#内存分配函数" class="headerlink" title="内存分配函数"></a>内存分配函数</h2><ul><li>malloc: 分配指定字节数的存储区。初始值不确定</li><li>calloc: 为指定数量指定长度的对象分配存储空间,初始化为0</li><li>realloc: 增加或减少以前分配区的长度。增加时新增区的初始值不确定<br>它们都是调用sbrk的系统调用，sbrk可扩充或缩小进程的存储空间，但是大多数的malloc和free的实现都不减小进程的存储空间。释放的空间可供以后再分配<br>这三个函数都有debug版本，进行附加检错，通过设置环境变量支持<br><strong>alloca</strong>函数分配的空间在栈上</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>全局变量environ(char**)，指向环境表，一般不对它进行直接操作<br><img src="/images/environ.png"></p><ul><li><code>char* getenv(const char* name)</code></li><li><code>int putenv(char *str)</code>str是类似<code>name = value</code>, 会直接将该值的地址放到环境表中,所以str不能是栈上的</li><li><code>int setenv(const char *name, const char* value, int rewrite)</code> rewrite为0,则不删除现有定义</li><li><code>int unsetenv(const char* name)</code><br>环境表和环境字符串通常位于进程空间的顶部，所以如果增加环境变量或值字符串变长，系统会调用malloc在堆上分配空间</li></ul><h2 id="setjmp和longjmp函数间的跳转"><a href="#setjmp和longjmp函数间的跳转" class="headerlink" title="setjmp和longjmp函数间的跳转"></a>setjmp和longjmp函数间的跳转</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setjmp</span><span class="hljs-params">(jmp_buf env)</span><span class="hljs-comment">//若直接调用，返回0；若从longjmp返回，则非0</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">longjmp</span><span class="hljs-params">(jmp_Buf env, <span class="hljs-type">int</span> val)</span><br></code></pre></td></tr></table></figure><p>在函数之间的跳转，会舍弃中间的帧，无法确保变量的值，在同一个系统中，要想获得可靠的值，则要加上volatile关键字，这并不能保证(p218仔细看把)</p><h2 id="getrlimit和setrlimit资源限制函数"><a href="#getrlimit和setrlimit资源限制函数" class="headerlink" title="getrlimit和setrlimit资源限制函数"></a>getrlimit和setrlimit资源限制函数</h2><p>(todo,目前感觉用处不大)</p><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><h2 id="进程标识"><a href="#进程标识" class="headerlink" title="进程标识"></a>进程标识</h2><ul><li>进程0：调度进程，也叫交换进程，内核的一部分，不执行任何磁盘上的程序</li><li>进程1：init进程，自举过程结束，由内核调用，永不会终止，以超级用户特权运行的普通用户进程</li></ul><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p>fork完文件表项如下图<br><img src="/images/fd.png"></p><h2 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h2><ul><li>僵尸进程：子进程终止，父进程未wait回收其资源</li><li>孤儿进程：子进程未结束，父进程终止了，此时，成为孤儿进程，之后由内核的进程1托管成为父进程</li></ul><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>用磁盘上的一个新程序替换当前进程的正文段、数据段、堆和栈</p><h2 id="wait函数"><a href="#wait函数" class="headerlink" title="wait函数"></a>wait函数</h2><p>wait函数会回收子进程的结束状态，但有些wait函数是只读，这可以再次wait，读取其状态</p><h2 id="setuid"><a href="#setuid" class="headerlink" title="setuid"></a>setuid</h2><p>set-user-id就是ls -l权限中的s权限<br><img src="/images/uid.png"></p><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><p>该函数其实调用了fork-&gt;exec-&gt;waitpid函数，有设置用户id的程序最后不用该函数，可能使得system执行的程序权限提升，正确做法fork前设置适当的有效用户id</p><h2 id="设置priority函数"><a href="#设置priority函数" class="headerlink" title="设置priority函数"></a>设置priority函数</h2><p>nice、getpriority、setpriority</p><h2 id="进程会计–pacct命令"><a href="#进程会计–pacct命令" class="headerlink" title="进程会计–pacct命令"></a>进程会计–pacct命令</h2><h2 id="进程时间–times"><a href="#进程时间–times" class="headerlink" title="进程时间–times"></a>进程时间–times</h2><h2 id="条件变量-线程同步"><a href="#条件变量-线程同步" class="headerlink" title="条件变量-线程同步"></a>条件变量-线程同步</h2><p><strong>在wait时，会解锁,唤醒时会加锁</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式_观察者模式</title>
    <link href="/2023/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>观察者模式定义对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖着都会收到通知并自动更新</p><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p><img src="/images/observer_normal.png"><br><img src="/images/observer_exp.png"></p><h1 id="松耦合设计"><a href="#松耦合设计" class="headerlink" title="松耦合设计"></a>松耦合设计</h1><p>尽量做到交互对象之间的松耦合，这允许我们建造能够应对变化的，有弹性的OO系统，因为对象之间的依赖降到最低</p><h1 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h1><p>订阅模式是个更复杂的模式，常常用在中间件，注意与之区别</p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul><li>观察者模式定义对象之间的一对多关系</li><li>主题使用通用接口更新观察者</li><li>任何具体类型的观察者都可以参与该模式，只要它们实现观察者接口</li><li>观察者是松耦合的，除了知道它们实现观察者接口之外，主题对它们的事情不知</li><li>使用该模式时，可以从主题推或拉数据</li><li>观察者模式在MVC中经常用到</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式_装饰者模式</title>
    <link href="/2023/06/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/06/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="开放-关闭原则"><a href="#开放-关闭原则" class="headerlink" title="开放-关闭原则"></a>开放-关闭原则</h1><p>类应该对扩展开放，但对修改关闭</p><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p><img src="/images/decorator.jpg"></p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul><li>继承是扩展形式之一，但未必是达到弹性设计的最佳方式</li><li>组合和委托经常可以用来在运行时添加新行为</li><li>装饰者模式提供了子类化扩展行为的替代品</li><li>装饰者模式涉及一群装饰者类，这些类用来包装具体组件</li><li>装饰者类反映了他们所装饰的组件类型</li><li>装饰者通过在对组件的方法调用之前或之后添加功能改变组件的行为</li><li>可以用任意数目的装饰者来包裹一个组件</li><li>装饰者一般对组件的客户是透明的，除非客户依赖于组件的具体类型</li><li>装饰者或导致设计中出现许多小对象，过度使用会让代码复杂</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式_工厂模式</title>
    <link href="/2023/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p><img src="/images/simpleFactory.png"></p><h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><ul><li>定义： 一个创建对象的接口，但让子类决定哪个类要实力化。工厂方法让一个类延迟实例化到子类<br><img src="/images/factoryMethodNormal.png"><br><img src="/images/factoryMethodExp.png"></li></ul><h2 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h2><ul><li>定义：依赖抽象，不依赖具体类</li><li>精髓：低层组件依赖于更高层的抽象</li><li>原则：<ul><li>变量不应该持有到具体类的引用</li><li>类不应该派生自具体类</li><li>方法不应该覆盖其任何基类的已实现方法</li></ul></li></ul><h1 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h1><ul><li>定义：提供一个接口，用于创建相关或依赖对象的家族，而不必指定它们具体类<br><img src="/images/abstractFactory.png"></li></ul><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul><li>所有工厂都封装对象的创建</li><li>工厂方法靠继承：对象创建被委托给子类，子类实现工厂方法来创建对象</li><li>抽象工厂靠对象组合：对象创建在工厂接口暴露的方法中实现</li><li>所有工厂模式都通过减少应用对具体类的依赖，促进松耦合</li><li>工厂方法的意图，是允许一个类延迟实例化到其子类</li><li>抽象工厂的意图，是创建相关对象家族，不必依赖具体类</li><li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TCP/IP</title>
    <link href="/2022/10/03/TCP-IP/"/>
    <url>/2022/10/03/TCP-IP/</url>
    
    <content type="html"><![CDATA[<h1 id="UDP存在的意义"><a href="#UDP存在的意义" class="headerlink" title="UDP存在的意义"></a>UDP存在的意义</h1><p><img src="/images/UDP.png"></p><ul><li>无需建立连接，不会引入建立连接的时延</li><li>无连接状态，tcp需要维护接发缓存、拥塞控制参数、序号及确认号的参数</li><li>分组首部更小</li><li>无拥塞控制，对于不希望过分延迟报文段的传送并且容忍数据丢失的场景适用</li></ul><h1 id="校验和的计算"><a href="#校验和的计算" class="headerlink" title="校验和的计算"></a>校验和的计算</h1><ul><li>发送方对UDP报文段中的所有16比特字进行累加，溢出将回卷，并取反得到校验和。</li><li>接收方将所有16比特字(包括校验和)进行累加,无错即得到全1</li></ul><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p><img src="/images/TCP.png"></p><h2 id="涉及概念"><a href="#涉及概念" class="headerlink" title="涉及概念"></a>涉及概念</h2><ul><li>ACK:肯定确认,在TCP头部中表示当前对确认字段中的值是有效的,明显第一次握手时，该值置为0</li><li>NAK:否定确儿（TCP中没有，只需确认最后一次接收到的分组即可）</li><li>GBN:回退N步</li><li>SR:选择重传</li><li>MSS:最大报文长度,不包括头40字节</li><li>MTU:最大传输单元，链路层的最大帧长度(以太网中为1500字节)，MSS&#x3D;MTU-40(TCP+IP首部长度)</li><li>RTT:往返时间</li></ul><h2 id="六比特标识位"><a href="#六比特标识位" class="headerlink" title="六比特标识位"></a>六比特标识位</h2><ul><li>URG:用于指示报文段里存在着被发送端的上层实体置为紧急的数据(一般不用)</li><li>ACK:用于指示确认字段的值是有效的</li><li>PSH:用于指示接收方应立即将数据交给上层(一般不用)</li><li>RST:用于告诉源：我没有那个报文段的套接字(即端口号未开)，不要再发送该报文,udp遇到这种情况会发送一个ICMP的数据报</li><li>SYN:用于建立连接</li><li>FIN:用于拆除连接</li></ul><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><ul><li>rwnd(接受窗口)&#x3D;RcvBuffer-[LastByteRcvd-LastByteRead]</li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="/images/handshake.png"></p><ul><li>第一次：SYN为1,ACK为0,随机初始化一个seq(client_isn)</li><li>第二次：SYN为1,ACK为1,随机初始化一个seq(server_isn),并设置确认号ack(client_isn+1)，此时服务器可能分配缓存和变量（此时分配会受到SYN洪泛攻击）</li><li>第三次：SYN为1,ACK为1,客户分配缓存和变量，并可以携带有效数据</li></ul><h3 id="为啥3次-反证法"><a href="#为啥3次-反证法" class="headerlink" title="为啥3次(反证法)"></a>为啥3次(反证法)</h3><ul><li>只有一次：无法证明自己发送和接受是否正常,无法证明接收方发送和接受是否正常</li><li>两次：接受方无法确认发送方的接受是否正常以及自己的发送是否正常</li></ul><h3 id="为啥3次-比喻"><a href="#为啥3次-比喻" class="headerlink" title="为啥3次(比喻)"></a>为啥3次(比喻)</h3><ol><li>你听到吗？</li><li>我能，你能听到我吗？</li><li>我也能，那啥你把。。。。</li></ol><h3 id="为啥3次-正经版"><a href="#为啥3次-正经版" class="headerlink" title="为啥3次(正经版)"></a>为啥3次(正经版)</h3><p>TCP连接：用于保证可靠性和流控制机制的信息，包括Socket,序列号以及窗口大小叫做连接。<br>所以通信双方要对这三种信息达成共识，socket就是ip+端口号，窗口大小用于流控制，序列号用于用来追踪通信发起方发送的数据包序号，接收方可以通过序列号向发送方确认某个数据包的成功接收。问题转化为为啥3次才可以初始花这三个信息呢？<br>从以下几个方面介绍为什么我们需要通过三次握手才可以初始化 Sockets、窗口大小、初始序列号并建立 TCP 连接：</p><ul><li><strong>通过三次握手才能阻止重复历史连接的初始化</strong>(最主要)</li><li>通过三次握手才能对通信双方的初始序列号进行初始化；</li><li>讨论其他次数握手建立连接的可能性；</li></ul><h4 id="point1"><a href="#point1" class="headerlink" title="point1"></a>point1</h4><p>RFC793指出：连接使用三次握手的首要原因 —— 为了阻止历史的重复连接初始化造成的混乱问题，防止使用 TCP 协议通信的双方建立了错误的连接。想象一下这个场景，如果通信双方的通信次数只有两次，那么发送方一旦发出建立连接的请求之后它就没有办法撤回这一次请求，如果在网络状况复杂或者较差的网络中，发送方连续发送多次建立连接的请求，如果 TCP 建立连接只能通信两次，那么接收方只能选择接受或者拒绝发送方发起的请求，它并不清楚这一次请求是不是由于网络拥堵而早早过期的连接。<br>所以，TCP 选择使用三次握手来建立连接并在连接引入了 RST 这一控制消息，接收方当收到请求时会将发送方发来的 SEQ+1 发送给对方，这时由发送方来判断当前连接是否是历史连接：</p><ul><li>如果当前连接是历史连接，即 SEQ 过期或者超时，那么发送方就会直接发送 RST 控制消息中止这一次连接；</li><li>如果当前连接不是历史连接，那么发送方就会发送 ACK 控制消息，通信双方就会成功建立连接；<br>使用三次握手和 RST 控制消息将是否建立连接的最终控制权交给了发送方，因为只有发送方有足够的上下文来判断当前连接是否是错误的或者过期的，这也是 TCP 使用三次握手建立连接的最主要原因。</li></ul><h4 id="point2"><a href="#point2" class="headerlink" title="point2"></a>point2</h4><p>另一个使用三次握手的重要的原因就是通信双方都需要获得一个用于发送信息的初始化序列号，作为一个可靠的传输层协议，TCP 需要在不稳定的网络环境中构建一个可靠的传输层，网络的不确定性可能会导致数据包的缺失和顺序颠倒等问题，常见的问题可能包括：</p><ul><li>数据包被发送方多次发送造成数据的重复；</li><li>数据包在传输的过程中被路由或者其他节点丢失；</li><li>数据包到达接收方可能无法按照发送顺序；<br>为了解决上述这些可能存在的问题，TCP 协议要求发送方在数据包中加入『序列号』字段，有了数据包对应的序列号，我们就可以：</li><li>接收方可以通过序列号对重复的数据包进行去重；</li><li>发送方会在对应数据包未被 ACK 时进行重复发送；</li><li>接收方可以根据数据包的序列号对它们进行重新排序；<br>序列号在 TCP 连接中有着非常重要的作用，初始序列号作为 TCP 连接的一部分也需要在三次握手期间进行初始化，由于 TCP 连接通信的双方都需要获得初始序列号，所以它们其实需要向对方发送 SYN 控制消息并携带自己期望的初始化序列号 SEQ，对方在收到 SYN 消息之后会通过 ACK 控制消息以及 SEQ+1 来进行确认。<br>除此之外，网络作为一个分布式的系统，其中并不存在一个用于计数的全局时钟，而 TCP 可以通过不同的机制来初始化序列号，作为 TCP 连接的接收方我们无法判断对方传来的初始化序列号是否过期，所以我们需要交由对方来判断，TCP 连接的发起方可以通过保存发出的序列号判断连接是否过期，如果让接收方来保存并判断序列号却是不现实的，这也再一次强化了我们在上一节中提出的观点 —— 避免历史错连接的初始化。</li></ul><h4 id="point3"><a href="#point3" class="headerlink" title="point3"></a>point3</h4><p>当我们讨论 TCP 建立连接需要的通信次数时，我们经常会执着于为什么通信三次才可以建立连接，而不是两次或者四次；讨论使用更多的通信次数来建立连接往往是没有意义的，因为我们总可以使用更多的通信次数交换相同的信息，所以使用四次、五次或者更多次数建立连接在技术上都是完全可以实现的。<br>这种增加 TCP 连接通信次数的问题往往没有讨论的必要性，我们追求的其实是用更少的通信次数（理论上的边界）完成信息的交换，也就是为什么我们在上两节中也一再强调使用『两次握手』没有办法建立 TCP 连接，使用三次握手是建立连接所需要的最小次数。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>TCP 建立连接时通过三次握手可以有效地避免历史错误连接的建立，减少通信双方不必要的资源消耗，三次握手能够帮助通信双方获取初始化序列号，它们能够保证数据包传输的不重不丢，还能保证它们的传输顺序，不会因为网络传输的问题发生混乱，到这里不使用『两次握手』和『四次握手』的原因已经非常清楚了：</p><ul><li>『两次握手』：无法避免历史错误连接的初始化，浪费接收方的资源；</li><li>『四次握手』：TCP 协议的设计可以让我们同时传递 ACK 和 SYN 两个控制信息，减少了通信次数，所以不需要使用更多的通信次数传输相同的信息；</li></ul><h3 id="第一次握手时可以携带应用数据吗"><a href="#第一次握手时可以携带应用数据吗" class="headerlink" title="第一次握手时可以携带应用数据吗"></a>第一次握手时可以携带应用数据吗</h3><p>不行，因为此时连接还没有建立。<br>是否可以由接收方将应用数据缓存起来，等到三次握手完成，连接建立之后，再由接收方交给上层应用呢？<br>也不行，这样会放大 TCP SYN Flood 攻击，如果攻击者伪造了大量的携带数据报文，那么接收方就需要大量的内存来临时存储应用数据，最终导致内存耗尽。</p><h3 id="第二次握手时可以携带应用数据吗？"><a href="#第二次握手时可以携带应用数据吗？" class="headerlink" title="第二次握手时可以携带应用数据吗？"></a>第二次握手时可以携带应用数据吗？</h3><p>第二次握手是接收方向发送方发送数据，虽然可以携带数据，但是没有任何实质意义。</p><h3 id="第三次握手时可以携带应用数据吗？"><a href="#第三次握手时可以携带应用数据吗？" class="headerlink" title="第三次握手时可以携带应用数据吗？"></a>第三次握手时可以携带应用数据吗？</h3><p>可以。<br>发送第三次握手之前，发送方此时已经进入 ESTABLISHED 状态，所以只要第三次握手的报文到达接收方，那么接收方的状态也会进入 ESTABLISHED 状态，连接就算建立完成了。<br>此时接收方将发送方在第三次握手时携带的应用数据，转交给上层应用即可。<br>那这样就不会引发 TCP SYN Flood 攻击吗？<br>作为攻击者来说，也是需要考虑攻击成本的，如果在第三次握手携带应用数据，就会建立起正常的 TCP 连接，攻击者同样需要资源来存储建立的连接，对于攻击者来说，这是本末倒置的。如果攻击者是远程操纵 “肉鸡” 进行攻击的话，直接在连接建立完成后，让 “肉鸡” 发送海量应用请求就可以了，没有必要在第三次握手时携带应用数据。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="/images/byebye.png"></p><ul><li>第一次(假设客户端先手)：FIN为1，ACK&#x3D;0,随机一个seq,此时不发送有效数据，仍然可以接受数据</li><li>第二次：ACK&#x3D;1,ackNum为seq+1,此时服务器仍然可以发送数据</li><li>第三次：FIN为1，ACK&#x3D;0,随机一个seq，此时服务器不发送有效数据</li><li>第四次：ACK&#x3D;1,ackNum为seq+1</li></ul><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><ul><li>发送方跟踪额外的变量:拥塞窗口(cwnd),注意这与流量控制不同，<strong>不体现在tcp头部中</strong></li><li>LastByteSent-LastByteAcked&lt;&#x3D;min{cwnd,rwnd}</li><li>初始化时，cwnd通常为1个MSS，然后进入慢启动(指数增长),遇到拥塞，cwnd减半，并设置ssthresh&#x3D;cwnd&#x2F;2(慢启动阈值),结束慢启动</li><li>TCP的拥塞控制：每个RTT内cwnd线性增加1个MSS，出现3个冗余ACK时，cwnd减半（加性增、乘性减）</li></ul><h1 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h1><h2 id="ipv4"><a href="#ipv4" class="headerlink" title="ipv4"></a>ipv4</h2><p><img src="/images/IP.png"></p><h3 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h3><ul><li>版本号：4比特，定义是ipv4还是ipv6</li><li>首部长度：4比特，定义首部长度</li><li>服务类型：8比特，服务类型(延时低，高吞吐等)</li><li>数据包长度：ip数据报总长度（首部+数据）</li><li>标识、标志、偏移：ip分片有关</li><li>寿命：8字节，没经过一个路由减1,为0时丢弃</li><li>协议：表示上层协议（UDP还是）</li><li>首部校验和：只针对头部计算，注意由于寿命会变，所以需要不断的更新</li><li>源和目的ip地址：没啥好说</li><li>选项：很少使用，ipv6中就没有</li><li>有效数据</li></ul><h3 id="数据报分片"><a href="#数据报分片" class="headerlink" title="数据报分片"></a>数据报分片</h3><p><img src="/images/IP_fra.png"></p><ul><li>之前提到过，一个链路层帧能承载的最大数据量叫做<strong>最大传送单元（MTU）</strong></li><li>广域网和局域网可能MTU不同所以要分片</li><li>分片的重组放在端系统中，路由器不负责重组</li><li>最后一片标志被置为0</li></ul><h3 id="ipv4编址"><a href="#ipv4编址" class="headerlink" title="ipv4编址"></a>ipv4编址</h3><ul><li>接口：主机与物理链路之间的边界叫做接口</li><li>ip地址：IP协议要求每台主机和路由器的接口拥有自己的IP地址<br><strong>从技术上来讲一个ip地址与一个接口相关联，而不是与包括该接口的主机或路由器相关联</strong></li><li>子网掩码：a.b.c.d&#x2F;x,x最高比特构成了IP地址的网络部分，为网络前缀</li><li>CIDR：无类别域间路由选择，这种更灵活</li><li>分类编址（不灵活）：A类子网(8bit)，B类子网(16bit)，C类子网(24bit),会有c类太少，b类太大的烦恼</li></ul><h3 id="DHCP动态主机配置协议"><a href="#DHCP动态主机配置协议" class="headerlink" title="DHCP动态主机配置协议"></a>DHCP动态主机配置协议</h3><p>性质：基于UDP的应用层协议,默认端口67<br>作用： 除了分配IP地址外，DHCP还允许获取其他信息子网掩码，默认网关（第一跳路由器），本地DNS服务器地址<br><img src="/images/DHCP.png"></p><h3 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换-NAT"></a>网络地址转换-NAT</h3><ul><li>会改写IP地址和端口号<br><img src="/images/NAT.png"></li></ul><h2 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h2><p><img src="/images/IPV6.png"></p><ul><li>版本：显然设为6</li><li>流量类型：与ipv4服务类型类似</li><li>流标签：标识一条数据报的流，还未完全确定</li><li>有效载荷长度</li><li>跳限制：计数为0丢弃</li></ul><h3 id="ipv4-ipv6-隧道"><a href="#ipv4-ipv6-隧道" class="headerlink" title="ipv4-&gt;ipv6:隧道"></a>ipv4-&gt;ipv6:隧道</h3><p><img src="/images/tunneling.png"></p><h2 id="通用转发和SDN"><a href="#通用转发和SDN" class="headerlink" title="通用转发和SDN"></a>通用转发和SDN</h2><ul><li>OpenFLow标准</li><li>SDN</li><li>就是根据各层的头信息执行特定转发，有更大灵活性，跳出IP转发的局限性</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络基础</title>
    <link href="/2022/10/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h1><ul><li>定义: 将端系统物理连接到<strong>边缘路由器</strong>的网络，<strong>边缘路由器</strong>就是端系统到任何其他远程端系统的路径上的第一台路由器</li></ul><h2 id="家庭接入"><a href="#家庭接入" class="headerlink" title="家庭接入"></a>家庭接入</h2><h3 id="数字用户线-DSL"><a href="#数字用户线-DSL" class="headerlink" title="数字用户线(DSL)"></a>数字用户线(DSL)</h3><p><img src="/images/dsl.png"></p><ul><li>涉及概念：DSL调制解调器，数字用户线接入复用器（DSLAM）</li></ul><h3 id="电缆英特网接入"><a href="#电缆英特网接入" class="headerlink" title="电缆英特网接入"></a>电缆英特网接入</h3><p><img src="/images/CIA.png"></p><ul><li>涉及概念：电缆调制解调器端接系统(CMTS),混合光纤同轴（HFC）系统</li></ul><h3 id="光纤到户（FTTH）"><a href="#光纤到户（FTTH）" class="headerlink" title="光纤到户（FTTH）"></a>光纤到户（FTTH）</h3><ul><li>涉及概念：光纤网络端接器（ONT）,光纤线路端接器（OLT）</li></ul><h2 id="企业-家庭-接入"><a href="#企业-家庭-接入" class="headerlink" title="企业(&#x2F;家庭)接入"></a>企业(&#x2F;家庭)接入</h2><h3 id="以太网（LAN局域网的一种）"><a href="#以太网（LAN局域网的一种）" class="headerlink" title="以太网（LAN局域网的一种）"></a>以太网（LAN局域网的一种）</h3><p><img src="/images/LAN.png"></p><h3 id="wifi-无线局域网wlan"><a href="#wifi-无线局域网wlan" class="headerlink" title="wifi(无线局域网wlan)"></a>wifi(无线局域网wlan)</h3><p><img src="/images/wireless.png"></p><h2 id="广域接入"><a href="#广域接入" class="headerlink" title="广域接入"></a>广域接入</h2><p>2G,3G,4G…,LTE</p><h1 id="物理媒介"><a href="#物理媒介" class="headerlink" title="物理媒介"></a>物理媒介</h1><p><img src="/images/tp.png" alt="双绞铜线"><br><img src="/images/cable.png" alt="同轴电缆"><br><img src="/images/fiber.png" alt="光纤"><br>陆地&#x2F;卫星无线电通道</p><h1 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h1><h2 id="电路交换（过时）"><a href="#电路交换（过时）" class="headerlink" title="电路交换（过时）"></a>电路交换（过时）</h2><ul><li>涉及概念：频分复用(FDM)、时分复用(TDM)</li></ul><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>端到端交换<strong>报文(message)</strong>,需要将报文划分较小的数据块，称之为<strong>分组(packet)<strong>，每个分组由</strong>比特</strong>衡量大小</p><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p><img src="/images/delay.png"></p><ul><li>处理时延：检查分组首部和决定该分组导向何处所需要的时间，由路由处理及选择有关,&lt;&#x3D;微秒量级</li><li>排队时延：一个特定分组的排队时延取决于先期到达的正在排队的分组数量,毫秒量级-微秒量级</li><li>传输时延：一个分组的所有比特到达后才可以传输，一个L比特的分组在速率为R的链路上的传输时延是L&#x2F;R，与路由之间的距离无关，毫秒-微妙</li><li>传播时延：从链路的起点到某路由器传播所需要的时间是传播时延，与距离相关：d&#x2F;s，s解近光速，毫秒级别</li></ul><h3 id="排队时延和丢包"><a href="#排队时延和丢包" class="headerlink" title="排队时延和丢包"></a>排队时延和丢包</h3><ul><li>流量强度：La&#x2F;R,a为分组&#x2F;秒，表示分组到达队列的平均速率,流量强度必须小于1,否则队列无限增长，时延趋向无限大，但实际中容量有限，此时会导致丢包</li></ul><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p><img src="/images/througput.png"><br>取决于链路中的最小传输速率，及公共链路中其他干扰流量,忽略干扰流量就是min(R1,R2,R3…)</p><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="病毒和蠕虫"><a href="#病毒和蠕虫" class="headerlink" title="病毒和蠕虫"></a>病毒和蠕虫</h3><h3 id="拒绝服务攻击-DoS"><a href="#拒绝服务攻击-DoS" class="headerlink" title="拒绝服务攻击-DoS"></a>拒绝服务攻击-DoS</h3><ul><li>弱点攻击：向一台目标主机上运行的易受攻击的应用程序或操作系统发送制作精细的报文</li><li>带宽洪泛：攻击者向目标主机发送大量的分组，使链路拥塞</li><li>连接洪泛：在目标主机中创建大量半开或全开TCP连接</li></ul><h3 id="嗅探分组wireshark"><a href="#嗅探分组wireshark" class="headerlink" title="嗅探分组wireshark"></a>嗅探分组wireshark</h3><h3 id="ip哄骗"><a href="#ip哄骗" class="headerlink" title="ip哄骗"></a>ip哄骗</h3><h2 id="网络层模型"><a href="#网络层模型" class="headerlink" title="网络层模型"></a>网络层模型</h2><p><img src="/images/layer.png"></p><ul><li>message:报文</li><li>segment:报文段</li><li>datagram:数据报</li><li>frame:帧</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tokio</title>
    <link href="/2022/06/27/tokio/"/>
    <url>/2022/06/27/tokio/</url>
    
    <content type="html"><![CDATA[<h2 id="不适用场景"><a href="#不适用场景" class="headerlink" title="不适用场景"></a>不适用场景</h2><ul><li>并行运行CPU密集型的任务（并行计算）</li><li>读取大量的文件</li><li>发送少量HTTP请求</li></ul><h2 id="async-main"><a href="#async-main" class="headerlink" title="async main"></a>async main</h2><p>异步main函数的意义：</p><ul><li>.await只能在async函数中使用</li><li>异步运行时本身需要初始化，<code>#[tokio::main]</code>宏将<code>async fn main</code>隐式转换为<code>fn main</code>，同时还对整个异步运行时进行了初始化：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[tokio::main]</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>转化为：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">rt</span> = tokio::runtime::Runtime::<span class="hljs-title function_ invoke__">new</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    rt.<span class="hljs-title function_ invoke__">block_on</span>(<span class="hljs-keyword">async</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile</title>
    <link href="/2022/04/04/Dockerfile/"/>
    <url>/2022/04/04/Dockerfile/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dockerfile是一个文本文件，其内包含了一条条指令，<strong>每条指令构建一层</strong></p><ul><li><code>#</code>进行注释</li><li><code>\</code>末尾进行换行，RUN执行多条命令十分有用</li></ul><h2 id="docker-build–构建镜像"><a href="#docker-build–构建镜像" class="headerlink" title="docker build–构建镜像"></a>docker build–构建镜像</h2><ul><li><strong>格式：</strong><code>docker build [选项] [上下文路径/URL/-]</code></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-t [reposity:tag]</td><td align="center">指明镜像名称和tag</td></tr><tr><td align="center">-f [dockerfile]</td><td align="center">指定dockerfile，非主流，默认文件名为<code>Dockerfile</code>，且位于上下文路径中</td></tr><tr><td align="center">–target &lt;some img&gt;</td><td align="center">多阶段构建时，指定只构建某个镜像，而不是默认的最后一个</td></tr></tbody></table><h3 id="上下文路径"><a href="#上下文路径" class="headerlink" title="上下文路径"></a>上下文路径</h3><ul><li>docker build命令其实是与服务器（即docker.service）通信，它会将上下文路径下的所有内容上传，而不是在本地进行构建的</li><li>支持<code>.dockerignore</code>文件，剔除不需要的内容</li></ul><h3 id="其他构建法"><a href="#其他构建法" class="headerlink" title="其他构建法"></a>其他构建法</h3><ul><li>Git repo:<code>docker build -t hello-world https://github.com/docker-library/hello-world.git</code></li><li>tar包:<code>docker build http://server/context.tar.gz</code></li><li>标准输入：<code>docker build - &lt; Dockerfile</code>或<code>cat Dockerfile| docker build -</code>(直接从标准输入读取，没有上下文，不可用依赖上下文的命令COPY等等)</li><li>标准输入+tar包：<code>docker build - &lt; context.tar.gz</code>会自动解压，将里面视为上下文</li></ul><h2 id="docker-import-从rootfs压缩包导入-无需Dockerfile"><a href="#docker-import-从rootfs压缩包导入-无需Dockerfile" class="headerlink" title="docker import-从rootfs压缩包导入(无需Dockerfile)"></a>docker import-从rootfs压缩包导入(无需Dockerfile)</h2><ul><li><strong>格式：</strong><code>docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></li><li><strong>例子：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker import \<br>    http://download.openvz.org/template/precreated/ubuntu-16.04-x86_64.tar.gz \<br>    openvz/ubuntu:16.04<br></code></pre></td></tr></table></figure></li></ul><h2 id="docker-save和docker-load"><a href="#docker-save和docker-load" class="headerlink" title="docker save和docker load"></a>docker save和docker load</h2><p>是一种古老的保存和加载镜像的方法，已经非主流，实在没网，使用内网私有的Registry</p><h3 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h3><ul><li>本质上是建立归档文件:<code>docker save [some image] -o [some file]</code></li><li>使用压缩：<code>docker save [some image] | gzip &gt; xx.tar.gz</code></li></ul><h3 id="docker-load"><a href="#docker-load" class="headerlink" title="docker load"></a>docker load</h3><p><code>docker load -i some_file.tar.gz</code></p><h2 id="FROM指定基础镜像"><a href="#FROM指定基础镜像" class="headerlink" title="FROM指定基础镜像"></a>FROM指定基础镜像</h2><ul><li><strong>格式：</strong><code>FROM [image]</code></li><li>FROM是必备的指令，且必须是第一条</li><li>如果你想以空白镜像为基础，你可以这样<code>FROM scratch</code></li><li>尽量小尺寸（推荐Alpine）</li></ul><h2 id="RUN执行命令"><a href="#RUN执行命令" class="headerlink" title="RUN执行命令"></a>RUN执行命令</h2><ul><li><strong>格式：</strong><code>RUN [command]</code></li><li>执行多条命令：使用<code>\</code>和<code>&amp;&amp;</code>，如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">RUN apt-get update \<br>&amp;&amp; apt-get install vim<br></code></pre></td></tr></table></figure></li><li>永远不要<code>apt upgrade</code>，而是使用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">RUN apt-get update &amp;&amp; apt-get install -y \<br>    aufs-tools \<br>    s3cmd=1.1.* \<br> &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<br></code></pre></td></tr></table></figure></li></ul><h2 id="COPY复制文件"><a href="#COPY复制文件" class="headerlink" title="COPY复制文件"></a>COPY复制文件</h2><ul><li><strong>格式：</strong><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><strong>作用：</strong>将从构建上下文目录中的路径复制的新的一层的镜像内的目标路径的位置，支持通配符，如果目录不存在会创建缺失的目录</li><li>如果源路径为文件夹，复制的时候不是复制该文件夹，而是将文件夹中的内容复制到目标路径</li><li><code>--from=[some]</code>:多阶段构建时，指定从某个镜像获取，而不是当前上下文</li><li>不要一次copy多个文件，这会使一层的缓存过大</li></ul><h2 id="ADD更高级的复制文件"><a href="#ADD更高级的复制文件" class="headerlink" title="ADD更高级的复制文件"></a>ADD更高级的复制文件</h2><ul><li><strong>说明：</strong>和COPY格式和性质基本一致,但是功能更多(不代表更好，只有自动解压缩时，使用该命令)：</li></ul><ol><li>源路径可以是以个URL,文件权限自动设置为600,更改权限需要再加一层调整,另外如果下载是个压缩包，需要再加一层解压缩</li><li>如果源路径是个tar压缩文件(gzip,bzip2,xz)，会自动解压缩文件</li></ol><h2 id="CMD容器启动命令"><a href="#CMD容器启动命令" class="headerlink" title="CMD容器启动命令"></a>CMD容器启动命令</h2><ul><li><strong>格式1：</strong><code>CMD [&quot;可执行文件&quot;，&quot;参数1&quot;，&quot;参数2&quot;...]</code>(推荐使用这个，也支持bash格式，但会包装一层<code>sh -c</code>)</li><li><strong>格式2：</strong><code>CMD [&quot;参数1&quot;,&quot;参数2&quot;]</code>,在指定了<code>ENTRYPOINT</code>后，可以直接指定参数</li><li><strong>作用：</strong>容器就是进程，该命令就是指定容器所运行默认的程序及参数,例如ubuntu的CMD就是<code>/bin/bash</code>,当然可以在命令行中用其他命令替换。</li><li><strong>注意：</strong></li></ul><ol><li>启动程序就是容器的应用进程，容器就是为了主进程存在的，主进程退出，容器就会退出，辅助进程不是它所关心的。所以必须是前台进程，例如<code>CMD service nginx start</code>被理解为<code>CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;service nginx start&quot;]</code>,因此当sh进程结束，它就会结束。当然即使你用格式1清楚指明service为可执行程序也是不行的，正确做法是指明前台形式运行： <code>CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</code></li><li>整个Dockerfile应该只出现一次该命令</li></ol><h2 id="ENTRYPOINT入口点"><a href="#ENTRYPOINT入口点" class="headerlink" title="ENTRYPOINT入口点"></a>ENTRYPOINT入口点</h2><p><strong>说明：</strong>该命令和CMD一样，都是指定容器启动程序及参数，不过有下面几点需要注意：</p><ol><li>在运行时也可以替代，不过要加个<code>--entrypoint</code>指定</li><li>当指定了<code>ENTRYPOINT</code>后，CMD的内容将作为参数传给<code>ENTRYPOINT</code></li><li>整个Dockerfile应该只出现一次该命令<br><strong>应用场景：</strong></li><li>让镜像变成像命令一样使用:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM ubuntu:18.04<br>RUN apt-get update \<br>    &amp;&amp; apt-get install -y curl \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<br>CMD [ <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;http://myip.ipip.net&quot;</span> ]<br></code></pre></td></tr></table></figure>如果我们希望显示http头信息，需要加上-i参数,<code>docker run myip -i</code>是行不通的，而必须用<code>$ docker run myip curl -s http://myip.ipip.net -i</code>，显然很繁琐，如果把上面内容的CMD改成ENTRYPOINT，就可以使用<code>docker run myip -i</code>，此时CMD的内容是<code>-i</code></li><li>应用运行前的准备工作。</li></ol><h2 id="ENV设置环境变量-容器运行时，这些环境变量保持有效"><a href="#ENV设置环境变量-容器运行时，这些环境变量保持有效" class="headerlink" title="ENV设置环境变量(容器运行时，这些环境变量保持有效)"></a>ENV设置环境变量(容器运行时，这些环境变量保持有效)</h2><ul><li><strong>格式：</strong><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li>如果key或value有空格，用<code>&quot;</code>括起来,可以用<code>\</code>换行</li><li>下列指令可以支持环境变量展开：<code>ADD、COPY、ENV、EXPOSE、FROM、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD、RUN。</code></li></ul><h2 id="ARG构建参数-容器运行时，这些参数无效"><a href="#ARG构建参数-容器运行时，这些参数无效" class="headerlink" title="ARG构建参数(容器运行时，这些参数无效)"></a>ARG构建参数(容器运行时，这些参数无效)</h2><ul><li><strong>格式：</strong><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></li><li><strong>说明：</strong>定义参数名称及其默认值，该默认值可以在构建命令中用<code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code>来覆盖</li><li>ARG指令有生效范围，如果在FROM指令之前指定，那么只能用于每个FROM指令中。多阶段中使用这些变量必须在每个阶段分别指定</li></ul><h2 id="VOLUME定义匿名卷"><a href="#VOLUME定义匿名卷" class="headerlink" title="VOLUME定义匿名卷"></a>VOLUME定义匿名卷</h2><ul><li><strong>格式：</strong><code>VOLUME [&quot;&lt;路径1&gt;&quot;,&quot;&lt;路径2&gt;&quot;...]</code></li><li><strong>说明：</strong>路径1等目录会在容器运行时默认自动挂载为匿名卷，任何向指定路径中写入的信息都不会记录进容器存储层。</li><li>运行容器时可以覆盖这个挂载配置<code>$ docker run -d -v mydata:/data xxxx</code>，这里就用了mydata这个命名卷挂载到了&#x2F;data这个位置，替代了Dockerfile中定义的匿名卷挂载配置</li></ul><h2 id="EXPOSE声明端口"><a href="#EXPOSE声明端口" class="headerlink" title="EXPOSE声明端口"></a>EXPOSE声明端口</h2><ul><li><strong>格式：</strong><code>EXPOSE &lt;端口1&gt; &lt;端口2&gt; ...</code></li><li><strong>作用：</strong>这只是个声明，并不会开启这个端口的服务，主要帮助镜像使用者理解这个镜像服务的守护端口，方便映射，另外-P选项，会自动随机映射EXPOSE的端口，要想映射端口请使用-p选项</li></ul><h2 id="WORKDIR指定工作目录"><a href="#WORKDIR指定工作目录" class="headerlink" title="WORKDIR指定工作目录"></a>WORKDIR指定工作目录</h2><ul><li><strong>格式：</strong><code>WORKDIR &lt;工作目录路径&gt;</code></li><li><strong>作用：</strong>指定当前目录，以后各层的当前目录就改为指定目录，如果目录不存在，会自动建立，若指定相对路径，则是在之前工作目录的基础上的。</li><li><strong>注意：</strong>单独一层cd不会影响之后的一层，因为一层一层是独立的，应该用WORKDIR</li></ul><h2 id="USER指定当前用户"><a href="#USER指定当前用户" class="headerlink" title="USER指定当前用户"></a>USER指定当前用户</h2><ul><li><strong>格式：</strong><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></li><li><strong>作用：</strong>改变之后层的命令执行的身份，这个用户身份必须存在</li></ul><h2 id="HEALTHCHECK健康检查"><a href="#HEALTHCHECK健康检查" class="headerlink" title="HEALTHCHECK健康检查"></a>HEALTHCHECK健康检查</h2><ul><li><strong>格式1：</strong><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>设置检查容器健康状况的命令</li><li><strong>格式2：</strong><code>HEALTHCHECK NONE</code>如果基础镜像有健康检查指令，使用这个可以屏蔽其健康检查指令</li><li><strong>历史原因：</strong>在没有该命令之前，docker通过主进程是否退出来判断是否异常，这忽略了一种情形，如果程序进入死锁或死循环，就不会检查出错误</li><li><strong>功能作用：</strong>当一个镜像指定了HEALTHCHECK指令后，启动容器的初始状态会是starting,在HEALTHCHECK指令检查成功后变为healthy,如果连续一定次数失败，则为unhealthy,<strong>整个Dockerfile应该只出现一次该命令</strong></li><li><strong>选项：</strong></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">–interval&#x3D;&lt;间隔&gt;</td><td align="center">两次健康检查的间隔，默认为30秒</td></tr><tr><td align="center">–timeout&#x3D;&lt;时长&gt;</td><td align="center">健康检查命令运行超时时间，默认为30秒</td></tr><tr><td align="center">–retries&#x3D;&lt;次数&gt;</td><td align="center">当连续失败指定次数后，则将认定为unhealthy，默认为3次</td></tr></tbody></table><h2 id="LABEL指令"><a href="#LABEL指令" class="headerlink" title="LABEL指令"></a>LABEL指令</h2><ul><li><strong>格式：</strong><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></li><li><strong>作用：</strong>给镜像以键值对的形式添加些元数据，如镜像的作者、文档地址等<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LABEL org.opencontainers.image.authors=<span class="hljs-string">&quot;yeasy&quot;</span><br>LABEL org.opencontainers.image.documentation=<span class="hljs-string">&quot;https://yeasy.gitbooks.io&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="SHELL指令"><a href="#SHELL指令" class="headerlink" title="SHELL指令"></a>SHELL指令</h2><ul><li><strong>格式：</strong><code>SHELL [&quot;executable&quot;, &quot;parameters&quot;]</code></li><li><strong>作用：</strong>指定RUN、ENTRYPOINT、CMD指令的shell,默认为<code>[&quot;/bin/sh&quot;,&quot;-c&quot;]</code>,其中ENTRYPOINT,CMD只有以shell格式指定时，才起作用</li></ul><h2 id="ONBUILD为他人做嫁衣"><a href="#ONBUILD为他人做嫁衣" class="headerlink" title="ONBUILD为他人做嫁衣"></a>ONBUILD为他人做嫁衣</h2><ul><li><strong>格式：</strong><code>ONBUILD &lt;其他指令&gt;</code></li><li><strong>作用：</strong>它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</li><li>这常常应用于基础镜像，例如npm包管理</li></ul><h2 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h2><ol><li>之前多阶段构建一种方式把所有东西放在一个Dockerfile中，但这会造成层次太多，镜像体积过大，部署时间变长，源代码存在泄露问题，如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM golang:alpine<br><br>RUN apk --no-cache add git ca-certificates<br><br>WORKDIR /go/src/github.com/go/helloworld/<br><br>COPY app.go .<br><br>RUN go get -d -v github.com/go-sql-driver/mysql \<br>  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . \<br>  &amp;&amp; <span class="hljs-built_in">cp</span> /go/src/github.com/go/helloworld/app /root<br><br>WORKDIR /root/<br><br>CMD [<span class="hljs-string">&quot;./app&quot;</span>]<br></code></pre></td></tr></table></figure></li><li>第二种方式分散多个Dockerfile，然后再写脚本整合，虽然镜像体积较小，但过程较复杂：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建dockerfile--&gt;Dockerfile.build</span><br>FROM golang:alpine<br><br>RUN apk --no-cache add git<br><br>WORKDIR /go/src/github.com/go/helloworld<br><br>COPY app.go .<br><br>RUN go get -d -v github.com/go-sql-driver/mysql \<br>  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .<br><span class="hljs-comment"># 部署dockerfile--&gt;Dockerfile.copy</span><br>FROM alpine:latest<br><br>RUN apk --no-cache add ca-certificates<br><br>WORKDIR /root/<br><br>COPY app .<br><br>CMD [<span class="hljs-string">&quot;./app&quot;</span>]<br><span class="hljs-comment"># 整合脚本--&gt; build.sh</span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> Building go/helloworld:build<br><br>docker build -t go/helloworld:build . -f Dockerfile.build<br><br>docker create --name extract go/helloworld:build<br>docker <span class="hljs-built_in">cp</span> extract:/go/src/github.com/go/helloworld/app ./app<br>docker <span class="hljs-built_in">rm</span> -f extract<br><br><span class="hljs-built_in">echo</span> Building go/helloworld:2<br><br>docker build --no-cache -t go/helloworld:2 . -f Dockerfile.copy<br><span class="hljs-built_in">rm</span> ./app<br></code></pre></td></tr></table></figure></li><li>更加高效的方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM golang:alpine as builder<br><br>RUN apk --no-cache add git<br><br>WORKDIR /go/src/github.com/go/helloworld/<br><br>RUN go get -d -v github.com/go-sql-driver/mysql<br><br>COPY app.go .<br><br>RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .<br><br>FROM alpine:latest as prod<br><br>RUN apk --no-cache add ca-certificates<br><br>WORKDIR /root/<br><br><span class="hljs-comment"># 这里的0代表上个阶段的镜像,当然可以指定其他镜像如`--from=nginx:latest`</span><br>COPY --from=0 /go/src/github.com/go/helloworld/app .<br><br>CMD [<span class="hljs-string">&quot;./app&quot;</span>]<br></code></pre></td></tr></table></figure>可以只构建某个阶段的镜像<code>$ docker build --target builder -t username/imagename:tag .</code></li></ol><h2 id="docker-manifest–多系统架构支持"><a href="#docker-manifest–多系统架构支持" class="headerlink" title="docker manifest–多系统架构支持"></a>docker manifest–多系统架构支持</h2><ul><li><strong>背景：</strong>使用镜像创建一个容器，该镜像必须与Docker宿主机架构一致（Windows、macOS除外，在x86_64系统上，这两个系统可以运行arm等其他架构），为了支持多个架构，必须提供两个架构版本的镜像，manifest命令就是支持自动识别宿主机架构，然后拉取合适的镜像。</li></ul><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>在两个架构上构建两个镜像</p><h3 id="创建manifest列表"><a href="#创建manifest列表" class="headerlink" title="创建manifest列表"></a>创建manifest列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># $ docker manifest create MANIFEST_LIST MANIFEST [MANIFEST...]</span><br>$ docker manifest create username/test \<br>      username/x8664-<span class="hljs-built_in">test</span> \<br>      username/arm64v8-<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>当需要修改时加个-a或–amend参数</p><h3 id="设置manifest列表"><a href="#设置manifest列表" class="headerlink" title="设置manifest列表"></a>设置manifest列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># $ docker manifest annotate [OPTIONS] MANIFEST_LIST MANIFEST</span><br>$ docker manifest annotate username/test \<br>      username/x8664-<span class="hljs-built_in">test</span> \<br>      --os linux --<span class="hljs-built_in">arch</span> x86_64<br><br>$ docker manifest annotate username/test \<br>      username/arm64v8-<span class="hljs-built_in">test</span> \<br>      --os linux --<span class="hljs-built_in">arch</span> arm64 --variant v8<br></code></pre></td></tr></table></figure><h3 id="查看manifest支持列表"><a href="#查看manifest支持列表" class="headerlink" title="查看manifest支持列表"></a>查看manifest支持列表</h3><p><code>docker manifest inspect username/test</code></p><h3 id="推送manifest列表"><a href="#推送manifest列表" class="headerlink" title="推送manifest列表"></a>推送manifest列表</h3><p><code>docker manifest push username/test</code></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li>如果想以root临时执行一个命令，不要使用su、sudo,而是使用gosu,见如下例子：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span><br>RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis<br><span class="hljs-comment"># 下载 gosu</span><br>RUN wget -O /usr/local/bin/gosu <span class="hljs-string">&quot;https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64&quot;</span> \<br>    &amp;&amp; <span class="hljs-built_in">chmod</span> +x /usr/local/bin/gosu \<br>    &amp;&amp; gosu nobody <span class="hljs-literal">true</span><br><span class="hljs-comment"># 设置 CMD，并以另外的用户执行</span><br>CMD [ <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;gosu&quot;</span>, <span class="hljs-string">&quot;redis&quot;</span>, <span class="hljs-string">&quot;redis-server&quot;</span> ]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2022/04/04/docker/"/>
    <url>/2022/04/04/docker/</url>
    
    <content type="html"><![CDATA[<h2 id="各个文件位置"><a href="#各个文件位置" class="headerlink" title="各个文件位置"></a>各个文件位置</h2><ul><li>本地资源的默认总目录：<code>/var/lib/docker/</code>,<strong>迁移</strong>docker就是复制该文件夹，<strong>重置</strong>就是删除该文件夹</li><li>容器信息：<code>containers</code></li><li>镜像信息：<code>image</code></li><li>镜像层文件：<code>overlay2</code></li></ul><h3 id="修改文件位置"><a href="#修改文件位置" class="headerlink" title="修改文件位置"></a>修改文件位置</h3><ul><li>方式1：为默认位置建立软链接</li><li>方式2：daemon启动时指定-g选项</li><li>方式3：修改&#x2F;etc&#x2F;docker&#x2F;daemon.json的”data-root”项</li></ul><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><ul><li>查看是否在docker.service文件中配置过镜像地址：<code>$ systemctl cat docker | grep &#39;\-\-registry\-mirror&#39;</code></li><li>上一步如果出现输出内容，修改文件去掉内容<code>--registry-mirror</code>，按接下来步骤配置</li><li>在&#x2F;etc&#x2F;docker&#x2F;daemon.json中写入下面内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span>,<br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>重启服务：<code>sudo systemctl daemon-reload;sudo systemctl restart docker</code></li><li>检查是否生效：<code>docker info</code></li></ul><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><ul><li>格式:<code>docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</code></li><li>默认地址是<code>docker.io</code>,仓库名默认为<code>library</code>,即官方镜像，标签默认是<code>latest</code></li><li>简化版：<code>docker pull ubuntu</code></li></ul><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><ul><li>一般命令：<code>docker image ls</code></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">显示包括中间层镜像在内的所有镜像</td><td align="center"></td></tr><tr><td align="center">-f&#x2F;–fliter</td><td align="center">过滤参数,见下</td><td align="center"></td></tr><tr><td align="center">–format</td><td align="center">自定义格式，见</td><td align="center"><code>docker image ls --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</code></td></tr></tbody></table><h4 id="f选项"><a href="#f选项" class="headerlink" title="-f选项"></a>-f选项</h4><ul><li>since&#x2F;before: <code>docker image ls -f since=mongo:3.2</code>,列出mongo:3.2之后建立的镜像</li><li>label: <code>docker image ls -f label=com.example.version=0.1</code></li></ul><h4 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="&lt;none&gt;虚悬镜像"></a><code>&lt;none&gt;</code>虚悬镜像</h4><ul><li>原因：docker pull或docker build导致镜像名被转移到最新版</li><li>只列出虚悬镜像：<code>docker image ls -f dangling=true</code></li><li>删除虚悬镜像：<code>docker image prune</code></li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><ul><li>格式：<code>docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code>,镜像可以是长&#x2F;短id,镜像名或镜像摘要</li></ul><h4 id="untagged和deleted"><a href="#untagged和deleted" class="headerlink" title="untagged和deleted"></a>untagged和deleted</h4><p>镜像对应多个tag,，只有所有tag都为untagged时，才真正删除，如果一个容器依赖一个镜像，要先删除容器，才能再删除镜像</p><h3 id="docker-commit-添加一层形成新的镜像（慎用）"><a href="#docker-commit-添加一层形成新的镜像（慎用）" class="headerlink" title="docker commit-添加一层形成新的镜像（慎用）"></a>docker commit-添加一层形成新的镜像（慎用）</h3><ul><li>说明：该命令会使一个容器形成一个新的镜像,最好不要这样，而是使用Dockerfile</li><li>格式：<code>docker commit [选项] &lt;容器ID或容器名&gt; [仓库名:标签]</code></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">–author</td><td align="center">说明作者</td></tr><tr><td align="center">–message</td><td align="center">添加说明信息</td></tr></tbody></table><h4 id="docker-history"><a href="#docker-history" class="headerlink" title="docker history"></a>docker history</h4><ul><li>说明：该命令用来查看某个镜像的提交历史</li><li>示例：<code>docker history [仓库名:标签]</code></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="容器运行流程"><a href="#容器运行流程" class="headerlink" title="容器运行流程"></a>容器运行流程</h3><ol><li>检查本地是否存在指定的镜像，不存在就从registry下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个ip地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ol><h3 id="运行容器docker-run"><a href="#运行容器docker-run" class="headerlink" title="运行容器docker run"></a>运行容器<code>docker run</code></h3><ul><li><strong>格式：</strong><code>docker run [OPTIONS] image</code></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-c&#x2F;–cpu-shares</td><td align="center">调整容器使用cpu的权重</td></tr><tr><td align="center">-d</td><td align="center">后台运行，此时容器不会把输出的结果打印到宿主机上面，<code>docker container logs &lt;container id or name&gt;</code>可以查看结果</td></tr><tr><td align="center">–dns&#x3D;[ip_address]</td><td align="center">设置dns服务器</td></tr><tr><td align="center">–dns-search&#x3D;[DOMAIN]</td><td align="center">设定容器搜索域</td></tr><tr><td align="center">–env [VAR&#x3D;value]</td><td align="center">传递环境变量</td></tr><tr><td align="center">–env-file [file]</td><td align="center">从file中引入环境变量</td></tr><tr><td align="center">-h&#x2F;–hostname&#x3D;[HOSTNAME]</td><td align="center">设定容器主机名，比较鸡肋，只能在容器内部显示</td></tr><tr><td align="center">-i</td><td align="center">交互式操作,让容器的标准输入保持打开</td></tr><tr><td align="center">-m</td><td align="center">–memory[&#x3D;MEMORY]</td></tr><tr><td align="center">–mount</td><td align="center">挂载数据卷或主机目录</td></tr><tr><td align="center">–name [name]</td><td align="center">指定容器的名字</td></tr><tr><td align="center">–network [my-net]</td><td align="center">见连接容器</td></tr><tr><td align="center">-p</td><td align="center">见端口映射</td></tr><tr><td align="center">-P</td><td align="center">随机映射镜像的端口</td></tr><tr><td align="center">–rm</td><td align="center">容器退出后随之将其删除</td></tr><tr><td align="center">-t</td><td align="center">代表终端，让Docker分配一个伪终端并邦到标准输入</td></tr><tr><td align="center">-u&#x3D;[username]</td><td align="center">设置进程用户名</td></tr><tr><td align="center">-v [宿主机路径]:[容器路径]</td><td align="center">映射路径</td></tr><tr><td align="center">–volumes-from</td><td align="center">从别的容器中挂载卷</td></tr></tbody></table><h3 id="查看容器的信息–docker-container-ls"><a href="#查看容器的信息–docker-container-ls" class="headerlink" title="查看容器的信息–docker container ls"></a>查看容器的信息–docker container ls</h3><ul><li><strong>格式：</strong><code>docker container ls</code></li><li>-a:列出终止状态的容器</li></ul><h3 id="终止容器–docker-container-stop"><a href="#终止容器–docker-container-stop" class="headerlink" title="终止容器–docker container stop"></a>终止容器–docker container stop</h3><ul><li><strong>格式：</strong><code>docker container stop [container id or names]</code></li></ul><h3 id="启动已终止容器–docker-container-start"><a href="#启动已终止容器–docker-container-start" class="headerlink" title="启动已终止容器–docker container start"></a>启动已终止容器–docker container start</h3><ul><li><strong>格式：</strong><code>docker container start [container id or names]</code></li></ul><h3 id="重启容器–docker-container-restart"><a href="#重启容器–docker-container-restart" class="headerlink" title="重启容器–docker container restart"></a>重启容器–docker container restart</h3><ul><li><strong>格式：</strong><code>docker container restart [container id or names]</code></li></ul><h3 id="查看容器的日志–docker-container-logs"><a href="#查看容器的日志–docker-container-logs" class="headerlink" title="查看容器的日志–docker container logs"></a>查看容器的日志–docker container logs</h3><ul><li><strong>格式：</strong><code>docker container logs [container ID or NAMES]</code></li></ul><h3 id="进入后台运行的容器–docker-attach-exec"><a href="#进入后台运行的容器–docker-attach-exec" class="headerlink" title="进入后台运行的容器–docker attach&#x2F;exec"></a>进入后台运行的容器–docker attach&#x2F;exec</h3><ul><li>建议使用exec,使用attach,从stdin退出，会导致容器的停止，exec就没这个问题</li><li>attach格式：<code>docker attach [id or names]</code></li></ul><h4 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h4><ul><li><strong>格式：</strong><code>docker exec -it [id or names]</code></li><li>-it选项和docker run一样</li></ul><h3 id="导出、导入容器–docker-export-import"><a href="#导出、导入容器–docker-export-import" class="headerlink" title="导出、导入容器–docker export&#x2F;import"></a>导出、导入容器–docker export&#x2F;import</h3><ul><li>导出容器：<code>docker export [id] &gt; xx.tar</code></li><li>导入容器快照成镜像：<code>cat xx.tar | docker import - test/ubuntu:v1.0</code>,支持url:<code>$ docker import http://example.com/exampleimage.tgz example/imagerepo</code></li><li>docker load和docker import:docker import会丢弃所有历史记录和元数据信息，docker load则会保留完整记录</li></ul><h3 id="删除容器–docker-container-rm"><a href="#删除容器–docker-container-rm" class="headerlink" title="删除容器–docker container rm"></a>删除容器–docker container rm</h3><ul><li><strong>格式：</strong><code>docker container rm [container id or names]</code></li><li>-f:删除一个运行中的容器</li></ul><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><ul><li>注册：在官网<a href="https://hub.docker.com免费注册一个docker帐号/">https://hub.docker.com免费注册一个Docker帐号</a></li><li>登录：<code>docker login</code>命令交互式输入用户名和密码</li><li>搜索：<code>docker search [关键字]</code>支持<code>--filter=stars=N</code>仅显示收藏数量N以上的镜像</li><li>拉取：见镜像拉取</li><li>推送：推送前先标记下<code>dockeer tag [image:tag] [username/xx:xx]</code>，<code>docker push username/xx:xx</code></li></ul><h3 id="私有仓库–-docker-registry"><a href="#私有仓库–-docker-registry" class="headerlink" title="私有仓库–&gt;docker-registry"></a>私有仓库–&gt;docker-registry</h3><ul><li>使用官方registry镜像：<code>$ docker run -d -p 5000:5000 --restart=always --name registry registry</code></li><li>默认情况下仓库会在容器中的<code>/var/lib/registry</code>目录下,可以用-v选项映射</li><li>标记镜像<code>git tag</code>:<code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code></li><li>推送：<code>docker push 127.0.0.1:5000/ubuntu:latest</code></li><li>拉取：<code>docker pull 127.0.0.1:5000/ubuntu:latest</code></li><li>取消非https限制：默认情况下docker不允许非https方式推送，对于使用systemd的系统，可以在&#x2F;etc&#x2F;docker&#x2F;daemon.json中写入如下内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;registry-mirror&quot;</span>: [<br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span>,<br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<br>    <span class="hljs-string">&quot;192.168.199.100:5000&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>私有仓库删除镜像可能不会回收空间，可以使用Nexus3.x软件搭配</li></ul><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><ul><li>特性<ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>数据卷会默认一直存在，即使容器被删除</li></ul></li><li>创建一个数据卷：<code>docker volume create my-vol</code></li><li>查看数据卷：<code>docker volume ls</code></li><li>查看指定数据卷信息：<code>docker volume inspect my-vol</code></li><li>挂载数据卷<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -P \<br>    --name web \<br>    <span class="hljs-comment"># -v my-vol:/usr/share/nginx/html \</span><br>    --mount <span class="hljs-built_in">source</span>=my-vol,target=/usr/share/nginx/html \<br>    nginx:alpine<br></code></pre></td></tr></table></figure></li><li>删除数据卷：<code>docker volume rm my-vol</code></li></ul><h3 id="挂载主机目录为数据卷"><a href="#挂载主机目录为数据卷" class="headerlink" title="挂载主机目录为数据卷"></a>挂载主机目录为数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可以不加readonly,那样权限就是读写</span><br>docker run -d -P \<br>    --name web \<br>    <span class="hljs-comment"># -v /src/webapp:/usr/share/nginx/html:ro \</span><br>    --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=/src/webapp,target=/usr/share/nginx/html,<span class="hljs-built_in">readonly</span> \<br>    nginx:alpine<br></code></pre></td></tr></table></figure><p>可以挂载指定文件，把上面source和target换成文件即可</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>使用-p选项</p><ul><li>映射所有接口地址：<code>-p hostPort:containerPort</code></li><li>映射到指定地址的指定端口：<code>-p ip:hostPort:containerPort</code></li><li>映射到指定地址的任意端口：<code>-p ip::containerPort</code></li><li>标记udp: <code>-p xxport:xxport/udp</code></li><li>查看容器的端口映射：<code>docker port [id or name] [containerPort]</code></li></ul><h3 id="容器互联-两个容器"><a href="#容器互联-两个容器" class="headerlink" title="容器互联(两个容器)"></a>容器互联(两个容器)</h3><p>如果大于两个容器的互联建议使用Docker Compose</p><ul><li>新建网络：<code>docker network create -d bridge my-net</code>,-d选项有bridge和overlay(见swarm mode)</li><li>连接容器：<code>$ docker run -it --rm --name busybox1 --network my-net busybox sh</code>,<code>$ docker run -it --rm --name busybox1 --network my-net busybox2 sh</code></li><li>在各个容器中ping：<code>ping busybox2</code></li></ul><h3 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h3><p>容器的DNS设置跟随宿主主机，默认使用主机上的&#x2F;etc&#x2F;resolv.conf(–dns-search –dns会改变默认设置),如果配置全部容器的DNS可以在<code>/etc/docker/daemon.json</code>增加以下内容设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;dns&quot;</span> : [<br>    <span class="hljs-string">&quot;114.114.114.114&quot;</span>,<br>    <span class="hljs-string">&quot;8.8.8.8&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="docker命令汇总"><a href="#docker命令汇总" class="headerlink" title="docker命令汇总"></a>docker命令汇总</h2><h3 id="客户端选项"><a href="#客户端选项" class="headerlink" title="客户端选项"></a>客户端选项</h3><ul><li>–config&#x3D;””：指定客户端配置文件，默认为 ~&#x2F;.docker；</li><li>-D&#x3D;true|false：是否使用 debug 模式。默认不开启；</li><li>-H, –host&#x3D;[]：指定命令对应 Docker 守护进程的监听接口，可以为 unix 套接字 unix:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;socket，文件句柄 fd:&#x2F;&#x2F;socketfd 或 tcp 套接字 tcp:&#x2F;&#x2F;[host[:port]]，默认为 unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock；</li><li>-l, –log-level&#x3D;”debug|info|warn|error|fatal”：指定日志输出级别；</li><li>–tls&#x3D;true|false：是否对 Docker 守护进程启用 TLS 安全机制，默认为否；</li><li>–tlscacert&#x3D;&#x2F;.docker&#x2F;ca.pem：TLS CA 签名的可信证书文件路径；</li><li>–tlscert&#x3D;&#x2F;.docker&#x2F;cert.pem：TLS 可信证书文件路径；</li><li>–tlscert&#x3D;&#x2F;.docker&#x2F;key.pem：TLS 密钥文件路径；</li><li>–tlsverify&#x3D;true|false：启用 TLS 校验，默认为否。</li></ul><h3 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h3><ul><li>attach：依附到一个正在运行的容器中；</li><li>build：从一个 Dockerfile 创建一个镜像；</li><li>commit：从一个容器的修改中创建一个新的镜像；</li><li>cp：在容器和本地宿主系统之间复制文件中；</li><li>create：创建一个新容器，但并不运行它；</li><li>diff：检查一个容器内文件系统的修改，包括修改和增加；</li><li>events：从服务端获取实时的事件；</li><li>exec：在运行的容器内执行命令；</li><li>export：导出容器内容为一个 tar 包；</li><li>history：显示一个镜像的历史信息；</li><li>images：列出存在的镜像；</li><li>import：导入一个文件（典型为 tar 包）路径或目录来创建一个本地镜像；</li><li>info：显示一些相关的系统信息；</li><li>inspect：显示一个容器的具体配置信息；</li><li>kill：关闭一个运行中的容器 (包括进程和所有相关资源)；</li><li>load：从一个 tar 包中加载一个镜像；</li><li>login：注册或登录到一个 Docker 的仓库服务器；</li><li>logout：从 Docker 的仓库服务器登出；</li><li>logs：获取容器的 log 信息；</li><li>network：管理 Docker 的网络，包括查看、创建、删除、挂载、卸载等；</li><li>node：管理 swarm 集群中的节点，包括查看、更新、删除、提升&#x2F;取消管理节点等；</li><li>pause：暂停一个容器中的所有进程；</li><li>port：查找一个 nat 到一个私有网口的公共口；</li><li>ps：列出主机上的容器；</li><li>pull：从一个Docker的仓库服务器下拉一个镜像或仓库；</li><li>push：将一个镜像或者仓库推送到一个 Docker 的注册服务器；</li><li>rename：重命名一个容器；</li><li>restart：重启一个运行中的容器；</li><li>rm：删除给定的若干个容器；</li><li>rmi：删除给定的若干个镜像；</li><li>run：创建一个新容器，并在其中运行给定命令；</li><li>save：保存一个镜像为 tar 包文件；</li><li>search：在 Docker index 中搜索一个镜像；</li><li>service：管理 Docker 所启动的应用服务，包括创建、更新、删除等；</li><li>start：启动一个容器；</li><li>stats：输出（一个或多个）容器的资源使用统计信息；</li><li>stop：终止一个运行中的容器；</li><li>swarm：管理 Docker swarm 集群，包括创建、加入、退出、更新等；</li><li>tag：为一个镜像打标签；</li><li>top：查看一个容器中的正在运行的进程信息；</li><li>unpause：将一个容器内所有的进程从暂停状态中恢复；</li><li>update：更新指定的若干容器的配置信息；</li><li>version：输出 Docker 的版本信息；</li><li>volume：管理 Docker volume，包括查看、创建、删除等；</li><li>wait：阻塞直到一个容器终止，然后输出它的退出符。</li></ul><h3 id="服务端命令选项"><a href="#服务端命令选项" class="headerlink" title="服务端命令选项"></a>服务端命令选项</h3><ul><li>–api-cors-header&#x3D;””：CORS 头部域，默认不允许 CORS，要允许任意的跨域访问，可以指定为 <code>*</code>；</li><li>–authorization-plugin&#x3D;””：载入认证的插件；</li><li>-b&#x3D;””：将容器挂载到一个已存在的网桥上。指定为 none 时则禁用容器的网络，与 –bip 选项互斥；</li><li>–bip&#x3D;””：让动态创建的 docker0 网桥采用给定的 CIDR 地址; 与 -b 选项互斥；</li><li>–cgroup-parent&#x3D;””：指定 cgroup 的父组，默认 fs cgroup 驱动为 &#x2F;docker，systemd cgroup 驱动为 system.slice；</li><li>–cluster-store&#x3D;””：构成集群（如 Swarm）时，集群键值数据库服务地址；</li><li>–cluster-advertise&#x3D;””：构成集群时，自身的被访问地址，可以为 host:port 或 interface:port；</li><li>–cluster-store-opt&#x3D;””：构成集群时，键值数据库的配置选项；</li><li>–config-file&#x3D;”&#x2F;etc&#x2F;docker&#x2F;daemon.json”：daemon 配置文件路径；</li><li>–containerd&#x3D;””：containerd 文件的路径；</li><li>-D, –debug&#x3D;true|false：是否使用 Debug 模式。缺省为 false；</li><li>–default-gateway&#x3D;””：容器的 IPv4 网关地址，必须在网桥的子网段内；</li><li>–default-gateway-v6&#x3D;””：容器的 IPv6 网关地址；</li><li>–default-ulimit&#x3D;[]：默认的 ulimit 值；</li><li>–disable-legacy-registry&#x3D;true|false：是否允许访问旧版本的镜像仓库服务器；</li><li>–dns&#x3D;””：指定容器使用的 DNS 服务器地址；</li><li>–dns-opt&#x3D;””：DNS 选项；</li><li>–dns-search&#x3D;[]：DNS 搜索域；</li><li>–exec-opt&#x3D;[]：运行时的执行选项；</li><li>–exec-root&#x3D;””：容器执行状态文件的根路径，默认为 &#x2F;var&#x2F;run&#x2F;docker；</li><li>–fixed-cidr&#x3D;””：限定分配 IPv4 地址范围；</li><li>–fixed-cidr-v6&#x3D;””：限定分配 IPv6 地址范围；</li><li>-G, –group&#x3D;””：分配给 unix 套接字的组，默认为 docker；</li><li>-g, –graph&#x3D;””：Docker 运行时的根路径，默认为 &#x2F;var&#x2F;lib&#x2F;docker；</li><li>-H, –host&#x3D;[]：指定命令对应 Docker daemon 的监听接口，可以为 unix 套接字 unix:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;socket，文件句柄 fd:&#x2F;&#x2F;socketfd 或 tcp 套接字 tcp:&#x2F;&#x2F;[host[:port]]，默认为 unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock；</li><li>–icc&#x3D;true|false：是否启用容器间以及跟 daemon 所在主机的通信。默认为 true。</li><li>–insecure-registry&#x3D;[]：允许访问给定的非安全仓库服务；</li><li>–ip&#x3D;””：绑定容器端口时候的默认 IP 地址。缺省为 0.0.0.0；</li><li>–ip-forward&#x3D;true|false：是否检查启动在 Docker 主机上的启用 IP 转发服务，默认开启。注意关闭该选项将不对系统转发能力进行任何检查修改；</li><li>–ip-masq&#x3D;true|false：是否进行地址伪装，用于容器访问外部网络，默认开启；</li><li>–iptables&#x3D;true|false：是否允许 Docker 添加 iptables 规则。缺省为 true；</li><li>–ipv6&#x3D;true|false：是否启用 IPv6 支持，默认关闭；</li><li>-l, –log-level&#x3D;”debug|info|warn|error|fatal”：指定日志输出级别；</li><li>–label&#x3D;”[]”：添加指定的键值对标注；</li><li>–log-driver&#x3D;”json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none”：指定日志后端驱动，默认为 json-file；</li><li>–log-opt&#x3D;[]：日志后端的选项；</li><li>–mtu&#x3D;VALUE：指定容器网络的 mtu；</li><li>-p&#x3D;””：指定 daemon 的 PID 文件路径。缺省为 &#x2F;var&#x2F;run&#x2F;docker.pid；</li><li>–raw-logs：输出原始，未加色彩的日志信息；</li><li>–registry-mirror&#x3D;<scheme>:&#x2F;&#x2F;<host>：指定 docker pull 时使用的注册服务器镜像地址；</li><li>-s, –storage-driver&#x3D;””：指定使用给定的存储后端；</li><li>–selinux-enabled&#x3D;true|false：是否启用 SELinux 支持。缺省值为 false。SELinux 目前尚不支持 overlay 存储驱动；</li><li>–storage-opt&#x3D;[]：驱动后端选项；</li><li>–tls&#x3D;true|false：是否对 Docker daemon 启用 TLS 安全机制，默认为否；</li><li>–tlscacert&#x3D;&#x2F;.docker&#x2F;ca.pem：TLS CA 签名的可信证书文件路径；</li><li>–tlscert&#x3D;&#x2F;.docker&#x2F;cert.pem：TLS 可信证书文件路径；</li><li>–tlscert&#x3D;&#x2F;.docker&#x2F;key.pem：TLS 密钥文件路径；</li><li>–tlsverify&#x3D;true|false：启用 TLS 校验，默认为否；</li><li>–userland-proxy&#x3D;true|false：是否使用用户态代理来实现容器间和出容器的回环通信，默认为 true；</li><li>–userns-remap&#x3D;default|uid:gid|user:group|user|uid：指定容器的用户命名空间，默认是创建新的 UID 和 GID 映射到容器内进程。</li></ul><h2 id="调试docker"><a href="#调试docker" class="headerlink" title="调试docker"></a>调试docker</h2><ul><li>开启debug模式：在&#x2F;etc&#x2F;docker&#x2F;daemon.json中添加：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-string">&quot;debug&quot;</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>重启守护进程<code>sudo kill -SIGHUP $(pidof dockerd)</code></li><li>检查内核日志<code>sudo dmesg | grep dockerd</code>,<code>sudo dmesg|grep runc</code></li><li>不响应时，杀死进程查看堆栈：<code>sudo kill -SIGUSR1 $(pidof dockerd)</code></li></ul><h2 id="高级网络"><a href="#高级网络" class="headerlink" title="高级网络"></a>高级网络</h2><h2 id="集群–Swarm-mod"><a href="#集群–Swarm-mod" class="headerlink" title="集群–Swarm mod"></a>集群–Swarm mod</h2><h2 id="Docker-Buildx–-未来docker-build"><a href="#Docker-Buildx–-未来docker-build" class="headerlink" title="Docker Buildx–&gt;未来docker build"></a>Docker Buildx–&gt;未来docker build</h2><h2 id="常用命令及问题"><a href="#常用命令及问题" class="headerlink" title="常用命令及问题"></a>常用命令及问题</h2><ul><li><code>docker system df</code>查看镜像、容器、数据卷所占用空间</li><li><code>docker image prune</code>批量清理临时镜像</li><li><code>docker container prune</code>删除所有终止状态的容器</li><li><code>docker volume prune</code>删除无主的数据卷</li><li><code>docker run [image] env</code>查看镜像支持的环境变量</li><li><code>docker stop $(docker container ls -q)</code>停止所有正在运行的容器</li><li><code>docker inspect --format &#39;&#123;&#123; .State.Pid &#125;&#125;&#39; &lt;CONTAINER ID or NAME&gt;</code>获取某个容器的PID信息</li><li><code>docker inspect --format &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; &lt;CONTAINER ID or NAME&gt;</code>获取某个容器的ip地址</li><li>给容器指定一个固定ip地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create -d bridge --subnet 172.25.0.0/16 my-net<br>docker run --network=my-net --ip=172.25.3.3 -itd --name=my-container busybox<br></code></pre></td></tr></table></figure></li><li>退出一个交互的终端而不终止，按<code>ctrl-p ctrl-q</code></li><li>Error:No public port 80 published for xxx<ul><li>创建镜像时 Dockerfile 要通过 EXPOSE 指定正确的开放端口；</li><li>容器启动时指定 PublishAllPort &#x3D; true。</li></ul></li><li>WARNING: Your kernel does not support cgroup swap limit. WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.<br>这是因为系统默认没有开启对内存和swap使用的统计功能，该功能会降低性能，可以通过以下方式开启：<ul><li>编辑<code>/etc/default/grub</code>配置<code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</code></li><li>更新grub:<code>sudo update-grub</code></li><li>重启</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文本处理瑞士军刀-扩展</title>
    <link href="/2022/03/22/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-%E6%89%A9%E5%B1%95/"/>
    <url>/2022/03/22/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="csvkit"><a href="#csvkit" class="headerlink" title="csvkit"></a>csvkit</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pip install csvkit</code></p><h3 id="csvlook"><a href="#csvlook" class="headerlink" title="csvlook"></a>csvlook</h3><p>使csv看起来更加人性化</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-H</td><td align="center">csvlook默认第一行为头，该选项取消该默认，认为无头</td></tr><tr><td align="center">-I</td><td align="center">不区分类型，不为数字的可读性加逗号等等</td></tr></tbody></table><h3 id="in2csv"><a href="#in2csv" class="headerlink" title="in2csv"></a>in2csv</h3><p>转换xlsx为csv,默认为第一个表单</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">–names</td><td align="center">打印所有表单名</td></tr><tr><td align="center">–sheet [name]</td><td align="center">转换指定的表单名</td></tr></tbody></table><h3 id="csvgrep"><a href="#csvgrep" class="headerlink" title="csvgrep"></a>csvgrep</h3><p>csv的抓取</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">–columns [column]</td><td align="center">指定某一列名</td></tr><tr><td align="center">–regex [regex]</td><td align="center">指定正则</td></tr></tbody></table><h3 id="sql2csv"><a href="#sql2csv" class="headerlink" title="sql2csv"></a>sql2csv</h3><p>把数据库中的内容转换成csv</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">–db [URL]</td><td align="center">数据库的URL</td></tr><tr><td align="center">–query</td><td align="center">输入SQL语句</td></tr></tbody></table><h3 id="csvsql"><a href="#csvsql" class="headerlink" title="csvsql"></a>csvsql</h3><p>应用sql语句到csv,主要使用SQLite的语法</p><h3 id="csvjoin"><a href="#csvjoin" class="headerlink" title="csvjoin"></a>csvjoin</h3><p>整合多个csv</p><h3 id="csvstat"><a href="#csvstat" class="headerlink" title="csvstat"></a>csvstat</h3><p>分析csv的命令</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">–freq</td><td align="center">每个值出现的频率</td></tr><tr><td align="center">–len</td><td align="center">不知道啥玩意</td></tr><tr><td align="center">–max</td><td align="center">每列最大值</td></tr><tr><td align="center">–min</td><td align="center">每列最小值</td></tr><tr><td align="center">–mean</td><td align="center">每列平均数</td></tr><tr><td align="center">–median</td><td align="center">每列中位数</td></tr><tr><td align="center">–nulls</td><td align="center">每列是否含null</td></tr><tr><td align="center">–stdev</td><td align="center">每列标准差</td></tr><tr><td align="center">–sum</td><td align="center">每列和</td></tr><tr><td align="center">–unique</td><td align="center">统计每一列不同的值</td></tr></tbody></table><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><code>seq 5 | header -a val | csvsql --query &quot;SELECT SUM(val) AS sum FROM stdin&quot;</code></p><h3 id="csvcut"><a href="#csvcut" class="headerlink" title="csvcut"></a>csvcut</h3><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">指定想要的列名,也可以指定数字，表示第几列，从1开始,以逗号分隔</td></tr><tr><td align="center">-C</td><td align="center">剔除某些列名，和-c相反</td></tr></tbody></table><h2 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h2><p>linux发行版直接安装，使json格式可读性更好</p><h2 id="sample-stream"><a href="#sample-stream" class="headerlink" title="sample-stream"></a>sample-stream</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><code>pip install sample-stream</code></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>这是一个处理流的命令</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-s</td><td align="center">10s后关闭该流</td></tr></tbody></table><h2 id="rush"><a href="#rush" class="headerlink" title="rush"></a>rush</h2><p>一个小仓库<a href="https://github.com/jeroenjanssens/rush%EF%BC%8C%E7%94%A8%E6%9D%A5%E7%94%BB%E5%9B%BE">https://github.com/jeroenjanssens/rush，用来画图</a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol><li>安装R语言<br><code>sudo pacman -S r</code></li><li>进入R命令端<br><code>sudo R</code></li><li>安装remote包<br><code>install.packages(&quot;remotes&quot;)</code></li><li>安装rush包,该步骤我运行两次才成功，要花费大量编译时间<br><code>remotes::install_github(&quot;jeroenjanssens/rush&quot;)</code></li></ol><h2 id="pup"><a href="#pup" class="headerlink" title="pup"></a>pup</h2><p>html可读性提升工具</p><h2 id="moreutils"><a href="#moreutils" class="headerlink" title="moreutils"></a>moreutils</h2><p>是一个工具集</p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p><code>sudo pacman -S moreutils</code></p><h3 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h3><p>在没一行前面加上当前时间戳</p><h2 id="文本转换"><a href="#文本转换" class="headerlink" title="文本转换"></a>文本转换</h2><ul><li>json2csv:<a href="https://github.com/jehiah/json2csv">https://github.com/jehiah/json2csv</a></li><li>xml2json:pacman官方库有两个版本</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>curl和https</title>
    <link href="/2022/03/15/curl%E5%92%8Chttps/"/>
    <url>/2022/03/15/curl%E5%92%8Chttps/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li>HTTP&#x2F;2和HTTP&#x2F;3的头部通常会被curl压缩发送，但是-v选项总是把它们解压成HTTP&#x2F;1.1的样子</li><li>HTTP默认端口：80，HTTPS默认端口：443</li><li>HTTP有4种方法：GET，POST，HEAD，PUT,OPTIONS</li><li>curl默认的http版本为HTTP&#x2F;1.1,默认的https版本为HTTP&#x2F;2</li></ul><h3 id="返回码"><a href="#返回码" class="headerlink" title="返回码"></a>返回码</h3><ul><li>1XX：瞬态响应，更多内容即将发生</li><li>2XX：成功</li><li>3XX：重定向<ul><li>301:永久重定向，当一个url第一次返回该值时，重定向的内容将被浏览器缓存，下次该url不起作用，直接访问重定向内容(浏览器总是使用GET，即使第一次访问时用的是POST),curl永远不会缓存</li><li>302:暂时重定向，不会缓存,重定向总是使用GET</li><li>303:同302,但是更接近于间接访问的概念</li><li>307:暂时重定向，不会缓存，区别在于它会保持第一次访问的方法</li><li>308:永久重定向，区别在于它会保持第一次访问的方法</li></ul></li><li>4XX：服务器无法提供或不会提供要求的内容<ul><li>401:服务器需要一个认证，通常包含头<code>WWW-Authenticate:</code>,包含了服务器支持的认证方法(Basic)</li><li>407:代理服务器需要一个认证，通常包含头<code>Proxy-Authenticate:</code>,包含了代理支持的认证方法</li></ul></li><li>5XX：服务器出现问题</li></ul><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>通过URL来形成HTTP头<br><img src="/images/httpRequest.png"><br><strong>request例子</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET / HTTP/1.1<br>User-agent: curl/2000<br>Host: example.com<br></code></pre></td></tr></table></figure><p><strong>response例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">HTTP/1.1 200 OK<br>Server: example-server/1.1<br>Content-Length: 5<br>Content-Type: plain/text<br><br>hello<br></code></pre></td></tr></table></figure><h3 id="Transfer-Encoding-chunked"><a href="#Transfer-Encoding-chunked" class="headerlink" title="Transfer-Encoding: chunked"></a>Transfer-Encoding: chunked</h3><p>有时response可能没有Content-Length，而是<strong>Transfer-Encoding: chunked</strong>，这只有HTTP1.1服务才有，它表示内容是一系列的块，每块开头有显示该块的十六进制大小，结束时，也会有表示结束的0块。curl会自动解码</p><h3 id="Content-Encoding-gzip"><a href="#Content-Encoding-gzip" class="headerlink" title="Content-Encoding: gzip"></a>Content-Encoding: gzip</h3><p>body是经过压缩的,curl会自动解压</p><h3 id="Expect-100-continue"><a href="#Expect-100-continue" class="headerlink" title="Expect:100-continue"></a>Expect:100-continue</h3><p>很少有服务器支持这一特性，且HTTP&#x2F;2及以上支持在没关闭连接的情况下停止持续传输,这使得该特性无意义。(该特性到底是啥不懂)post时，curl会默认</p><h3 id="透明压缩"><a href="#透明压缩" class="headerlink" title="透明压缩"></a>透明压缩</h3><p>过于老式，不常用，可以使用–tr-encoding来使用，前提是服务器支持</p><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><p>服务器通过<strong>Etag</strong>来标识一个资源的版本，这样便于客户判断是否资源更新</p><h3 id="Multipart-formposts"><a href="#Multipart-formposts" class="headerlink" title="Multipart formposts"></a>Multipart formposts</h3><p>这对应html中form的enctype&#x3D;multiparg&#x2F;form-data,可以通过-F选项指定form:<br><code>curl -F person=anonymous -F secret=@file.txt http://example.com/submit.cgi</code><br><strong>Header内容：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /submit.cgi HTTP/1.1<br>Host: example.com<br>User-Agent: curl/7.46.0<br>Accept: */*<br>Content-Length: 313<br>Expect: 100-<span class="hljs-built_in">continue</span><br>Content-Type: multipart/form-data; boundary=------------------------d74496d66958873e<br></code></pre></td></tr></table></figure><p><strong>Body内容：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">--------------------------d74496d66958873e<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;person&quot;</span><br><br>anonymous<br>--------------------------d74496d66958873e<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;secret&quot;</span>; filename=<span class="hljs-string">&quot;file.txt&quot;</span><br>Content-Type: text/plain<br><br>contents of the file<br>--------------------------d74496d66958873e--<br></code></pre></td></tr></table></figure><p>html的form表单中enctype默认为<code>application/x-www-form-urlencoded</code>,此时只需要-d选项即可</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li>有时服务器不会直接返回内容，而是告诉你该资源所在位置，此时响应中包含关键字<code>Location:</code></li><li>有时重定向会指向不同主机，此时用户名密码或证书等可能无法使用，无论如何信任的话，可以使用–location-trusted</li><li>浏览器支持更多的重定向方式，curl不支持他们，比如html里meta元素，javascript的动态重定向</li></ul><h3 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h3><p>cookie设置的一个头</p><h3 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h3><p>强制升级http版本的头，过老的服务器可能会出错</p><h3 id="Alt-Svc"><a href="#Alt-Svc" class="headerlink" title="Alt-Svc"></a>Alt-Svc</h3><p>响应体中的头，告诉客户还有哪些主机可以获得同样资源,只能在https中使用，并且这是使用http3的唯一方法（截至2019）</p><h3 id="http3"><a href="#http3" class="headerlink" title="http3"></a>http3</h3><p>http3是实验版本，是为了适应QUIC协议（一个基于UDP的可靠安全的协议），只能通过https,curl没有针对http3连结失败时作自动降级处理，而是直接返回错误</p><h2 id="代理-就是web缓存服务器"><a href="#代理-就是web缓存服务器" class="headerlink" title="代理(就是web缓存服务器)"></a>代理(就是web缓存服务器)</h2><ul><li>HTTP代理为了安全，使用<strong>CONNECT</strong>方法</li><li>HTTP代理可以代理FTP,此时curl将认为就是HTTP,FTP所有特性无效</li><li>MITM代理可以监控加密的流量</li><li>代理认证失败，拒绝代理，会返回407</li><li>HTTPS代理的默认端口为443</li><li>curl中与代理相关的环境变量<ul><li>[scheme]_proxy:指定某个协议的默认代理,等价于-x选项,除了http_proxy只能全部小写(CGI的原因),其他形式可以用全部大写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">http_proxy=http://proxy.example.com:80<br>curl -v www.example.com<br></code></pre></td></tr></table></figure></li><li>ALL_PROXY:所有url都走该代理</li><li>NO_PROXY:某些url不走该代理，用<code>,</code>分隔多个url，等效于–noproxy</li></ul></li></ul><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><ul><li>FTP协议使用两个tcp连接，一个用来建立认证，并进入到正确的文件夹内(控制连接)，一个用来传输文件，curl默认是被动连接（即客户端发送PASV或EPSV命令给服务器,服务器新开个端口，curl用该端口连接传输）,主动连接见-P，被动连接见–ftp-pasv</li><li>curl传输文件时有三种方法(见–ftp-method)：</li><li>FTPS的默认端口是990,可以通过<code>scheme:ftps://</code>指定，抑或使用<code>--ssl,--ssl-reqd</code></li><li>FTPS无法推广的原因是，FTP的第二个连接是新建的tcp连接，防火墙和其他网络工具检查辨别是FTP传输并采取一些规则或设置应用到该连接,但如果加密，防火墙等就无法判断，并无法应用一些规则</li></ul><h2 id="URLs-URIs"><a href="#URLs-URIs" class="headerlink" title="URLs(URIs)"></a>URLs(URIs)</h2><p>需要注意的是现代浏览器的地址栏里支持IRIs,一个URLs的超集(更强大，支持空白字符等等)</p><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><p>scheme就是分隔符前面的内容,是协议吗？不可以包含任何空格</p><ul><li>分隔符:<code>://</code>curl只支持双斜杠的，有标准是单斜杠的</li><li>curl会自动纠错一些scheme格式以及自动推测(通过选项–proto-default设置)</li></ul><h3 id="Name-and-password-非主流"><a href="#Name-and-password-非主流" class="headerlink" title="Name and password(非主流)"></a>Name and password(非主流)</h3><p>scheme及分隔符之后可能跟着用户名和密码,不过这风险很大,正慢慢淘汰,同时你也可以通过选项等方式来指定。一般格式如下：<br><code>curl ftp://user:password@example.com/</code></p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>host就是主机，可以是数字地址本身或简单的域名</p><ul><li>ipv4:<code>curl http://127.0.0.1/</code></li><li>ipv6:<code>curl http://[::1]/</code></li></ul><h3 id="port-number"><a href="#port-number" class="headerlink" title="port number"></a>port number</h3><p>如果端口号没指明，那么就会使用各个协议的默认端口。<br>通常在主机名后指明,用冒号和数字。为十进制数范围在[0-65535]</p><ul><li>ipv4:<code>curl http://example.com:8080/</code></li><li>ipv6:<code>curl http://[fdea::1]:8080/</code></li></ul><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>每个url包含路径,如果没指明则是根目录<code>/</code>,如下是等价的<br><code>https://example.com</code>&#x3D;&#x3D;&gt;<code>https://example.com/</code></p><h3 id="FTP-type-FTP特有很少用的特性"><a href="#FTP-type-FTP特有很少用的特性" class="headerlink" title="FTP type(FTP特有很少用的特性)"></a>FTP type(FTP特有很少用的特性)</h3><p>该特性可以让你指明文件类型,指定不同的类型ftp协议相应的用不同传输,curl默认以二进制格式传递FTP协议</p><ul><li>A:指明传输类型为ASCII<br><code>curl &quot;ftp://example.com/foo;type=A&quot;</code></li><li>I:指明传输类型为二进制<br><code>curl &quot;ftp://example.com/foo;type=I&quot;</code></li><li>D:指明传输类型为目录(此时不要以斜杠结尾)<br><code>curl &quot;ftp://example.com/foo;type=D&quot;</code></li></ul><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><p>由<code>#</code>标识</p><ul><li>URLs提供fragment，但curl传递时，会忽略它,(就是浏览器中的定位,跟网页屏幕位置有关)</li><li>有时<code>#</code>处于路径中,为了方便你可用<code>%23</code>来代替<code>#</code><br><code>https://www.example.com/info.html#the-plot</code>&#x3D;&#x3D;&gt;<code>curl https://www.example.com/info.html%23the-plot</code></li></ul><h3 id="curl与URLs"><a href="#curl与URLs" class="headerlink" title="curl与URLs"></a>curl与URLs</h3><p>curl支持许多选项，不是可选项内容的都是URLs，可以支持多个URLs,从左到右一个个解析</p><ul><li>curl总是返回最后一个URL的错误代码(可以用–fail-early改变),</li><li>curl的选项总是应用所有URLs(当然存在例外(-o、-O)),要想应用不同的URL不同的option,可以使用<code>--next、-:</code></li><li>指定多个URLs,可以节省时间(如果多个URLs有相同主机，TCP将会一直保持链接)</li><li>默认是串行,可以指定并行(-Z),并行时的进度条和串行时有区别，该进度条是所有当前运行的并行任务的实时情况</li></ul><h4 id="globbing"><a href="#globbing" class="headerlink" title="globbing"></a>globbing</h4><p>有时想传递同一主机下的一系列资源，可以用<code>&#123;&#125;</code>和<code>[]</code>来指定，处于它们之间的内容称为[globbing],并且他们可以混用，此时为防止shell的副作用，应该用引号括起来URL，</p><ul><li><code>[]</code><ul><li><code>curl -O &quot;http://example.com/[1-100].png&quot;</code></li><li><code>curl -O &quot;http://example.com/[001-100].png&quot;</code>支持前导0</li><li><code>curl -O &quot;http://example.com/[001-100:2].png&quot;</code>取奇数</li><li><code>curl -O &quot;http://example.com/[a-z].png&quot;</code>支持字母</li></ul></li><li><code>&#123;&#125;</code><ul><li><code>curl -O &quot;http://example.com/&#123;one,two,three,alpha,beta&#125;.html&quot;</code></li></ul></li><li>-o选项里面可以通过<code>#[num]</code>来代表globbing内容,num从1开始编号<ul><li><code>curl &quot;http://&#123;one,two&#125;.example.com&quot; -o &quot;file_#1.txt&quot;</code></li><li><code>curl &quot;http://&#123;site,host&#125;.host[1-5].example.com&quot; -o &quot;subdir/#1_#2&quot;</code><br>globbing有时还可以用于-T选项，上传多个文件:<br><code>curl -T &#39;image[1-99].jpg&#39; ftp://ftp.example.com/upload/</code></li></ul></li></ul><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><h3 id="配置文件curlrc"><a href="#配置文件curlrc" class="headerlink" title="配置文件curlrc"></a>配置文件curlrc</h3><p>按以下优先级读取文件：</p><ol><li>“$CURL_HOME&#x2F;.curlrc”</li><li>“$XDG_CONFIG_HOME&#x2F;.curlrc”</li><li>“$HOME&#x2F;.curlrc”</li></ol><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="A-–user-agent"><a href="#A-–user-agent" class="headerlink" title="-A&#x2F;–user-agent"></a>-A&#x2F;–user-agent</h3><p>指明<code>User-Agent:</code>的值</p><h3 id="–alt-svc-cacheFile"><a href="#–alt-svc-cacheFile" class="headerlink" title="–alt-svc [cacheFile]"></a>–alt-svc [cacheFile]</h3><p>会尝试cacheFile定义中的可获得同样资源的主机地址，如果server响应并更新了<code>Alt-Svc:</code>,则也会自动更新到cacheFile中。</p><h3 id="–anyauth"><a href="#–anyauth" class="headerlink" title="–anyauth"></a>–anyauth</h3><p>curl首先不使用认证，如果服务器需要，curl将会尝试使用认证</p><h3 id="B"><a href="#B" class="headerlink" title="-B"></a>-B</h3><p>以二进制形式传输，curl默认就是二进制</p><h3 id="b-cookiesFile"><a href="#b-cookiesFile" class="headerlink" title="-b [cookiesFile]"></a>-b [cookiesFile]</h3><p>从文件中读取cookie，-c选项是写cookie</p><h3 id="–basic"><a href="#–basic" class="headerlink" title="–basic"></a>–basic</h3><p>使用Basic认证方法，默认的认证方法</p><h3 id="c-cookieFile"><a href="#c-cookieFile" class="headerlink" title="-c [cookieFile]"></a>-c [cookieFile]</h3><p>写入cookie到一个文件中</p><h3 id="C-–continue-at-num"><a href="#C-–continue-at-num" class="headerlink" title="-C&#x2F;–continue-at [num&#x2F;-]"></a>-C&#x2F;–continue-at [num&#x2F;-]</h3><p>指明从num byte offset开始继续下载或<code>-</code>curl根据已有的下载文件确定从哪开始继续下载。<br><strong>例1</strong>:<code>curl --continue-at 100 ftp://example.com/bigfile</code><br><strong>例2</strong>:<code>curl --continue-at - http://example.com/bigfile -O</code></p><h3 id="–cacert-path"><a href="#–cacert-path" class="headerlink" title="–cacert [path]"></a>–cacert [path]</h3><p>设置CA证书路径</p><h3 id="–cert-file-passwd"><a href="#–cert-file-passwd" class="headerlink" title="–cert [file:passwd]"></a>–cert [file:passwd]</h3><p>TLS指定客户端的证书文件,待学习相关知识</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --cert mycert:mypassword https://example.com<br>curl --cert mycert:mypassword --key mykey https://example.com<br>curl --cert mycert:mypassword --cert-type PEM \<br>     --key mykey --key-type PEM https://example.com<br></code></pre></td></tr></table></figure><h3 id="–cert-type"><a href="#–cert-type" class="headerlink" title="–cert-type"></a>–cert-type</h3><p>见–cert例子</p><h3 id="–cert-status"><a href="#–cert-status" class="headerlink" title="–cert-status"></a>–cert-status</h3><p>这个TLS特性为OCSP stapling,比较新，目前仅有openssl,gnutls,nss支持，一般不使用</p><h3 id="–ciphers"><a href="#–ciphers" class="headerlink" title="–ciphers"></a>–ciphers</h3><p>TLS中ciphers,除非你知道你在干啥，否则慎用。</p><h3 id="–connect-to-source-name-source-port-destination-name-destination-port"><a href="#–connect-to-source-name-source-port-destination-name-destination-port" class="headerlink" title="–connect-to [source name:source port:destination name:destination port]"></a>–connect-to [source name:source port:destination name:destination port]</h3><p>有时负载均衡，一个host name其实由多个服务提供，有时你只想测试其中一个服务，可以用此选项，如下：<br><code>curl --connect-to www.example.com:80:load1.example.com:80 http://www.example.com</code></p><h3 id="–connect-timeout-num"><a href="#–connect-timeout-num" class="headerlink" title="–connect-timeout [num]"></a>–connect-timeout [num]</h3><p>指定tcp连接多长时间没反应算失败，单位秒，可以给出float类型数字</p><h3 id="–compressed"><a href="#–compressed" class="headerlink" title="–compressed"></a>–compressed</h3><p>http&#x2F;https,请求服务器提供压缩版本的内容，curl会在数据到达后自动解压，这只是加快传输速度，注意不能和另一个–tr-encoding混用，因为两者采用不同压缩</p><h3 id="d-–data-string-or-num"><a href="#d-–data-string-or-num" class="headerlink" title="-d&#x2F;–data [string or num]"></a>-d&#x2F;–data [string or num]</h3><p>发送的数据,simple POST,一下两种方式等价</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -d <span class="hljs-string">&#x27;name=admin&amp;shoesize=12&#x27;</span> http://example.com/<br>curl -d name=admin -d shoesize=12 http://example.com/<br><span class="hljs-comment">#从某个文件读取</span><br>curl -d @filename http://example.com<br></code></pre></td></tr></table></figure><p>从文件中读取时，会去除回车和换行，如果不想这样见–data-binary</p><h3 id="–data-binary"><a href="#–data-binary" class="headerlink" title="–data-binary"></a>–data-binary</h3><p>该选项从文件读取时，不会去除回车和换行</p><h3 id="–data-raw"><a href="#–data-raw" class="headerlink" title="–data-raw"></a>–data-raw</h3><p>-d选项的补充，主要是为了下面的情况:<br><code>curl --data-raw &#39;@string&#39; https://example.com</code></p><h3 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a>–data-urlencode</h3><p>把post内容使用url的安全编码(即把空格和一些不安全字符使用%xx%编码)，接受以下形式(只对内容进行编码):</p><ul><li>content</li><li>&#x3D;content</li><li>name&#x3D;content</li><li>@filename</li><li>name@filename</li></ul><h3 id="–digest"><a href="#–digest" class="headerlink" title="–digest"></a>–digest</h3><p>digest的认证方式</p><h3 id="–dns-interface"><a href="#–dns-interface" class="headerlink" title="–dns-interface"></a>–dns-interface</h3><p>指定dns走的网卡？</p><h3 id="–dns-ipv4-addr"><a href="#–dns-ipv4-addr" class="headerlink" title="–dns-ipv4-addr"></a>–dns-ipv4-addr</h3><p>指定ipv4的dns服务器</p><h3 id="–dns-ipv6-addr"><a href="#–dns-ipv6-addr" class="headerlink" title="–dns-ipv6-addr"></a>–dns-ipv6-addr</h3><p>指定ipv6的dns服务器</p><h3 id="–dns-servers"><a href="#–dns-servers" class="headerlink" title="–dns-servers"></a>–dns-servers</h3><p>指定一个dns服务器</p><h3 id="e-–referer"><a href="#e-–referer" class="headerlink" title="-e&#x2F;–referer"></a>-e&#x2F;–referer</h3><p>当在浏览器中，从一个页面，点击另一个页面，会形成一个<code>Referer:</code>的头，它说明是从哪个网站进去的，例如：<br><code>curl --referer http://comes-from.example.com https://www.example.com/</code></p><h3 id="–etag-save-etagSavedFile"><a href="#–etag-save-etagSavedFile" class="headerlink" title="–etag-save [etagSavedFile]"></a>–etag-save [etagSavedFile]</h3><p>把该资源的Etag保存到某文件中</p><h3 id="–etag-compare-etagFile"><a href="#–etag-compare-etagFile" class="headerlink" title="–etag-compare [etagFile]"></a>–etag-compare [etagFile]</h3><p>与本地文件中保存Etag做对比，只下载更新的，可以与–etag-save连用，达到自动更新的目的<br><code>curl --etag-compare etag.txt --etag-save etag.txt https://example.com/file -o output</code></p><h3 id="f-–fail"><a href="#f-–fail" class="headerlink" title="-f&#x2F;–fail"></a>-f&#x2F;–fail</h3><p>一般http返回4xx码时，curl也会认为是成功的一次传输，如果启用该选项，如果是4xx，curl将以22退出</p><h3 id="F"><a href="#F" class="headerlink" title="-F"></a>-F</h3><p>http的方法将是POST</p><h3 id="–fail-early"><a href="#–fail-early" class="headerlink" title="–fail-early"></a>–fail-early</h3><h3 id="–fail-with-body"><a href="#–fail-with-body" class="headerlink" title="–fail-with-body"></a>–fail-with-body</h3><p>同–fail</p><h3 id="–ftp-method-multicwd-nocwd-singlecwd"><a href="#–ftp-method-multicwd-nocwd-singlecwd" class="headerlink" title="–ftp-method [multicwd&#x2F;nocwd&#x2F;singlecwd]"></a>–ftp-method [multicwd&#x2F;nocwd&#x2F;singlecwd]</h3><ul><li>multicwd(curl默认方法)：<code>curl --ftp-method multicwd ftp://example.com/one/two/three/file.txt</code><br>等价于<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CWD one &lt; 250 OK. Current directory is /one CWD two &lt; 250 OK. Current directory is /one/two CWD three &lt; 250 OK. Current directory is /one/two/three RETR file.txt<br></code></pre></td></tr></table></figure></li><li>nocwd(并不符合标准):<code>curl --ftp-method nocwd ftp://example.com/one/two/three/file.txt</code><br>等价于<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RETR one/two/three/file.txt<br></code></pre></td></tr></table></figure></li><li>singlecwd(服务器不一定支持):<code>curl --ftp-method singlecwd ftp://example.com/one/two/three/file.txt</code><br>等价于<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CWD one/two/three &lt; 250 OK. Current directory is /one/two/three RETR file.txt<br></code></pre></td></tr></table></figure></li></ul><h3 id="–ftp-pasv"><a href="#–ftp-pasv" class="headerlink" title="–ftp-pasv"></a>–ftp-pasv</h3><p>curl默认就是ftp被动连接，这个选项是重新设置为被动连接</p><h3 id="–ftp-skip-pasv-ip"><a href="#–ftp-skip-pasv-ip" class="headerlink" title="–ftp-skip-pasv-ip"></a>–ftp-skip-pasv-ip</h3><p>有时服务器对于PASV被动建立连接命令会故意返回一个错的ip地址，此时该选项可以忽略该地址，使用控制连接的地址</p><h3 id="G-–get"><a href="#G-–get" class="headerlink" title="-G&#x2F;–get"></a>-G&#x2F;–get</h3><p>当指定-d等选项时，默认为post方法，此选项可以强制转成get，所有数据都追加在url末尾，以<code>?</code>分割</p><h3 id="h-–help"><a href="#h-–help" class="headerlink" title="-h&#x2F;–help"></a>-h&#x2F;–help</h3><h3 id="H-header-content"><a href="#H-header-content" class="headerlink" title="-H [header content]"></a>-H [header content]</h3><ul><li>自定义头部内容<br><code>curl -H &quot;Host: www.example.com&quot; http://localhost/</code></li><li>去除curl自动形成的头，只要不给值就行：<br><code>curl -H &quot;User-Agent:&quot; http://example.com/</code></li><li>去除所有头<br><code>curl -H &quot;Empty;&quot; http://example.com</code></li></ul><h3 id="–hsts-hstsFile"><a href="#–hsts-hstsFile" class="headerlink" title="–hsts [hstsFile]"></a>–hsts [hstsFile]</h3><p>HSTS是一个严格的传输安全协议，它保护https不被降级和中间cookie注入，整个过程中不能使用明文。该选项使curl读入某个server的HSTS缓存,然后自动更新，并且自动转换http为https:<br><code>curl --hsts hsts.txt https://example.com</code></p><h3 id="–http0-9"><a href="#–http0-9" class="headerlink" title="–http0.9"></a>–http0.9</h3><p>该版本非常不成熟，响应只有body，没有header,使用该选项是告诉curl接受该种响应</p><h3 id="–http1-0"><a href="#–http1-0" class="headerlink" title="–http1.0"></a>–http1.0</h3><p>尝试使用http1.0</p><h3 id="–http1-1"><a href="#–http1-1" class="headerlink" title="–http1.1"></a>–http1.1</h3><p>尝试使用http1.1</p><h3 id="–http2"><a href="#–http2" class="headerlink" title="–http2"></a>–http2</h3><p>尝试使用http2</p><h3 id="–http2-prior-knowledge"><a href="#–http2-prior-knowledge" class="headerlink" title="–http2-prior-knowledge"></a>–http2-prior-knowledge</h3><p>前提你确定已经知道服务器支持http2了，这个加快negotiate的速度</p><h3 id="–http3"><a href="#–http3" class="headerlink" title="–http3"></a>–http3</h3><p>尝试使用http3</p><h3 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h3><p>HTTP方法将是HEAD</p><h3 id="–ignore-content-length"><a href="#–ignore-content-length" class="headerlink" title="–ignore-content-length"></a>–ignore-content-length</h3><p>忽略头部的Content-Length信息（早期数据不可以超过2g,content-length可能是负的），直接接受数据</p><h3 id="–interface-ip-addr-or-some-interface"><a href="#–interface-ip-addr-or-some-interface" class="headerlink" title="–interface [ip addr or some interface]"></a>–interface [ip addr or some interface]</h3><p>指定哪个网络接口来传输流量，或者使用哪个原始ip地址（前提你有多个ip）这个不影响dns的接口，dns接口可用–dns-interface</p><h3 id="j-–junk-session-cookies"><a href="#j-–junk-session-cookies" class="headerlink" title="-j&#x2F;–junk-session-cookies"></a>-j&#x2F;–junk-session-cookies</h3><p>模拟浏览器重新打开，一个新的会话cookie<br><code>curl -j -b cookies.txt http://example.com/</code></p><h3 id="J-–remote-header-name"><a href="#J-–remote-header-name" class="headerlink" title="-J&#x2F;–remote-header-name"></a>-J&#x2F;–remote-header-name</h3><p>HTTP头可能提供<code>Content-Disposition:</code>,这其中包含了建议的文件名，这个选项使用该文件名作为输出，如果该内容存在，会覆盖-O选项。</p><ul><li>它只会保留文件名部分，忽略目录</li><li>CURL不会帮你解码，可能是个URL原码格式的文件名（浏览器会解码）</li></ul><h3 id="–json"><a href="#–json" class="headerlink" title="–json"></a>–json</h3><p>该选项是为了更好的post json格式的内容，等价于下面三个选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">--data [jsonformat]<br>--header <span class="hljs-string">&quot;Content-Type: application/json&quot;</span><br>--header <span class="hljs-string">&quot;Accept: application/json&quot;</span><br></code></pre></td></tr></table></figure><p>注意多次使用该选项时，curl只是简单的字符串拼接，并不会帮你合并，所以应该像下面这样使用：<br><code>curl --json @json.txt --json &quot;, &quot;end&quot;: &quot;true&quot;&#125;&#39; https://example.com/</code></p><h3 id="k-–insecure"><a href="#k-–insecure" class="headerlink" title="-k&#x2F;–insecure"></a>-k&#x2F;–insecure</h3><p>tls&#x2F;ssh协议中，curl会跳过检查known_hosts文件及本地安全证书，直接信任</p><h3 id="K-–config"><a href="#K-–config" class="headerlink" title="-K&#x2F;–config"></a>-K&#x2F;–config</h3><p><code>-K &lt;fileName&gt;</code><br>此选项是为了帮助过长的选项不好输在命令行中，fileName则可以保存这些选项</p><ul><li>一行一个选项，长选项可以省略<code>--</code></li><li>可以用<code>#</code>注释</li><li>选项和参数内容间可以用<code>=</code>或<code>:</code>使结构清晰</li><li>参数如果含空格，必须用双引号括起来,括号内只可以用下面这些转义字符<code>\\,\&quot;,\t,\n,\r,\v</code>,如果不用双引号,则遇到第一个空格就结束读取</li><li>文件内也可以指明url，必须如下格式<br><code>url = &quot;http://example.com&quot;</code></li></ul><h3 id="–keepalive-time-num"><a href="#–keepalive-time-num" class="headerlink" title="–keepalive-time [num]"></a>–keepalive-time [num]</h3><p>curl默认会保持无流量的tcp连接长达60s,这可以更改时间，单位为秒</p><h3 id="–key"><a href="#–key" class="headerlink" title="–key"></a>–key</h3><p>指定cert健，见–cert</p><h3 id="–key-type"><a href="#–key-type" class="headerlink" title="–key-type"></a>–key-type</h3><p>见–cert</p><h3 id="l-–list-only"><a href="#l-–list-only" class="headerlink" title="-l&#x2F;–list-only"></a>-l&#x2F;–list-only</h3><p>FTP协议中相当与使用NLST命令，可能不会list符号链接和目录</p><h3 id="L-–location"><a href="#L-–location" class="headerlink" title="-L&#x2F;–location"></a>-L&#x2F;–location</h3><p>如果返回重定向，则继续访问重定向的地址。默认最多50个。curl默认不会访问重定向的内容,</p><h3 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate "></a>–limit-rate <num></h3><p>参数是个数字，默认单位是byte，可以跟K&#x2F;M&#x2F;G，整个过程的平均速度将不超过这个值,也同样适用于上传速率</p><h3 id="–location-trusted"><a href="#–location-trusted" class="headerlink" title="–location-trusted"></a>–location-trusted</h3><p>永远信任重定向的任何主机，默认是不信任，因为，可能重定向不同主机</p><h3 id="–local-port-num-or-range"><a href="#–local-port-num-or-range" class="headerlink" title="–local-port [num or range]"></a>–local-port [num or range]</h3><p>通常不需要指定本地端口，但有时只有某些端口是开放的，指定curl的本地端口，可以指定一个范围，因为一个可能被占用了,最好不要指定1024以下的端口</p><h3 id="m-–max-time-num"><a href="#m-–max-time-num" class="headerlink" title="-m&#x2F;–max-time [num]"></a>-m&#x2F;–max-time [num]</h3><p>整个命令允许运行的最长时间，即使正在下载，也会立刻退出(退出码28)</p><h3 id="–mail-from"><a href="#–mail-from" class="headerlink" title="–mail-from"></a>–mail-from</h3><p>smtp中指定发件人</p><h3 id="–mail-rcpt"><a href="#–mail-rcpt" class="headerlink" title="–mail-rcpt"></a>–mail-rcpt</h3><p>smtp中指定收件人</p><h3 id="–manual"><a href="#–manual" class="headerlink" title="–manual"></a>–manual</h3><h3 id="–max-filesize-num"><a href="#–max-filesize-num" class="headerlink" title="–max-filesize [num]"></a>–max-filesize [num]</h3><p>单位是byte，如果curl在传输开始可以获得将要下载的内容大小，该选项才会起作用，如果超过该大小，curl将会自动放弃。</p><h3 id="–max-redirs-num"><a href="#–max-redirs-num" class="headerlink" title="–max-redirs [num]"></a>–max-redirs [num]</h3><p>指定最多重定向次数，默认50个</p><h3 id="n-–netrc"><a href="#n-–netrc" class="headerlink" title="-n&#x2F;–netrc"></a>-n&#x2F;–netrc</h3><p>读取<code>~/.netrc</code>配置文件，该文件存储用户名密码，例子如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#以下的值都不许有空格，且可以写在一行</span><br>machine example.com <span class="hljs-comment">#可以填default,此时不需要machine关键字</span><br>login nanbert<br>password xxx <br>macdef xxx <span class="hljs-comment">#该选项curl不支持，会忽略</span><br></code></pre></td></tr></table></figure><h3 id="–negotiate"><a href="#–negotiate" class="headerlink" title="–negotiate"></a>–negotiate</h3><p>negotiate的认证方式</p><h3 id="netrc-file-path"><a href="#netrc-file-path" class="headerlink" title="-netrc-file [path]"></a>-netrc-file [path]</h3><p>不读默认<code>~/.netrc</code>文件，而是具体某个文件</p><h3 id="–netrc-optional"><a href="#–netrc-optional" class="headerlink" title="–netrc-optional"></a>–netrc-optional</h3><p>这与<code>--netrc</code>区别在于，使得默认配置内容是可选的,不是强制的</p><h3 id="–next"><a href="#–next" class="headerlink" title="–next"></a>–next</h3><h3 id="–no-eprt"><a href="#–no-eprt" class="headerlink" title="–no-eprt"></a>–no-eprt</h3><p>ftp协议中禁止使用命令EPRT，该命令比PORT更新</p><h3 id="–no-epsv"><a href="#–no-epsv" class="headerlink" title="–no-epsv"></a>–no-epsv</h3><p>ftp协议中进制使用命令EPSV，该命令比PASV更新</p><h3 id="–no-keepalive"><a href="#–no-keepalive" class="headerlink" title="–no-keepalive"></a>–no-keepalive</h3><p>默认curl会保持tcp(无流量)连接60s,这个会关闭该功能</p><h3 id="–noproxy"><a href="#–noproxy" class="headerlink" title="–noproxy"></a>–noproxy</h3><p>不使用全局环境变量代理</p><h3 id="–no-verbose"><a href="#–no-verbose" class="headerlink" title="–no-verbose"></a>–no-verbose</h3><h3 id="–ntlm"><a href="#–ntlm" class="headerlink" title="–ntlm"></a>–ntlm</h3><p>ntlm的认证方式</p><h3 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h3><p>输出到某个文件，一个该选项对应一个url,想要指明多个，必须声明多个-o</p><h3 id="O-–remote-name"><a href="#O-–remote-name" class="headerlink" title="-O&#x2F;–remote-name"></a>-O&#x2F;–remote-name</h3><p>把结果输出到使用远程服务器的原始文件名,一个该选项对应一个url,想要指明多个，必须声明多个-O</p><h3 id="–path-as-is"><a href="#–path-as-is" class="headerlink" title="–path-as-is"></a>–path-as-is</h3><p>在url指定路径时，如果出现<code>/../</code>或<code>/./</code>,curl会替换它们，再发送给服务器，比如<code>/hello/sir/../</code>变成<code>/hello/</code>,<code>/hello/./sir</code>变成<code>/hello/sir/</code>,而该选项会保留<code>..</code>和<code>.</code></p><h3 id="P-–ftp-port-ip"><a href="#P-–ftp-port-ip" class="headerlink" title="-P&#x2F;–ftp-port [ip&#x2F;-]"></a>-P&#x2F;–ftp-port [ip&#x2F;-]</h3><p>这其实是使用命令PORT或EPRT，即服务器建立新连接到客户,但经常不指定一个确切的port,直接使用<code>-</code>,总是为，信息来时的地址，如下：<br><code>curl -P - ftp://example.com/foobar.txt</code></p><h3 id="–post301"><a href="#–post301" class="headerlink" title="–post301"></a>–post301</h3><p>返回301重定向时，保持初始的方法</p><h3 id="–post302"><a href="#–post302" class="headerlink" title="–post302"></a>–post302</h3><p>返回302重定向时，保持初始的方法</p><h3 id="–post303"><a href="#–post303" class="headerlink" title="–post303"></a>–post303</h3><p>返回303重定向时，保持初始的方法</p><h3 id="p-–proxytunnel"><a href="#p-–proxytunnel" class="headerlink" title="-p&#x2F;–proxytunnel"></a>-p&#x2F;–proxytunnel</h3><p>使用隧道对代理加密<br><code>curl -p -x http://proxy.example.com:80 ftp://ftp.example.com/file.txt</code></p><h3 id="–parallel-max"><a href="#–parallel-max" class="headerlink" title="–parallel-max"></a>–parallel-max</h3><h3 id="–pinnedpubkey-sha256-hashnum1-hashnum2"><a href="#–pinnedpubkey-sha256-hashnum1-hashnum2" class="headerlink" title="–pinnedpubkey [sha256&#x2F;&#x2F;hashnum1;hashnum2;..]"></a>–pinnedpubkey [sha256&#x2F;&#x2F;hashnum1;hashnum2;..]</h3><p>TLS协议中，Certifiate pinning中直接指定sha256值</p><h3 id="–proto-default"><a href="#–proto-default" class="headerlink" title="–proto-default"></a>–proto-default</h3><h3 id="–proxy1-0-ip-addr"><a href="#–proxy1-0-ip-addr" class="headerlink" title="–proxy1.0 [ip addr]"></a>–proxy1.0 [ip addr]</h3><p>指定代理，和<code>--x</code>一样，只是使用HTTP&#x2F;1.0</p><h3 id="–proxy-anyauth"><a href="#–proxy-anyauth" class="headerlink" title="–proxy-anyauth"></a>–proxy-anyauth</h3><p>任意一种代理用户名认证方式,根据代理服务器要求自动匹配或者不使用认证</p><h3 id="–proxy-digest"><a href="#–proxy-digest" class="headerlink" title="–proxy-digest"></a>–proxy-digest</h3><p>一种代理用户名认证方式</p><h3 id="–proxy-header"><a href="#–proxy-header" class="headerlink" title="–proxy-header"></a>–proxy-header</h3><p>该头只发送给代理，真正的远程服务器不会收到，这比–header更精细化<br><code>curl --proxy-header &quot;User-Agent: magic/3000&quot; -x proxy https://example.com/</code></p><h3 id="–proxy-negotiate"><a href="#–proxy-negotiate" class="headerlink" title="–proxy-negotiate"></a>–proxy-negotiate</h3><p>一种代理用户名认证方式</p><h3 id="–proxy-ntlm"><a href="#–proxy-ntlm" class="headerlink" title="–proxy-ntlm"></a>–proxy-ntlm</h3><p>一种代理用户名认证方式</p><h3 id="Q-–quote-ftp-cmd"><a href="#Q-–quote-ftp-cmd" class="headerlink" title="-Q&#x2F;–quote [ftp cmd]"></a>-Q&#x2F;–quote [ftp cmd]</h3><p>发送命令给ftp服务器</p><ul><li>在传输之前发送NOOP命令<code>curl -Q NOOP ftp://example.com/file</code></li><li>在传输之后发送NOOP命令<code>curl -Q -NOOP ftp://example.com/file</code></li><li>不知什么时候发<code>curl -Q +NOOP ftp://example.com/file</code><br>发送的命令发生错误时会导致curl退出，有时可以在命令前加<code>*</code>，忽略可能发送错误，如：<br><code>curl -Q &quot;-*DELE file&quot; ftp://example.com/moo</code></li></ul><h3 id="r-–range-num1-num2-num3-0-num3-…"><a href="#r-–range-num1-num2-num3-0-num3-…" class="headerlink" title="-r&#x2F;–range [num1-num2,num3-,0-num3,…]"></a>-r&#x2F;–range [num1-num2,num3-,0-num3,…]</h3><p>只下num1 byte offset至num2 byte offset的内容,服务器可以选择性的实现该功能，也就是说，即使你这么请求，服务器也可能返回全部内容</p><h3 id="–remote-name-all"><a href="#–remote-name-all" class="headerlink" title="–remote-name-all"></a>–remote-name-all</h3><p>所有结果均输出保存到服务器上的原始文件名</p><h3 id="–remote-time"><a href="#–remote-time" class="headerlink" title="–remote-time"></a>–remote-time</h3><p>使得下载到本地的文件的时间戳和远程服务器文件的时间戳一样，常和-z -o选项搭配<br><code>curl -z file.html -o file.html --remote-time https://example.com/file.html</code></p><h3 id="–resolve-host-name-port-ip-address"><a href="#–resolve-host-name-port-ip-address" class="headerlink" title="–resolve [host name:port:ip address]"></a>–resolve [host name:port:ip address]</h3><p>dns重定向，这会保存到curl的cache中<br><code>curl --resolve example.com:80:127.0.0.1 http://example.com/</code></p><h3 id="s-–silent"><a href="#s-–silent" class="headerlink" title="-s&#x2F;–silent"></a>-s&#x2F;–silent</h3><p>此选项关闭进度条，并不显示错误，但是-S&#x2F;–show-error不受此选项影响</p><h3 id="S-–show-error"><a href="#S-–show-error" class="headerlink" title="-S&#x2F;–show-error"></a>-S&#x2F;–show-error</h3><p>默认情况下curl会输出错误，该选项主要是抵消-s的作用</p><h3 id="–speed-time-num"><a href="#–speed-time-num" class="headerlink" title="–speed-time [num]"></a>–speed-time [num]</h3><p>经常和–speed-limit一起用,下面的意思是速度小于1000并且持续15s就退出<br><code>curl --speed-time 15 --speed-limit 1000 https://example.com/</code></p><h3 id="–speed-limit-num"><a href="#–speed-limit-num" class="headerlink" title="–speed-limit [num]"></a>–speed-limit [num]</h3><p>见–speed-time</p><h3 id="–ssl"><a href="#–ssl" class="headerlink" title="–ssl"></a>–ssl</h3><p>尝试ssl加密(FTP,IMAP,POP3,SMTP)</p><h3 id="–sslv2"><a href="#–sslv2" class="headerlink" title="–sslv2"></a>–sslv2</h3><p>使用SSL2版本</p><h3 id="–sslv3"><a href="#–sslv3" class="headerlink" title="–sslv3"></a>–sslv3</h3><p>使用SSL3版本</p><h3 id="–ssl-reqd"><a href="#–ssl-reqd" class="headerlink" title="–ssl-reqd"></a>–ssl-reqd</h3><p>强制ssl加密(FTP,IMAP,POP3,SMTP)</p><h3 id="–raw"><a href="#–raw" class="headerlink" title="–raw"></a>–raw</h3><p>禁用内容或传输编码的所有内部http解码，而是使用未经修改的原始数据,这经常用在curl为一个代理的情况</p><h3 id="–retry-num"><a href="#–retry-num" class="headerlink" title="–retry [num]"></a>–retry [num]</h3><p>curl会在发生transient error时，会重新尝试num次，默认失败一次就不会尝试，transient error包括以下：超时，FTP 4XX返回码，http5xx返回码</p><h3 id="–request-target"><a href="#–request-target" class="headerlink" title="–request-target"></a>–request-target</h3><p>获取的资源路径，这个一般直接写在url中，但这配合OPTIONS方法，有个特殊用法：<br><code>curl -X OPTIONS --request-target &quot;*&quot; http://example.com/</code><br>会形成下面的头：<br><code>OPTIONS * HTTP/1.1</code></p><h3 id="–retry-all-errors"><a href="#–retry-all-errors" class="headerlink" title="–retry-all-errors"></a>–retry-all-errors</h3><p>有时你确定一个服务器是好的，出现任何错误都想重试，该选项就可以帮你</p><h3 id="–retry-connrefused"><a href="#–retry-connrefused" class="headerlink" title="–retry-connrefused"></a>–retry-connrefused</h3><p>重试只会发生在transient error时，但拒绝访问不属于，有时你确认服务器只是重启或其他原因，该选项可以使得出现拒绝访问时，也可以重试。</p><h3 id="–retry-max-time-num"><a href="#–retry-max-time-num" class="headerlink" title="–retry-max-time [num]"></a>–retry-max-time [num]</h3><p>第一次重试之前,curl会等1s,然后第二次重试会等2s,如此指数增长下去，直到达到10min，该选项会指明等待时间不少于num秒，–max-time选项仍会起作用</p><h3 id="T"><a href="#T" class="headerlink" title="-T"></a>-T</h3><ul><li>HTTP PUT就是上传某个完整资源上传或替换远程的现有资源，很少被服务器启用</li><li>FTP或TFTP 上传文件，如下<br><code>curl -T uploadthis ftp://example.com/this/directory/</code><br><code>curl -T uploadthis ftp://example.com/this/directory/remotename</code></li><li>SMTP上传body内容，通常需要其他选项(有关header的选项)配合（–mail-from,等）<br><code>curl -T mail smtp://mail.example.com/ --mail-from user@example.com</code></li></ul><h3 id="t-–telnet-option-keyword-value"><a href="#t-–telnet-option-keyword-value" class="headerlink" title="-t&#x2F;–telnet-option [keyword&#x3D;value]"></a>-t&#x2F;–telnet-option [keyword&#x3D;value]</h3><p>telnet选项特有，传递以下三个参数：</p><ul><li>TTYPE&#x3D;[term]:设置终端类型</li><li>XDISPLOC&#x3D;[X display]:设置X展示位置</li><li>NEW_ENV&#x3D;[var,val]:设置环境变量值</li></ul><h3 id="–tftp-blksize-num"><a href="#–tftp-blksize-num" class="headerlink" title="–tftp-blksize [num]"></a>–tftp-blksize [num]</h3><p>tftp通信传输块默认大小为512,此选项可以修改，支持8-65464</p><h3 id="–tftp-no-options"><a href="#–tftp-no-options" class="headerlink" title="–tftp-no-options"></a>–tftp-no-options</h3><p>有些tftp服务器不接受任何选项，此时该选项可以应用</p><h3 id="–tlspassword-passwd"><a href="#–tlspassword-passwd" class="headerlink" title="–tlspassword [passwd]"></a>–tlspassword [passwd]</h3><p>TLS的特性，可以在命令行中直接使用用户名和密码<br><code>curl --tlsuser daniel --tlspassword secret https://example.com</code></p><h3 id="–tlsuser-name"><a href="#–tlsuser-name" class="headerlink" title="–tlsuser [name]"></a>–tlsuser [name]</h3><p>见–tlspassword</p><h3 id="–tlsv1-–tlsv1-0"><a href="#–tlsv1-–tlsv1-0" class="headerlink" title="–tlsv1&#x2F;–tlsv1.0"></a>–tlsv1&#x2F;–tlsv1.0</h3><p>使用TLS&gt;&#x3D;1.0的版本</p><h3 id="–tlsv1-1"><a href="#–tlsv1-1" class="headerlink" title="–tlsv1.1"></a>–tlsv1.1</h3><p>使用TLS&gt;&#x3D;1.0的版本</p><h3 id="–tlsv1-2"><a href="#–tlsv1-2" class="headerlink" title="–tlsv1.2"></a>–tlsv1.2</h3><p>使用TLS&gt;&#x3D;1.2的版本</p><h3 id="–tlsv1-3"><a href="#–tlsv1-3" class="headerlink" title="–tlsv1.3"></a>–tlsv1.3</h3><p>使用TLS&gt;&#x3D;1.3的版本,curl默认</p><h3 id="–tr-encoding"><a href="#–tr-encoding" class="headerlink" title="–tr-encoding"></a>–tr-encoding</h3><p>采用Transfer-Encoded压缩传输内容，curl会自动解压,不能和–compressed混用,且该选项不常用</p><h3 id="–trace-filename"><a href="#–trace-filename" class="headerlink" title="–trace [filename]"></a>–trace [filename]</h3><p>会跟踪每拍接受的内容，以16进制显示,每行开头的十六进制加冒号代表该内容的byte offset</p><h3 id="–trace-ascii-filename"><a href="#–trace-ascii-filename" class="headerlink" title="–trace-ascii [filename]"></a>–trace-ascii [filename]</h3><p>会跟踪每拍接受的内容，以ascii码可读形式显示</p><h3 id="–trace-time"><a href="#–trace-time" class="headerlink" title="–trace-time"></a>–trace-time</h3><p>化学选项：-v&#x2F;–verbose,–trace和–trace-ascii<br>这个选项会帮助化学选项所输出内容之前加高精度的时间。</p><h3 id="u-–user"><a href="#u-–user" class="headerlink" title="-u&#x2F;–user"></a>-u&#x2F;–user</h3><p>指定用户名和密码，冒号分隔<code>user:passwd</code>,这种明文，最好不用，协议层方面使用https和ftps等，如果非要使用明文,可以选择选项<code>--digest</code>,<code>--negotiate</code>,<code>--ntlm</code>,或者直接通过配置文件###1禁用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --digest --user daniel:secret http://example.com/<br>curl --negotiate --user daniel:secret http://example.com/<br>curl --ntlm --user daniel:secret http://example.com/<br></code></pre></td></tr></table></figure><h3 id="U-–proxy-user-user-passwd"><a href="#U-–proxy-user-user-passwd" class="headerlink" title="-U&#x2F;–proxy-user [user:passwd]"></a>-U&#x2F;–proxy-user [user:passwd]</h3><p>指定代理的用户名和密码<br><code>curl -U daniel:secr3t -x myproxy:80 http://example.com</code></p><h3 id="–upload-file"><a href="#–upload-file" class="headerlink" title="–upload-file"></a>–upload-file</h3><p>指定上传内容文件，用于smtp</p><h3 id="–use-ascii"><a href="#–use-ascii" class="headerlink" title="–use-ascii"></a>–use-ascii</h3><p>使用ascii传输，而不是二进制</p><h3 id="v-–verbose"><a href="#v-–verbose" class="headerlink" title="-v&#x2F;–verbose"></a>-v&#x2F;–verbose</h3><p>该选项会使curl显示更多的内容，具体格式如下：</p><ul><li><code>*</code>后面跟解释性内容</li><li><code>&gt;</code>后面跟客户端发送的头协议，（FTP,SMTP,POP3等没有头协议的，命令和返回当成头）</li><li><code>&lt;</code>后面跟从服务端接受的返回头协议<br>HTTP&#x2F;2和HTTP&#x2F;3协议头是压缩的，但在此选项下会展开和HTTP&#x2F;1.1一样的格式</li></ul><h3 id="V-–version"><a href="#V-–version" class="headerlink" title="-V&#x2F;–version"></a>-V&#x2F;–version</h3><p>会输出版本相关的信息，各行含义如下:<br>**第一行:**版本号+平台+第三方依赖信息<br>**第二行:**版本发布日期<br>**第三行:**支持的协议<br>**第四行:**支持的特性</p><h3 id="w-–write-out"><a href="#w-–write-out" class="headerlink" title="-w&#x2F;–write-out"></a>-w&#x2F;–write-out</h3><p>参数:<code>&lt;formatted string&gt;</code>或<code>@[filename或-]</code><br>该选项会在每个传输完毕后，在末尾加上formatted string或文件中的内容,%可以使用<code>\n,\r,\t</code>转义字符，特殊的变量跟在<code>%</code>后,<code>%%</code>输出真正的%<br>有以下formatted string:</p><table><thead><tr><th align="center">格式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>%&#123;content_type&#125;</code></td><td align="center">字面义，有的内容没有类型</td></tr><tr><td align="center"><code>%&#123;errormsg&#125;</code></td><td align="center">字面义，无错误为空</td></tr><tr><td align="center"><code>%&#123;exitcode&#125;</code></td><td align="center">传输的退出码，无错返回0</td></tr><tr><td align="center"><code>%&#123;filename_effective&#125;</code></td><td align="center">最终传输内容所保存的文件名，只当指定-o或–remote-name选项有意义</td></tr><tr><td align="center"><code>%&#123;ftp_entry_path&#125;</code></td><td align="center">登陆ftp的初始路径</td></tr><tr><td align="center"><code>%&#123;http_code&#125;</code></td><td align="center">也就是response_code</td></tr><tr><td align="center"><code>%&#123;http_connect&#125;</code></td><td align="center">待探索</td></tr><tr><td align="center"><code>%&#123;http_version&#125;</code></td><td align="center">字面义</td></tr><tr><td align="center"><code>%&#123;json&#125;</code></td><td align="center">所有write-out的变量生成json格式</td></tr><tr><td align="center"><code>%&#123;local_ip&#125;</code></td><td align="center">最近一次连接的ipv4或ipv6的本地地址</td></tr><tr><td align="center"><code>%&#123;local_port&#125;</code></td><td align="center">最近一次连接的本地端口</td></tr><tr><td align="center"><code>%&#123;method&#125;</code></td><td align="center">最近请求的方法</td></tr><tr><td align="center"><code>%&#123;num_connects&#125;</code></td><td align="center">最近传输的新连接数量</td></tr><tr><td align="center"><code>%&#123;num_headers&#125;</code></td><td align="center">上一次传输的反应头的数量</td></tr><tr><td align="center"><code>%&#123;num_redirects&#125;</code></td><td align="center">请求的重定向次数</td></tr><tr><td align="center"><code>%&#123;onerror&#125;</code></td><td align="center">如果传输发生错误，输出之后的string,内容，否则不输出</td></tr><tr><td align="center"><code>%&#123;proxy_ssl_verify_result&#125;</code></td><td align="center">与代理通信时请求的SSL对等证书验证的结果,0表示成功</td></tr><tr><td align="center"><code>%&#123;redirect_url&#125;</code></td><td align="center">当发出HTTP请求而没有-L重定向时，重定向会将您带到的实际URL</td></tr><tr><td align="center"><code>%&#123;remote_ip&#125;</code></td><td align="center">远程的ipv4或6地址</td></tr><tr><td align="center"><code>%&#123;remote_port&#125;</code></td><td align="center">远程的端口</td></tr><tr><td align="center"><code>%&#123;response_code&#125;</code></td><td align="center">字面义</td></tr><tr><td align="center"><code>%&#123;scheme&#125;</code></td><td align="center">url的scheme</td></tr><tr><td align="center"><code>%&#123;size_download&#125;</code></td><td align="center">字面义</td></tr><tr><td align="center"><code>%&#123;size_header&#125;</code></td><td align="center">头部的大小</td></tr><tr><td align="center"><code>%&#123;size_request&#125;</code></td><td align="center">请求的大小</td></tr><tr><td align="center"><code>%&#123;size_upload&#125;</code></td><td align="center">上传大小</td></tr><tr><td align="center"><code>%&#123;speed_download&#125;</code></td><td align="center">平均下载速度</td></tr><tr><td align="center"><code>%&#123;speed_upload&#125;</code></td><td align="center">平均上传速度</td></tr><tr><td align="center"><code>%&#123;ssl_verify_result&#125;</code></td><td align="center">请求SSL对等证书验证的结果，0表示成功</td></tr><tr><td align="center"><code>%&#123;stderr&#125;</code></td><td align="center">接下来的内容输出到标准错误</td></tr><tr><td align="center"><code>%&#123;stdout&#125;</code></td><td align="center">接下来的内容输出到标准输出</td></tr><tr><td align="center"><code>%&#123;time_appconnect&#125;</code></td><td align="center">从开始到完成SSL&#x2F;SSH&#x2F;etc到远程主机的连接&#x2F;握手花费的时间，单位秒</td></tr><tr><td align="center"><code>%&#123;time_connect&#125;</code></td><td align="center">从一开始直到TCP连接到远程主机（或代理）完成花费的时间，单位秒</td></tr><tr><td align="center"><code>%&#123;time_namelookup&#125;</code></td><td align="center">从一开始直到名字解析完成所花费的时间,单位秒</td></tr><tr><td align="center"><code>%&#123;time_pretransfer&#125;</code></td><td align="center">从一开始直到文件传输即将开始所花费的时间，单位秒</td></tr><tr><td align="center"><code>%&#123;time_redirect&#125;</code></td><td align="center">所有重定向步骤，包括名称查找，连接，预传输和最终事务开始之前的传输所花费的时间,单位秒</td></tr><tr><td align="center"><code>%&#123;time_starttransfer&#125;</code></td><td align="center">从一凯斯直到第一个字节即将被传输，这包括time_pretransfer和服务器计算结果所需的时间</td></tr><tr><td align="center"><code>%&#123;time_total&#125;</code></td><td align="center">完整操作持续的总时间，时间为秒，精度达到毫秒</td></tr><tr><td align="center"><code>%&#123;url&#125;</code></td><td align="center">命令行中指定url</td></tr><tr><td align="center"><code>%&#123;url_effective&#125;</code></td><td align="center">真实有效的url</td></tr><tr><td align="center"><code>%&#123;urlnum&#125;</code></td><td align="center">url的编号，从0开始计数</td></tr></tbody></table><h3 id="X-–request"><a href="#X-–request" class="headerlink" title="-X&#x2F;–request"></a>-X&#x2F;–request</h3><p>指定http的方法，一般curl会根据选项自动判断，无需特地指定该选项，错误的方法可能使得curl行为怪异</p><h3 id="x-–proxy-ip-addr"><a href="#x-–proxy-ip-addr" class="headerlink" title="-x&#x2F;–proxy [ip addr]"></a>-x&#x2F;–proxy [ip addr]</h3><ul><li>指定代理，默认scheme为http,默认端口为1080<br><code>curl -x 192.168.0.1:8080 http://example.com/</code></li><li>指定SOCKS协议代理，这可以直接使用各个版本，而不用-x，说明如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#SOCKS4版本</span><br>curl -x socks4://proxy.example.com http://www.example.com/<br>curl --socks4 proxy.example.com http://www.example.com/<br><span class="hljs-comment">#SOCKS4a版本</span><br>curl -x socks4a://proxy.example.com http://www.example.com/<br>curl --socks4a proxy.example.com http://www.example.com/<br><span class="hljs-comment">#SOCKS5版本</span><br>curl -x socks5://proxy.example.com http://www.example.com/<br>curl --socks5 proxy.example.com http://www.example.com/<br><span class="hljs-comment">#SOCKS5h版本</span><br>curl -x socks5h://proxy.example.com http://www.example.com/<br>curl --socks5-ostname proxy.example.com http://www.example.com/<br></code></pre></td></tr></table></figure></li></ul><h3 id="–xattr"><a href="#–xattr" class="headerlink" title="–xattr"></a>–xattr</h3><h3 id="Z-–parallel"><a href="#Z-–parallel" class="headerlink" title="-Z&#x2F;–parallel"></a>-Z&#x2F;–parallel</h3><h3 id="z-–time-cond-time-stamp-file"><a href="#z-–time-cond-time-stamp-file" class="headerlink" title="-z&#x2F;–time-cond [time stamp&#x2F;file]"></a>-z&#x2F;–time-cond [time stamp&#x2F;file]</h3><p>对下载的内容做时间限制(可早，可晚)，时间格式可以是常见的格式，或者指定比某个本地文件新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -z <span class="hljs-string">&quot;Jan 10, 2017&quot;</span> https://example.com/file -O<span class="hljs-comment">#只下载比该时间戳新的</span><br>curl --time-cond <span class="hljs-string">&quot;Sun, 12 Sep 2004 15:05:58 -0700&quot;</span> https://www.example.org/file.html<span class="hljs-comment">#只下载比该时间早的</span><br>curl -z file.html https://example.com/file.html -O<span class="hljs-comment">#比file.html新的</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="-:"></a>-:</h3><h3 id="–progress-bar"><a href="#–progress-bar" class="headerlink" title="-#&#x2F;–progress-bar"></a>-#&#x2F;–progress-bar</h3><p>当内容重定向时，进度条是默认打开的,该选项会展示一种简单的进度条，有时进度条无法估计时间</p><h3 id="作用"><a href="#作用" class="headerlink" title="@作用"></a>@作用</h3><p>传参数可以把参数放到文件里，如下:<br><code>curl -d @json http://example.com</code></p><h2 id="curl退出码"><a href="#curl退出码" class="headerlink" title="curl退出码"></a>curl退出码</h2><ul><li>1：不支持的协议</li><li>2：初始化失败，libcurl可能出了问题</li><li>3：url格式不对</li><li>4：某个请求需要某个特性或选项未能满足</li><li>5：无法解析代理</li><li>6：无法解析主机</li><li>7：无法连接主机。可能端口，主机名或防火墙的问题</li><li>8：未知的ftp服务返回。可能未支持，也可能未启用选项</li><li>9：ftp拒绝访问。没该文件或用户名或没权限</li><li>10：ftp接受失败。</li><li>11：ftp奇怪的PASS回复</li><li>12：在等待服务器连接的活动FTP会话期间，超过限期</li><li>13：FTP PASV命令未知的反应。通过–ftp-port选项可能解决该问题</li><li>14：未知FTP227格式。这肯定是个坏服务器，或者可以通过–ftp-port解决该问题</li><li>15：FTP无法获得主机</li><li>16：HTTP&#x2F;2 error</li><li>17：FTP无法设置binary传输。坏的服务器</li><li>18：只传输了部分文件</li><li>19：FTP无法获得下载该文件。RETR命令失败</li><li>20：（保留）</li><li>21：引用错误。IMAP、POP3、SMTP、FTP发送自定义命令时出错，建议查看报头</li><li>22：HTTP页面未抓取。对应400反应码以上的错误，出现该错误只能在-f选项启用的时候</li><li>23：写错误。写到本地时发生的错误</li><li>24：（保留）</li><li>25：上传失败。服务器空间已满或拒绝上传</li><li>26：读错误。从本地读取时发生错误</li><li>27：内存不够。系统分配给curl内存不足</li><li>28：操作超时。由各种选项设置的各种超时</li><li>29：（保留）</li><li>30：FTP PORT命令错误。PORT命令有点非主流，可以试试PASV</li><li>31：FTP无法使用REST。可以在没有范围或恢复的情况下重试</li><li>32：（保留）</li><li>33：HTTP范围错误</li><li>34：HTTP post错误,需要反馈BUG</li><li>35：TLS&#x2F;SSL连接错误</li><li>36：无法恢复下载。FILE,FTP,SFTP会发生此错误</li><li>37：无法读取该文件。FILE协议，可能不存在或没权限</li><li>38：绑定LDAP失败。可能用户密码错误</li><li>39：LDAP搜索失败。</li><li>40：（保留）</li><li>41：（保留）</li><li>42：回调错误。开发者编程的错误</li><li>43：错误函数参数。libcurl的调用问题</li><li>44：（保留）</li><li>45：网络接口错误</li><li>46：（保留）</li><li>47：太多重定向。默认最多50个，可以通过–max-redirs改变</li><li>48：libcurl未知选项。可能curl和libcurl版本不一</li><li>49：telnet错误的选项</li><li>50：（保留）</li><li>51：SSL&#x2F;TLS、SSH认证失败</li><li>52：服务器未返回任何内容。可能是服务器有意为之</li><li>53：未发现SSL引擎</li><li>54：无法设置SSL加密引擎为默认</li><li>55：无法发送网络数据。网络底层的错误，需要Wireshark等工具查看</li><li>56：无法接受网络数据。网络底层错误。</li><li>57：（保留）</li><li>58：本地认证有问题。</li><li>59：无法使用ssl密码。密码有格式标准</li><li>60：对等证书无法使用已知ca认证</li><li>61：无法识别传输编码</li><li>62：无效LDAP URL</li><li>63：超过最大文件大小限制</li><li>64：FTP SSL失败</li><li>65：发送之前帧失败</li><li>66：初始化SSL引擎失败</li><li>67：用户名密码CURL无法登陆</li><li>68：TFTP服务没有该文件</li><li>69：TFTP服务权限问题</li><li>70：TFTP服务没有空间</li><li>71：非法TFTP操作</li><li>72：未知TFTP传输id</li><li>73：TFTP文件已存在</li><li>74：TFTP没有该用户</li><li>75：字符转换失败</li><li>76：需要字符转换函数</li><li>77：读SSL CA认证时发生问题</li><li>78：URL中的资源不存在</li><li>79：在SSH会话中发生错误</li><li>80：关闭SSL连接失败</li><li>81：（保留）</li><li>82：无法下载CRL文件，错误格式</li><li>83：TLS认证检查失败</li><li>84：FTP PRET命令失败</li><li>85：RTSP:CSeq数字不匹配</li><li>86：RTSP:会话标识符不匹配</li><li>87：无法解析ftp文件列表</li><li>88：FTP 块回掉错误</li><li>89：没有可用的连接，会话将排队</li><li>90：SSL公钥不匹配固定公钥</li><li>91：无效SSL认证状态</li><li>92：HTTP&#x2F;2流错误</li><li>93：API回调错误</li><li>94：认证错误</li><li>95：HTTP&#x2F;3错误</li><li>96：QUIC连接错误</li></ul><h2 id="curl与浏览器的区别"><a href="#curl与浏览器的区别" class="headerlink" title="curl与浏览器的区别"></a>curl与浏览器的区别</h2><ul><li>浏览器会对接受的数据进行二次解码,更易懂些，curl就直接解码</li><li>有的服务器会根据不同客户端(甚至不同的浏览器)提供更适配的内容</li><li>你可以使用f12然后选中network,右键点击你想要的资源，选中<code>copy cURL</code>就可以复制相应的命令</li></ul><h2 id="POP3-curl读邮件使用的协议"><a href="#POP3-curl读邮件使用的协议" class="headerlink" title="POP3(curl读邮件使用的协议)"></a>POP3(curl读邮件使用的协议)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#To list message numbers and sizes:</span><br>curl pop3://mail.example.com/<br><span class="hljs-comment">#To download message 1:</span><br>curl pop3://mail.example.com/1<br><span class="hljs-comment">#To delete message 1:</span><br>curl --request DELE pop3://mail.example.com/1<br></code></pre></td></tr></table></figure><p><strong>TLS加密</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl pop3://mail.example.com/ --ssl-reqd<br>curl pop3s://mail.example.com/<br></code></pre></td></tr></table></figure><h2 id="IMAP-curl读邮件使用的协议，更常用现代"><a href="#IMAP-curl读邮件使用的协议，更常用现代" class="headerlink" title="IMAP(curl读邮件使用的协议，更常用现代)"></a>IMAP(curl读邮件使用的协议，更常用现代)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Get the mail using the UID 57 from mailbox &#x27;stuff&#x27;:</span><br>curl imap://server.example.com/stuff;UID=57<br><span class="hljs-comment">#get the mail with index 57 from the mailbox &#x27;fun&#x27;</span><br>curl imap://server.example.com/fun;MAILINDEX=57<br><span class="hljs-comment">#List the mails in the mailbox &#x27;boring&#x27;:</span><br>curl imap://server.example.com/boring<br><span class="hljs-comment">#List the mails in the mailbox &#x27;boring&#x27; and provide user and password:</span><br>curl imap://server.example.com/boring -u user:password<br></code></pre></td></tr></table></figure><p><strong>TLS加密</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --ssl imap://mail.example.com/inbox<br>curl imaps://mail.example.com/inbox<br></code></pre></td></tr></table></figure><h2 id="SMTP-cURL写邮件使用的协议"><a href="#SMTP-cURL写邮件使用的协议" class="headerlink" title="SMTP(cURL写邮件使用的协议)"></a>SMTP(cURL写邮件使用的协议)</h2><p>必须指定收发邮箱，以及内容,默认端口587</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl smtp://mail.example.com --mail-from myself@example.com --mail-rcpt \<br>receiver@example.com --upload-file email.txt<br></code></pre></td></tr></table></figure><p>email.txt:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">From: John Smith &lt;john@example.com&gt;<br>To: Joe Smith &lt;smith@example.com&gt;<br>Subject: an example.com example email<br>Date: Mon, 7 Nov 2016 08:45:16<br><br>Dear Joe,<br>Welcome to this example email. What a lovely day.<br></code></pre></td></tr></table></figure><p>和POP3、IMAP一样，可以使用SSL&#x2F;TLS加密，schema改成smtps即可，或者使用–ssl或–ssl-reqd,此时默认端口为465</p><h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><p>订阅推送的协议，不太懂</p><h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><p>小文件传输协议，使用的是UDP</p><ul><li>下载<code>curl -O tftp://localserver/file.boot</code></li><li>上传<code>curl -T file.boot tftp://localserver/</code></li></ul><h2 id="TELNET"><a href="#TELNET" class="headerlink" title="TELNET"></a>TELNET</h2><p>即时通信协议，默认端口23</p><h2 id="DICT"><a href="#DICT" class="headerlink" title="DICT"></a>DICT</h2><p>字典查询的协议<br>alias:</p><ul><li>m:match和find</li><li>d:define和lookup<br>例子：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl dict://dict.org/m:curl<br>curl dict://dict.org/d:heisenbug:jargon<br>curl dict://dict.org/d:daniel:gcide<br>curl dict://dict.org/find:curl<br></code></pre></td></tr></table></figure></li></ul><h2 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS&#x2F;SSL"></a>TLS&#x2F;SSL</h2><p>TLS是建立于TCP上一层的安全加密层，SSL是旧称(且所有ssl版本都在淘汰中)，两个是一个概念。<br>各个版本协议都有TLS版本：</p><ul><li>HTTP-HTTPS</li><li>LDAP-LDAPS</li><li>FTP-FTPS</li><li>POP3-POP3S</li><li>IMAP-IMAPS</li><li>SMTP-SMTPS<br>TLS属于third-party,你可以通过–version查看，如果你feature中有MultiSSL的特性，证明curl是支持多版本的，你可以通过<code>CURL_SSL_BACKEND</code>来设置使用那个版二</li></ul><h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h3><p>SSL2(1995)-&gt;SSL3-&gt;TLS1.0(1999)-&gt;TLS1.1(2006)-&gt;TLS1.2(2008)-&gt;TLS1.3(2018)</p><h3 id="CA的存储"><a href="#CA的存储" class="headerlink" title="CA的存储"></a>CA的存储</h3><p>一般都是内建的，但你也可以用–cacert指定路径（一定要是PEM格式），或者设置CURL-CA_BUNDLE环境变量</p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><ul><li><img src="https://linuxtools-rst.readthedocs.io/zh-cn/latest/tool/wget.html"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>zsh</title>
    <link href="/2022/02/03/zsh/"/>
    <url>/2022/02/03/zsh/</url>
    
    <content type="html"><![CDATA[<h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>Zsh的变量除了哈希表以外，都直接赋值使用,包括整数(64位带符号)、浮点数(64位带符号)、字符串、数组、哈希表,<code>$+var</code>,判断变量是否定义,未定义返回0,否则为1</p><h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><ol><li>获取字符串长度<br><code>str=abcde echo $#str</code></li><li>字符串拼接<br><code>str2+=$str1;str3=$str1$str2</code><br><span id = "slice"></span></li><li>字符串切片<br>字符位置从1开始算,bash风格的则从0开始算<br><code>echo $str[2,4]</code></li><li>字符串截断<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">str=abcdeabcde<br><span class="hljs-comment">#删除左端匹配到的内容,最小匹配</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str#*b&#125;</span> <span class="hljs-comment">#输出cdeabcde</span><br><span class="hljs-comment">#删除右端匹配到的内容,最小匹配</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str%d*&#125;</span> <span class="hljs-comment">#输出abcdeabc</span><br><span class="hljs-comment">#删除左端匹配到的内容,最大匹配</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str##*b&#125;</span> <span class="hljs-comment">#输出cde</span><br><span class="hljs-comment">#删除右端匹配到的内容,最大匹配</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str%%d*&#125;</span> <span class="hljs-comment">#输出abc</span><br></code></pre></td></tr></table></figure><span id = "find"></span></li><li>字符串查找<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从左往右找cd字符串,找不到返回数组大小+1</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str</span>[(i)<span class="hljs-built_in">cd</span>]<br><span class="hljs-comment">#从右往左找cd字符串,找不到返回0</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str</span>[(I)<span class="hljs-built_in">cd</span>]<br><span class="hljs-comment">#从第二个位置开始找</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str[(in:2:)cd]&#125;</span><br></code></pre></td></tr></table></figure></li><li>遍历字符<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i (&#123;1..<span class="hljs-variable">$#str</span>&#125;)&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str</span>[i]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>字符串替换<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">str=abcabc<br><span class="hljs-comment">#只替换找到第一个</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str/bc/ef&#125;</span> <span class="hljs-comment">#aefabc</span><br><span class="hljs-comment">#只删除找到第一个</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str/bc&#125;</span> <span class="hljs-comment">#aabc</span><br><span class="hljs-comment">#上面两个的所有版本</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str//bc/ef&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str//bc&#125;</span><br><br>str=abcABCabcABCabc<br><br><span class="hljs-comment"># /# 只从字符串开头开始匹配，$&#123;str/#abc&#125; 也同理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str/#abc/123&#125;</span> <span class="hljs-comment">#123ABCabcABCabc</span><br><br><span class="hljs-comment"># /% 只从字符串结尾开始匹配，echo $&#123;str/%abc&#125; 也同理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str/%abc/123&#125;</span> <span class="hljs-comment">#abcABCabcABC123</span><br><br>str=abc<br><span class="hljs-comment"># 如果匹配到了则输出空字符串</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str:#ab*&#125;</span><br><br><span class="hljs-comment"># 如果匹配不到，则输出原字符串</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str:#ab&#125;</span><br><br><span class="hljs-comment">#按位置删除字符和替换字符,就是指定位置赋值</span><br>str[1]=<br>str[2,4]=<br>str[1]=k<br>str[2,4]=sjkg <span class="hljs-comment">#可以不一一对应</span><br></code></pre></td></tr></table></figure></li><li>字符串是否匹配<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#是否包含</span><br>[[ <span class="hljs-variable">$str1</span> == *<span class="hljs-variable">$str2</span>* ]] &amp;&amp; <span class="hljs-built_in">echo</span> good<br><span class="hljs-comment">#正则匹配</span><br>[[ <span class="hljs-variable">$str</span> =~ <span class="hljs-string">&#x27;c[0-9]&#x27;</span> ]]<br></code></pre></td></tr></table></figure></li><li>大小写转换<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#转成大写</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(U)str&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str:u&#125;</span><br><span class="hljs-comment">#转成小写</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(L)str&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str:l&#125;</span><br><span class="hljs-comment">#首字母大写</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(C)str&#125;</span><br></code></pre></td></tr></table></figure></li><li>目录文件名截取<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">filepath=/a/b/c.x<br><span class="hljs-comment"># :h 是取目录名，即最后一个 / 之前的部分，如果没有 / 则为 .</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;filepath:h&#125;</span> <span class="hljs-comment">#/a/b</span><br><span class="hljs-comment"># :t 是取文件名，即最后一个 / 之后的部分，如果没有 / 则为字符串本身</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;filepath:t&#125;</span> <span class="hljs-comment">#c.x</span><br><span class="hljs-comment"># :e 是取文件扩展名，即文件名中最后一个点之后的部分，如果没有点则为空</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;filepath:e&#125;</span> <span class="hljs-comment">#x</span><br><span class="hljs-comment"># :r 是去掉末尾扩展名的路径</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;filepath:r&#125;</span> <span class="hljs-comment">#/a/b/c</span><br></code></pre></td></tr></table></figure></li><li>相对路径转绝对路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#功能相当于$(readlink -f $filepath)</span><br>filepath1=a.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;filepath1:A&#125;</span><br></code></pre></td></tr></table></figure></li><li>分割字符串<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用空格作为分隔符，多个空格也只算一个分隔符</span><br>str=<span class="hljs-string">&#x27;aa bb cc dd&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str[(w)2]&#125;</span><span class="hljs-comment">#bb</span><br><br><span class="hljs-comment"># 指定分隔符</span><br>str=<span class="hljs-string">&#x27;aa--bb--cc&#x27;</span><br><span class="hljs-comment"># 如果分隔符是 : 就用别的字符作为左右界，比如 ws.:.</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str[(ws:--:)3]&#125;</span><span class="hljs-comment">#cc</span><br></code></pre></td></tr></table></figure></li></ol><p><span id = "arrAndStr"></span></p><ul><li>转成数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">array=()<span class="hljs-variable">$&#123;=str&#125;</span>)<span class="hljs-comment">#默认按空格分隔,可以设置IFS环境变量设置,也可以按以下方法</span><br>str=<span class="hljs-string">&quot;1:2::4&quot;</span><br><br><span class="hljs-comment">#可以是多个字符,如**s/::/**,以**::**为分隔,同时也可以写成**.::.**,不必一定</span><br><span class="hljs-comment">#使用**/**,可以用任意符号</span><br>str_array=(<span class="hljs-variable">$&#123;(s/:/)str&#125;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str_array</span> <span class="hljs-comment">#1 2 4 #忽略空字符串</span><br><span class="hljs-comment"># 保留其中的空字符串</span><br>str_array=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;(@s/:/)str&#125;</span>&quot;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str_array</span>[3]<span class="hljs-comment">#该值为空</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str_array</span>[4]<br>str+=(1234)<span class="hljs-comment">#字符串直接变成一个包含两个元素的数组</span><br></code></pre></td></tr></table></figure></li></ul><ol start="13"><li>读取文件内容到字符串<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 比用 str=$(cat filename) 性能好很多</span><br>str=$(&lt;filename)<br><br><span class="hljs-comment"># 比用 cat filename 性能好很多，引号不能省略</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(&lt;filename)</span>&quot;</span><br><br><span class="hljs-comment"># 遍历每行，引号不能省略</span><br><span class="hljs-keyword">for</span> i (<span class="hljs-variable">$&#123;(f)&quot;$(&lt;filename)&quot;&#125;</span>) &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-comment"># 小文件或者需要频繁调用时，尽量不要用 sed</span><br><span class="hljs-comment">#输出第2行</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;&quot;$(&lt;test.txt)&quot;[(f)2]&#125;</span><br><span class="hljs-comment"># 输出包含 “ang” 的第一行</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;&quot;$(&lt;test.txt)&quot;[(fr)*ang*]&#125;</span><br></code></pre></td></tr></table></figure></li><li>读取进程输出到字符串<br>就是把$(&lt;filename)换城$(cmd)</li></ol><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [some condition]&#123;<br>&#125; <span class="hljs-keyword">elif</span>&#123;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="print和printf"><a href="#print和printf" class="headerlink" title="print和printf"></a>print和printf</h3><p>zsh支持print和printf,<code>print -</code>再按tab健就可以查看所有选项,<code>printf %</code>再按tab键就可以查看所有格式化的东西</p><p>print支持的选项</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th><th align="center">参数</th></tr></thead><tbody><tr><td align="center">-C</td><td align="center">按列输出</td><td align="center">列数</td></tr><tr><td align="center">-D</td><td align="center">替换路径成带~的版本</td><td align="center">无</td></tr><tr><td align="center">-N</td><td align="center">使用\x00(null)作为字符串的间隔,默认是空格</td><td align="center">无</td></tr><tr><td align="center">-O</td><td align="center">降序排列</td><td align="center">无</td></tr><tr><td align="center">-P</td><td align="center">输出颜色和特殊样式</td><td align="center">无</td></tr><tr><td align="center">-R</td><td align="center">模拟echo命令</td><td align="center">无</td></tr><tr><td align="center">-S</td><td align="center">放命令放入了历史命令文件(要加引号)</td><td align="center">无</td></tr><tr><td align="center">-X</td><td align="center">替换所有tab为空格</td><td align="center">tab对应空格数</td></tr><tr><td align="center">-a</td><td align="center">和-c&#x2F;-C一起使用时,改为从左到右</td><td align="center">无</td></tr><tr><td align="center">-b</td><td align="center">识别出bindkey转义字符串</td><td align="center">无</td></tr><tr><td align="center">-c</td><td align="center">按列输出(自动决定列数)</td><td align="center">无</td></tr><tr><td align="center">-f</td><td align="center">同printf</td><td align="center">无</td></tr><tr><td align="center">-i</td><td align="center">和-o&#x2F;-O一起使用时,大小写不敏感排序</td><td align="center">无</td></tr><tr><td align="center">-l</td><td align="center">使用换行符作为字符串分隔符</td><td align="center">无</td></tr><tr><td align="center">-m</td><td align="center">只输出匹配的字符串</td><td align="center">匹配模式字符串</td></tr><tr><td align="center">-n</td><td align="center">不自动添加最后的换行符</td><td align="center">无</td></tr><tr><td align="center">-o</td><td align="center">升序排列</td><td align="center">无</td></tr><tr><td align="center">-r</td><td align="center">不处理转义字符</td><td align="center">无</td></tr><tr><td align="center">-s</td><td align="center">放命令放入历史命令文件(不要加引号)</td><td align="center">无</td></tr><tr><td align="center">-u</td><td align="center">指定fd输出</td><td align="center">fd号</td></tr><tr><td align="center">-v</td><td align="center">把内容保存到变量</td><td align="center">变量名</td></tr><tr><td align="center">-x</td><td align="center">替换行首的tab为空格</td><td align="center">tab对应空格数</td></tr><tr><td align="center">-z</td><td align="center">把内容放置到命令行编辑区</td><td align="center">无</td></tr></tbody></table><ul><li>颜色<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># %B 加粗 %b 取消加粗</span><br><span class="hljs-comment"># %F&#123;red&#125; 前景色 %f 取消前景色</span><br><span class="hljs-comment"># %K&#123;red&#125; 背景色 %k 取消背景色</span><br><span class="hljs-comment"># %U 下滑线 %u 取消下滑线</span><br><span class="hljs-comment"># %S 反色 %s 取消反色</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># black or 0  red     or 1</span><br><span class="hljs-comment"># green or 2  yellow  or 3</span><br><span class="hljs-comment"># blue  or 4  magenta or 5</span><br><span class="hljs-comment"># cyan  or 6  white   or 7</span><br><br><span class="hljs-comment"># 显示加粗的红色 abc</span><br><span class="hljs-built_in">print</span> -P <span class="hljs-string">&#x27;%B%F&#123;red&#125;abc&#x27;</span><br><br><span class="hljs-comment"># 没覆盖到的功能可以用原始的转义符号，可读性比较差</span><br><span class="hljs-comment"># 4[0-7] 背景色</span><br><span class="hljs-comment"># 3[0-7] 前景色</span><br><span class="hljs-comment"># 0m 正常 1m 加粗 2m 变灰 3m 斜体 4m 下滑钱 5m 闪烁 6m 快速闪烁 7m 反色</span><br><br><span class="hljs-comment"># 显示闪烁的红底绿字 abc</span><br>% <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\033[41;32;5mabc\033[0m&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th align="center">通配符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">任意数量的字符</td></tr><tr><td align="center">?</td><td align="center">任意一个字符</td></tr><tr><td align="center">[abcd]</td><td align="center">abcd中的任意一个字符</td></tr><tr><td align="center">[^abcd]</td><td align="center">除abcd中的任意一个字符</td></tr><tr><td align="center">[a-c]</td><td align="center">a和c之间的一个字符</td></tr><tr><td align="center">[a-cB-Dxyz]</td><td align="center">a和c之间、B和D之间以及xyz中的一个字符</td></tr><tr><td align="center">&lt;1-100&gt;</td><td align="center">1和100之间的整数</td></tr><tr><td align="center">&lt;-50&gt;</td><td align="center">0和50之间的整数</td></tr><tr><td align="center">&lt;100-&gt;</td><td align="center">大于100的整数</td></tr><tr><td align="center">-</td><td align="center">任意正整数和0</td></tr><tr><td align="center">([a-c]|&lt;1-100&gt;)</td><td align="center">a和c之间的一个字符或者1和100之间的整数</td></tr></tbody></table><p><strong>加强版,要支持需要加上<code>setopt EXTENDED_GLOB</code></strong></p><table><thead><tr><th align="center">通配符</th><th align="center">含义</th><th align="center">匹配的样式</th></tr></thead><tbody><tr><td align="center">^abc</td><td align="center">除了 abc 外的任意字符串</td><td align="center">aaa</td></tr><tr><td align="center">abc^abc</td><td align="center">以 abc 开头，但后边不是 abc 的字符串</td><td align="center">abcabd</td></tr><tr><td align="center">a*c~abc</td><td align="center">符合 a*c 但不是 abc 的字符串</td><td align="center">adc</td></tr><tr><td align="center">a#</td><td align="center">任意数量（包括 0）个 a</td><td align="center">aaa</td></tr><tr><td align="center">b##</td><td align="center">一个或者多个b</td><td align="center">b</td></tr><tr><td align="center">(ab)##</td><td align="center">一个或者多个ab</td><td align="center">abab</td></tr><tr><td align="center">(#i)abc</td><td align="center">忽略大小写的abc</td><td align="center">AbC</td></tr><tr><td align="center">(#i)ab(#I)c</td><td align="center">忽略大小写的 ab 接着 c</td><td align="center">ABc</td></tr><tr><td align="center">(#l)aBc</td><td align="center">和 c 忽略大小写，但 B 必须大写 的 aBc</td><td align="center">aBC</td></tr><tr><td align="center">(#a1)abc</td><td align="center">最多错（多或缺也算）一个字符的 abc</td><td align="center">a2c 或 ab 或 abcd</td></tr></tbody></table><h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><ol><li>数组定义<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">array=(a <span class="hljs-string">&quot;bb cc&quot;</span> <span class="hljs-built_in">dd</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#打印所有元素在一行</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$array</span> <span class="hljs-comment">#每行输出一个元素</span><br></code></pre></td></tr></table></figure></li><li>元素读写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span>[3]<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span>[-1]<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$#array</span> <span class="hljs-comment">#获取长度</span><br>array[3]=some<br>array[3]=() <span class="hljs-comment">#删除元素</span><br>array+=eeee <span class="hljs-comment">#添加元素</span><br><span class="hljs-built_in">unset</span> array <span class="hljs-comment">#删除整个数组</span><br></code></pre></td></tr></table></figure></li><li>数组拼接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">array1+=(e f g)<br>array1+=(<span class="hljs-variable">$array2</span>) <span class="hljs-comment">#小括号必须加,不加的话,则array2视为一个字符串</span><br></code></pre></td></tr></table></figure></li><li><a href="#arrAndStr">字符串与数组</a></li><li>数组遍历<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">for</span> i (<span class="hljs-variable">$array1</span>)&#123;<br><span class="hljs-attribute">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-comment">#同时遍历两个数组</span><br>for i (<span class="hljs-variable">$array1</span> <span class="hljs-variable">$array2</span>)&#123;<br><span class="hljs-attribute">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><a href="#slice">切片访问</a></li><li><a href="#find">元素查找</a></li><li>元素排序<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(o)array&#125;</span> <span class="hljs-comment">#升序排列</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(O)array&#125;</span> <span class="hljs-comment">#降序排列</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(oi)array&#125;</span> <span class="hljs-comment">#大小写不敏感升序排列</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(on)array&#125;</span> <span class="hljs-comment">#按数字升序排列</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(Oa)array&#125;</span> <span class="hljs-comment">#反转数组元素</span><br></code></pre></td></tr></table></figure></li><li>去重<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(u)array&#125;</span><br></code></pre></td></tr></table></figure></li><li>构造连续字符或数值数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">array=(aa&#123;bb,cc,11&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#aabb aacc aa11</span><br>array=(aa&#123;1..3&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#aa1 aa2 aa3</span><br>array=(aa&#123;15..19..2&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#aa15 aa17 aa19</span><br>array=(aa&#123;19..15..2&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#aa19 aa17 aa15</span><br>array=(aa&#123;01..03&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#aa01 aa02 aa03</span><br>array=(aa&#123;a..c&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#aaa aab aac</span><br>array=(aa&#123;Y..c&#125;) &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span> <span class="hljs-comment">#ASCII码顺序</span><br></code></pre></td></tr></table></figure></li><li>从文件构造数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># f 的功能是将字符串以换行符分隔成数组</span><br><span class="hljs-comment"># 双引号不可省略，不然会变成一个字符串，引号也可以加在 $&#123; &#125; 上</span><br>array=(<span class="hljs-variable">$&#123;(f)&quot;$(&lt;test.txt)&quot;&#125;</span>)<br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$array</span><br><span class="hljs-comment">#a</span><br><span class="hljs-comment">#bb</span><br><span class="hljs-comment">#ccc</span><br><span class="hljs-comment">#dddd</span><br><span class="hljs-comment"># 不加引号的效果</span><br>array=(<span class="hljs-variable">$&#123;(f)$(&lt;test.txt)&#125;</span>)<br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$array</span><br><span class="hljs-comment">#a bb ccc dddd</span><br><br><span class="hljs-comment"># 从文件构造数组，并将每行按分隔符 : 分隔后输出所有列</span><br><span class="hljs-keyword">for</span> i (<span class="hljs-variable">$&#123;(f)&quot;$(&lt;test.txt)&quot;&#125;</span>) &#123;<br>    array=(<span class="hljs-variable">$&#123;(s.:.)i&#125;</span>)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$array</span>[1,-1]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>从文件列表构造数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">array=(/usr/bin/vim*)<br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$array</span><br><span class="hljs-comment">#/usr/bin/vim</span><br><span class="hljs-comment">#/usr/bin/vimdiff</span><br><span class="hljs-comment">#/usr/bin/vimtutor</span><br><br><span class="hljs-comment"># 要比 ls /usr/bin/[a-b]?? | wc -l 快很多</span><br>array=(/usr/bin/[a-b]??) &amp;&amp; <span class="hljs-built_in">print</span> <span class="hljs-variable">$#array</span><br></code></pre></td></tr></table></figure></li><li>数组交集差集<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 两个数组的交集，只输出两个数组都有的元素,如果有重复元素不会去重</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array1:*array2&#125;</span><br><span class="hljs-comment"># 两个数组的差集，只输出 array1 中有，而 array2 中没有的元素</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array1:|array2&#125;</span><br></code></pre></td></tr></table></figure></li><li>数组交叉合并<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从 array1 取一个，再从 array2 取一个，以此类推，一个数组取完了就结束</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array1:^array2&#125;</span><br><span class="hljs-comment"># 如果用 :^^，只有一个数组取完了的话，继续从头取，直到第二个数组也取完了</span><br>% <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array1:^^array2&#125;</span><br></code></pre></td></tr></table></figure></li><li>对数组中的字符串进行统一处理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># :t 是取字符串中的文件名，可以用在数组上，取所有元素的文件名</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;array:t&#125;</span><br><span class="hljs-comment"># :e 是取扩展名，如果没有没有扩展名，结果数组中不会添加空字符串</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;array:e&#125;</span><br><span class="hljs-comment"># 字符串替换等操作也可以对数组使用，替换所有字符串</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;array/a/j&#125;</span><br><span class="hljs-comment"># :# 是排除匹配到的元素，类似 grep -v</span><br><span class="hljs-built_in">print</span> <span class="hljs-variable">$&#123;array:#a*&#125;</span><br><span class="hljs-comment"># 前边加 (M)，是反转后边的效果，即只输出匹配到的元素，类似 grep</span><br><span class="hljs-built_in">print</span> <span class="hljs-variable">$&#123;(M)array:#a*&#125;</span><br><span class="hljs-comment"># 多个操作可以同时进行，(U) 是把字符串转成大写字母</span><br><span class="hljs-built_in">print</span> <span class="hljs-variable">$&#123;(UM)array:#a*&#125;</span><br><br><span class="hljs-comment"># 截断或对齐数组中的字符串</span><br>array=(abc bcde cdefg defghi)<br><br><span class="hljs-comment"># 只取每个字符串的最后两个字符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(l:2:)array&#125;</span><br>bc de <span class="hljs-built_in">fg</span> hi<br><br><span class="hljs-comment"># 用空格补全字符串并且右对齐</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;(l:7:)array&#125;</span><br>    abc<br>   bcde<br>  cdefg<br> defghi<br><br><span class="hljs-comment"># 用指定字符补全</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;(l:7::0:)array&#125;</span><br>0000abc<br>000bcde<br>00cdefg<br>0defghi<br><br><span class="hljs-comment"># 用指定字符补全，第二个字符只用一次</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;(l:7::0::1:)array&#125;</span><br>0001abc<br>001bcde<br>01cdefg<br>1defghi<br><br><span class="hljs-comment"># 左对齐</span><br><span class="hljs-built_in">print</span> -l <span class="hljs-variable">$&#123;(r:7::0::1:)array&#125;</span><br>abc1000<br>bcde100<br>cdefg10<br>defghi1<br></code></pre></td></tr></table></figure></li></ol><h3 id="字典变量"><a href="#字典变量" class="headerlink" title="字典变量"></a>字典变量</h3><ol><li>定义<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">typeset</span> -A table<br><span class="hljs-comment"># 先声明,或者用 local，二者功能是一样的</span><br><span class="hljs-built_in">local</span> -A table<br><br><span class="hljs-comment"># 赋值的语法和数组一样，但顺序依次是键、值、键、值</span><br>table=(k1 v1 k2 v2)<br><span class="hljs-comment">#可以声明赋值一块,local -A table=(k1 v1 k2 v2)</span><br><br><span class="hljs-comment"># 直接用 echo 只能输出值</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$table</span> <span class="hljs-comment">#v1 v2</span><br><br><span class="hljs-comment"># 使用 (kv) 同时输出键和值，(kv) 会把键和值都放到同一个数组里</span><br>% <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(kv)table&#125;</span> <span class="hljs-comment">#k1 v1 k2 v2</span><br><br><span class="hljs-comment"># 哈希表的大小是键值对的数量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$#table</span><br></code></pre></td></tr></table></figure></li><li>读写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$table</span>[k2]<br>table[k2]=<span class="hljs-string">&quot;v2&quot;</span><br><span class="hljs-comment"># 删除元素的方法和数组不同，引号不能省略</span><br><span class="hljs-built_in">unset</span> <span class="hljs-string">&quot;table[k1]&quot;</span><br></code></pre></td></tr></table></figure></li><li>哈希表拼接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 追加元素的方法和数组一样</span><br>table+=(k4 v4 k5 v5)<br><span class="hljs-comment"># 拼接哈希表，要展开成数组再追加</span><br>table1+=(<span class="hljs-variable">$&#123;(kv)table2&#125;</span>)<br></code></pre></td></tr></table></figure></li><li>哈希表遍历<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只遍历值</span><br><span class="hljs-keyword">for</span> i (<span class="hljs-variable">$table</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-comment"># 只遍历键</span><br><span class="hljs-keyword">for</span> i (<span class="hljs-variable">$&#123;(k)table&#125;</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-comment"># 同时遍历键和值</span><br><span class="hljs-keyword">for</span> k v (<span class="hljs-variable">$&#123;(kv)table&#125;</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$k</span> -&gt; <span class="hljs-variable">$v</span>&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>键是否存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(($+table[k1]))<br></code></pre></td></tr></table></figure></li><li>元素排序<br>和数组类似,增加k、v两个选项<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只对值排序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(o)table&#125;</span><br><br><span class="hljs-comment"># 只对键排序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(ok)table&#125;</span><br><br><span class="hljs-comment"># 键值放在一起排序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(okv)table&#125;</span><br></code></pre></td></tr></table></figure></li><li>从字符串、文件构造哈希表<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">str=<span class="hljs-string">&quot;k1 v1 k2 v2&quot;</span><br><span class="hljs-built_in">local</span> -A table=(<span class="hljs-variable">$&#123;=str&#125;</span>)<br><span class="hljs-comment">#从文件构造和数组类似</span><br></code></pre></td></tr></table></figure></li><li>对哈希表的每个元素统一处理<br>可参见数组,同时增加kv两个选项<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#值转成大写</span><br><span class="hljs-built_in">print</span> <span class="hljs-variable">$&#123;(U)table&#125;</span><br><span class="hljs-comment">#键转成大写</span><br><span class="hljs-built_in">print</span> <span class="hljs-variable">$&#123;(Uk)table&#125;</span><br><span class="hljs-comment">#键值转成大写</span><br><span class="hljs-built_in">print</span> <span class="hljs-variable">$&#123;(Ukv)table&#125;</span><br><span class="hljs-comment"># 排除匹配到的值</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;table:#v1&#125;</span><br><span class="hljs-comment"># 只输出匹配到的键</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(Mk)table:#k[1-2]&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>zsh通常不指定数值是整形还是浮点型,通常直接赋值，<strong>虽然默认为字符串</strong>,但作数值计算时自动判断,但可以如下指明类型,同时在双小括号里做c语言的任何符号计算,同时括号内变量可以不需要加$符号(貌似是zsh的一般特性,适用于许多其他场合)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">integer</span> i=123<br><span class="hljs-built_in">float</span> f=12.56<br><span class="hljs-comment">#(t)用于输出变量类型</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(t)i&#125;</span> <span class="hljs-comment">#integer</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(t)f&#125;</span> <span class="hljs-comment">#float</span><br><span class="hljs-comment"># 注意一旦指定了变量类型，类型就不会变了，除非再重新指定其他类型，或者用 unset 删除掉 </span><br><span class="hljs-comment"># 如果把浮点数赋值给整数变量，会取整</span><br>i=12.34<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> <span class="hljs-comment">#会输出12</span><br></code></pre></td></tr></table></figure><ul><li>数学函数<br>zsh&#x2F;mathfunc模块包含数学函数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">zmodload</span> -i zsh/mathfunc<br><span class="hljs-built_in">echo</span> $((sin(<span class="hljs-number">0</span>)+ceil(<span class="hljs-number">14.4</span>)))<br></code></pre></td></tr></table></figure><strong>函数列表</strong></li></ul><table><thead><tr><th align="center">函数名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">abs</td><td align="center">取绝对值</td></tr><tr><td align="center">ceil</td><td align="center">向上取整</td></tr><tr><td align="center">floor</td><td align="center">向下取整</td></tr><tr><td align="center">int</td><td align="center">截断取整</td></tr><tr><td align="center">float</td><td align="center">转换成浮点数</td></tr><tr><td align="center">sqrt</td><td align="center">开平方</td></tr><tr><td align="center">cbrt</td><td align="center">开立方</td></tr><tr><td align="center">log</td><td align="center">自然对数</td></tr><tr><td align="center">log10</td><td align="center">常用对数</td></tr><tr><td align="center">rand48</td><td align="center">随机数</td></tr></tbody></table><p>还有:acos、acosh、asin、asinh、atan、atanh、cos、cosh、erf、erfc、exp、 expm1、fabs、gamma、j0、j1、lgamma、log1p、logb、sin、sinh、tan、 tanh、y0、y1、ilogb、signgam、copysign、fmod、hypot、nextafter、jn、 yn、ldexp、scalb</p><h3 id="变量修饰语"><a href="#变量修饰语" class="headerlink" title="变量修饰语"></a>变量修饰语</h3><p><strong>一般两种格式:</strong></p><ul><li><code>$&#123;(x)var&#125;</code> var是变量名,x是一个或多个字母,</li><li><code>$&#123;var:x&#125;</code> var是变量名,x是一个或多个字母,或其他符号</li></ul><p><strong>注意:加了修饰语的变量依然是变量,可以当普通变量处理,可以嵌套使用,$符号后不可以有空格</strong></p><table><thead><tr><th align="center">修饰符</th><th align="center">举例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">:-</td><td align="center"><code>echo $&#123;var:-abc&#125;</code></td><td align="center">如果变量有值,则输出原值,如果变量不存在、为空字符串、空数组等,则输出abc</td></tr><tr><td align="center">-</td><td align="center"><code>echo $&#123;var-abc&#125;</code></td><td align="center">如果变量有值,则输出原值,如果变量不存在,则输出abc</td></tr><tr><td align="center">:&#x3D;</td><td align="center"><code>echo $&#123;var:=abc&#125;</code></td><td align="center">如果变量有值,则输出原值,如果变量不存在、为空字符串、空数组等,则输出abc并且赋值给var</td></tr><tr><td align="center">::&#x3D;</td><td align="center"><code>echo $&#123;var::=123&#125;</code></td><td align="center">不管有没有值，村不存在，都输出123，并且重新赋值</td></tr><tr><td align="center">:?</td><td align="center"><code>echo $&#123;var:?error&#125;</code></td><td align="center">var没有值或不存在,则直接报错,否则输出原值</td></tr><tr><td align="center">:+</td><td align="center"><code>echo $&#123;var:+123&#125;</code></td><td align="center">如果var有值,则输出123,否则输出空</td></tr><tr><td align="center">(F)</td><td align="center"><code>echo $&#123;(F)array&#125;</code></td><td align="center">把数组中的元素以换行符拼接成字符串,不加任何修饰的话则是空格拼接</td></tr><tr><td align="center">(j&#x2F;x&#x2F;)</td><td align="center"><code>echo $&#123;(j/-=/)array&#125;</code></td><td align="center">把数组中的元素以-&#x3D;两个字符连接</td></tr><tr><td align="center">(s&#x2F;x&#x2F;)</td><td align="center"><code>echo $&#123;(s/==/)str&#125;</code></td><td align="center">把字符串中的字符以&#x3D;&#x3D;两个字符为分隔符分成数组</td></tr><tr><td align="center">(t)</td><td align="center"><code>echo $&#123;(t)var&#125;</code></td><td align="center">输出变量的类型:integer float scalar array association</td></tr><tr><td align="center"><code>(P)</code></td><td align="center"><code>var=abc abc=123 echo $&#123;(P)var&#125;</code></td><td align="center">多重替换,输出123</td></tr><tr><td align="center">[#n]</td><td align="center"><code>echo $(([#16] 255))</code></td><td align="center">以n进制显示十进制整数</td></tr><tr><td align="center">n#</td><td align="center"><code>echo $((16#ff))</code></td><td align="center">显示n进制整数为十进制</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>与bash基本一致,增加了<code>unfunction fun</code>删除某个函数的功能,还有就是规避了<code>$*</code>和<code>$@</code>的区别,zsh推荐只用<code>$*</code></p><h3 id="替代find和ls"><a href="#替代find和ls" class="headerlink" title="替代find和ls"></a>替代find和ls</h3><p>需要开启扩展通配符:setopt EXTENDED_GLOB<br><strong>通配符修饰语列表</strong></p><table><thead><tr><th align="center">名称</th><th align="center">含义</th><th align="center">使用样例或补充说明</th></tr></thead><tbody><tr><td align="center">&#x2F;</td><td align="center">目录</td><td align="center"></td></tr><tr><td align="center">F</td><td align="center">非空</td><td align="center">&#x2F;F(非空目录) &#x2F;^F(空目录)</td></tr><tr><td align="center">.</td><td align="center">普通文件</td><td align="center"></td></tr><tr><td align="center">@</td><td align="center">符号链接</td><td align="center"></td></tr><tr><td align="center">&#x3D;</td><td align="center">socket文件</td><td align="center"></td></tr><tr><td align="center">p</td><td align="center">FIFO 文件</td><td align="center"></td></tr><tr><td align="center">*</td><td align="center">可执行的普通文件</td><td align="center"></td></tr><tr><td align="center">%</td><td align="center">设备文件</td><td align="center"></td></tr><tr><td align="center">%b</td><td align="center">块设备文件</td><td align="center"></td></tr><tr><td align="center">%c</td><td align="center">字符设备文件</td><td align="center"></td></tr><tr><td align="center">r</td><td align="center">文件拥有着有读权限</td><td align="center"></td></tr><tr><td align="center">w</td><td align="center">文件拥有着有写权限</td><td align="center"></td></tr><tr><td align="center">x</td><td align="center">文件拥有着有执行权限</td><td align="center"></td></tr><tr><td align="center">A</td><td align="center">文件拥有组用户有读权限</td><td align="center"></td></tr><tr><td align="center">I</td><td align="center">文件拥有组用户有写权限</td><td align="center"></td></tr><tr><td align="center">E</td><td align="center">文件拥有组用户有执行权限</td><td align="center"></td></tr><tr><td align="center">R</td><td align="center">任何用户都有读权限</td><td align="center"></td></tr><tr><td align="center">W</td><td align="center">任何用户都有写权限</td><td align="center"></td></tr><tr><td align="center">X</td><td align="center">任何用户都有执行权限</td><td align="center"></td></tr><tr><td align="center">s</td><td align="center">设置了setuid的文件</td><td align="center"></td></tr><tr><td align="center">S</td><td align="center">设置了setgid的文件</td><td align="center"></td></tr><tr><td align="center">t</td><td align="center">设置了粘滞位（sticky bit）的文件</td><td align="center"></td></tr><tr><td align="center">f</td><td align="center">符合指定的权限</td><td align="center">f0644 f4755 f700</td></tr><tr><td align="center">e</td><td align="center"></td><td align="center">暂无</td></tr><tr><td align="center">+</td><td align="center">大于某个数</td><td align="center">通常跟数字,与其他配合使用</td></tr><tr><td align="center">d</td><td align="center">指定设备号</td><td align="center"></td></tr><tr><td align="center">l</td><td align="center">硬连接个数</td><td align="center">l-2（小于 2） l+3（大于 3）</td></tr><tr><td align="center">U</td><td align="center">当前用户拥有</td><td align="center"></td></tr><tr><td align="center">G</td><td align="center">当前用户所在组拥有</td><td align="center"></td></tr><tr><td align="center">u</td><td align="center">指定用户 id 拥有</td><td align="center">u1000</td></tr><tr><td align="center">g</td><td align="center">指定用户组 id 拥有</td><td align="center">g1000</td></tr><tr><td align="center">a</td><td align="center">指定文件的 atime</td><td align="center">访问时间,默认单位是天,可跟单位M(月)、w(周)、h(小时)、m(分钟)、s(秒)、+(指定时间之前)、-(指定时间之内)</td></tr><tr><td align="center">m</td><td align="center">指定文件的 mtime</td><td align="center">修改时间,可跟单位、+-,<code>print -l *(.mm+1)</code></td></tr><tr><td align="center">c</td><td align="center">指定文件的 ctime</td><td align="center">文件状态属性修改时间,可跟单位、+-,<code>print -l *(.cm+1)</code></td></tr><tr><td align="center">L</td><td align="center">指定文件大小</td><td align="center">默认单位是字节,单位有k、m和p(512字节的块),也可以大写,<code>print -l *(.Lm-1)</code></td></tr><tr><td align="center">^</td><td align="center">取反</td><td align="center">&#x2F;^F</td></tr><tr><td align="center">-</td><td align="center">小于某个数</td><td align="center">通常跟数字,与其他配合使用</td></tr><tr><td align="center">M</td><td align="center"></td><td align="center">暂无</td></tr><tr><td align="center">T</td><td align="center"></td><td align="center">暂无</td></tr><tr><td align="center">N</td><td align="center">如果没匹配到，返回空而不报错</td><td align="center"></td></tr><tr><td align="center">D</td><td align="center">包含隐藏文件（. 开头）</td><td align="center"></td></tr><tr><td align="center">n</td><td align="center">按数值大小排序</td><td align="center">下文有说明</td></tr><tr><td align="center">o</td><td align="center">递增排序</td><td align="center">下文有说明</td></tr><tr><td align="center">O</td><td align="center">递减排序</td><td align="center">下文有说明</td></tr><tr><td align="center">[n]</td><td align="center">只取第 n 个文件</td><td align="center">.[5]</td></tr><tr><td align="center">[n1,n2]</td><td align="center">取第 n1 到 n2 个文件</td><td align="center">&#x2F;[5,10]</td></tr><tr><td align="center">:X</td><td align="center"></td><td align="center">暂无</td></tr></tbody></table><ol><li>文件排序</li></ol><p>可供排序的因子:n(文件名),L(大小),I(硬连接数),a(atime),m(mtime),c(ctime),d(所在目录深度,从深到浅)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按文件名排序，同一目录下的文件和目录名会一起排，而不是先排目录再排文件</span><br><span class="hljs-comment">#**/*,指当前目录和子目录</span><br><span class="hljs-built_in">print</span> -l **/*(.on)<br>bb.txt<br>cc/aa.txt<br>cc/dd.txt<br>zz.txt<br><br><span class="hljs-comment"># 按文件的目录深度逆序排，d 是从深往浅排，O 是逆序</span><br><span class="hljs-built_in">print</span> -l **/*(.Od)<br>zz.txt<br>bb.txt<br>cc/dd.txt<br>cc/aa.txt<br><br><span class="hljs-comment"># 先按文件名排序，然后再按大小排序，这样大小相同的文件依然是按文件名排的</span><br><span class="hljs-built_in">print</span> -l **/*(.onoL)<br>bb.txt<br>cc/aa.txt<br>cc/dd.txt<br>cc.txt<br></code></pre></td></tr></table></figure><ol start="2"><li><p>组合使用</p><p> 类型和类型之间要用逗号个开,逗号前后内容互不干扰(取反^只影响到逗号之前的内容)</p><p> <code>print -l *(/m-2,.Lm-3oL,@D)</code></p></li><li><p>批量重命名zmv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用前需要先加载进来</span><br><span class="hljs-built_in">autoload</span> -U zmv<br><br><span class="hljs-comment"># 将所有 txt 文件扩展名改成 conf</span><br><span class="hljs-comment"># 参数要用单引号扩起来，$1 代表第一个参数中括号中的内容</span><br> zmv <span class="hljs-string">&#x27;(*).txt&#x27;</span> <span class="hljs-string">&#x27;$1.conf&#x27;</span><br><br><span class="hljs-comment"># 如果加了 -W 参数，zmv 会自动识别文件名中需要保留的部分</span><br> zmv -W <span class="hljs-string">&#x27;*.txt&#x27;</span> <span class="hljs-string">&#x27;*.conf&#x27;</span><br><br><span class="hljs-comment"># 调整文件名各部分的前后顺序</span><br>zmv <span class="hljs-string">&#x27;(*).(*).txt&#x27;</span> <span class="hljs-string">&#x27;$2.$1.txt&#x27;</span><br><span class="hljs-comment"># 加 -n 预览而不实际运行</span><br>zmv -n <span class="hljs-string">&#x27;(*).(*).txt&#x27;</span> <span class="hljs-string">&#x27;$2.$1.txt&#x27;</span><br><span class="hljs-built_in">mv</span> -- a.b.txt b.a.txt<br><br><span class="hljs-comment"># 0 1 2 ... 前添加 0，以便和 10 11 12 ... 宽度一致</span><br>zmv <span class="hljs-string">&#x27;([0-9]).(*)&#x27;</span> <span class="hljs-string">&#x27;0$1.$2&#x27;</span><br><span class="hljs-comment"># 去掉开头的一个 0</span><br>zmv <span class="hljs-string">&#x27;(0)(*)&#x27;</span> <span class="hljs-string">&#x27;$2&#x27;</span><br><br><span class="hljs-comment"># 文件整理到目录</span><br>zmv <span class="hljs-string">&#x27;(*) - (*) - (*).txt&#x27;</span> <span class="hljs-string">&#x27;$1/$2 - $3.txt&#x27;</span><br><br><span class="hljs-comment"># 转换大小写</span><br>zmv <span class="hljs-string">&#x27;(*).txt&#x27;</span> <span class="hljs-string">&#x27;$&#123;(U)1&#125;.txt&#x27;</span><br>zmv <span class="hljs-string">&#x27;(*).txt&#x27;</span> <span class="hljs-string">&#x27;$&#123;(L)1&#125;.txt&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>不展开通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">calc</span></span>() &#123;<br>    <span class="hljs-built_in">zmodload</span> zsh/mathfunc<br>    <span class="hljs-built_in">echo</span> $(($*))<br>&#125;<br>calc 12+12<br>calc 12*12 <span class="hljs-comment">#会报错</span><br><span class="hljs-built_in">noglob</span> calc 12*12 <span class="hljs-comment">#可以</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="local和typeset"><a href="#local和typeset" class="headerlink" title="local和typeset"></a>local和typeset</h3><p>local和typeset基本一样(除了不能用-f和-g这两个选项)</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">强制字符串内容为小写</td><td align="center"><code>local -l str=abcABC</code></td></tr><tr><td align="center">-u</td><td align="center">强制字符串内容为大写</td><td align="center"><code>local -u str=abcABC</code></td></tr><tr><td align="center">-x</td><td align="center">设置为环境变量</td><td align="center"><code>export str=abc</code>等价于<code>local -x str=abc</code></td></tr><tr><td align="center">-r</td><td align="center">只读</td><td align="center"><code>local -r strl=abc</code>等价于<code>readonly str1=abc</code></td></tr><tr><td align="center">-U</td><td align="center">设置数组不包含重复元素</td><td align="center"><code>local -U array=(aa bb aa cc)</code></td></tr><tr><td align="center">-Z n</td><td align="center">设置整数位数</td><td align="center">不够用0不全,超过会被截断</td></tr><tr><td align="center">-i n</td><td align="center">设置整数为其他进制显示</td><td align="center">支持2-36</td></tr><tr><td align="center"><code>local &#123;i,j,k&#125;=123</code></td><td align="center">赋值多个变量为同一个值</td><td align="center"></td></tr><tr><td align="center">-T</td><td align="center">绑定字符串和数组</td><td align="center"><code>local -T DIR dir</code>,DIR为字符串,dir为数组,以冒号连接,主要用于path变量</td></tr><tr><td align="center">-p</td><td align="center">显示变量的定义方式</td><td align="center">显示脚本如何定义该变量的</td></tr></tbody></table><h3 id="双引号问题"><a href="#双引号问题" class="headerlink" title="双引号问题"></a>双引号问题</h3><p>zsh不需要像bash那样频繁加双引号来避免错误。<br>zsh需要加双引号的场景:</p><ol><li>像这样的包含字符或者特殊符号的字符串 <code>&quot;aa bb \t \n *&quot;</code> 出现在代码中时，两边要加双引号</li><li>在用<code>$()</code>调用命令时，如果希望结果按一个字符串处理，需要加上双引</li><li>如果想将数组当单个字符串处理，需要加双引号，<code>array=(a b); print -l &quot;$array&quot;</code></li><li>其他的原本不是单个字符串的东西，需要转成单个字符串的场景，要加双引号</li></ol><p>其余通常不加,其中典型场景:</p><ol><li>任何情况下，字符串变量的两边都不需要加双引号，无论里边的内容多么特殊，或者变量存不存在，都没有关系，如<code>$str</code></li><li>如果不转换类型（比如数组转成字符串），任何变量的两边都不需要加双引号</li><li><code>$1 $2 $*</code>这些参数（其实它们也都是单个字符串），都不需要加双引号，无论内容是什么，或者参数是否存在。</li></ol><h3 id="mapfile读写文件"><a href="#mapfile读写文件" class="headerlink" title="mapfile读写文件"></a>mapfile读写文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">zmodload</span> zsh/mapfile<br><br><span class="hljs-comment"># 这样就可以创建文件并写入内容，如果文件存在则会被覆盖</span><br><span class="hljs-built_in">mapfile</span>[test.txt]=<span class="hljs-string">&quot;ab cd&quot;</span><br><span class="hljs-built_in">cat</span> test.txt<br><span class="hljs-comment">#ab cd</span><br><br><span class="hljs-comment"># 判断文件是否存在</span><br>(($+mapfile[test.txt])) &amp;&amp; <span class="hljs-built_in">echo</span> good<br><span class="hljs-comment">#good</span><br><br><span class="hljs-comment"># 读取文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$mapfile</span>[test.txt]<br><span class="hljs-comment">#ab cd</span><br><br><span class="hljs-comment"># 删除文件</span><br><span class="hljs-built_in">unset</span> <span class="hljs-string">&quot;mapfile[test.txt]&quot;</span><br><br><span class="hljs-comment"># 遍历文件</span><br><span class="hljs-keyword">for</span> i (<span class="hljs-variable">$&#123;(k)mapfile&#125;</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-comment">#test1.txt</span><br><span class="hljs-comment">#test2.txt</span><br></code></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [some condition]&#123;<br><span class="hljs-built_in">break</span>/continue<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">until [some condition]&#123;<br><span class="hljs-keyword">break</span>/<span class="hljs-keyword">continue</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#样例</span><br><span class="hljs-keyword">for</span> i (aa bb cc)&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br>array=(aa bb cc)<br><span class="hljs-keyword">for</span> i (<span class="hljs-variable">$array</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++))&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br><span class="hljs-keyword">for</span> i (&#123;1..10&#125;)&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">repeat</span> <span class="hljs-number">5</span>&#123;<br><span class="hljs-attribute">echo</span> good<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> <span class="hljs-variable">$i</span> &#123;<br>(a)<br><span class="hljs-built_in">echo</span> 1<br>;;<br><br>(b)<br><span class="hljs-built_in">echo</span> 2<br><span class="hljs-comment">#继续执行下一个匹配的语句(不再进行匹配)</span><br>;&amp;<br><br>(c)<br><span class="hljs-built_in">echo</span> 3<br><span class="hljs-comment">#继续向下匹配，看是否有满足条件的分支</span><br>;|<br><br>(c)<br><span class="hljs-built_in">echo</span> 33<br>;;<br><br>(*)<br><span class="hljs-built_in">echo</span> oher<br>;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户输入选择语句"><a href="#用户输入选择语句" class="headerlink" title="用户输入选择语句"></a>用户输入选择语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> i (aa bb cc)&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br>&#125;<br></code></pre></td></tr></table></figure><p>必须加break,否则会一直让用户选择</p><h3 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>语句1<br>&#125; always&#123;<br>语句2<br>&#125;<br></code></pre></td></tr></table></figure><p>无论语句1是否出错,都执行语句2</p><h3 id="socket模块"><a href="#socket模块" class="headerlink" title="socket模块"></a>socket模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 监听连接端=======</span><br><span class="hljs-comment"># 首先要加载 socket 模块</span><br><span class="hljs-built_in">zmodload</span> zsh/net/socket<br><br><span class="hljs-built_in">zsocket</span> -l test.sock<br>listenfd=<span class="hljs-variable">$REPLY</span><br><span class="hljs-comment"># 此处阻塞等待连接</span><br><span class="hljs-built_in">zsocket</span> -a <span class="hljs-variable">$listenfd</span><br><span class="hljs-comment"># 连接建立完成</span><br>fd=<span class="hljs-variable">$REPLY</span><br><span class="hljs-comment"># 然后 $fd 就可读可写</span><br><span class="hljs-built_in">cat</span> &lt;&amp;<span class="hljs-variable">$fd</span><br><br><span class="hljs-comment"># 发起连接端==========</span><br><span class="hljs-built_in">zmodload</span> zsh/net/socket<br><span class="hljs-built_in">zsocket</span> test.sock<br>fd=<span class="hljs-variable">$REPLY</span><br><span class="hljs-built_in">echo</span> good &gt;&amp;<span class="hljs-variable">$fd</span><br><br><span class="hljs-comment"># 关闭监听端========</span><br><span class="hljs-built_in">exec</span> &#123;listenfd&#125;&gt;&amp;-<br><span class="hljs-built_in">exec</span> &#123;fd&#125;&gt;&amp;-<br><span class="hljs-built_in">rm</span> test.sock<br><br><span class="hljs-comment"># 关闭连接端======</span><br><span class="hljs-built_in">exec</span> &#123;fd&#125;&gt;&amp;-<br></code></pre></td></tr></table></figure><h3 id="TCP模块"><a href="#TCP模块" class="headerlink" title="TCP模块"></a>TCP模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 监听连接端=======</span><br><span class="hljs-comment"># 首先要加载 tcp 模块</span><br><span class="hljs-built_in">zmodload</span> zsh/net/tcp<br><br><span class="hljs-built_in">ztcp</span> -l 1234<br>listenfd=<span class="hljs-variable">$REPLY</span><br><span class="hljs-comment"># 此处阻塞等待连接</span><br><span class="hljs-built_in">ztcp</span> -a <span class="hljs-variable">$listenfd</span><br><span class="hljs-comment"># 连接建立完成</span><br>fd=<span class="hljs-variable">$REPLY</span><br><br><span class="hljs-comment"># 然后 $fd 就可读可写</span><br><span class="hljs-built_in">cat</span> &lt;&amp;<span class="hljs-variable">$fd</span><br><br><span class="hljs-comment"># 发起连接端===========</span><br><span class="hljs-comment"># 首先要加载 tcp 模块</span><br><span class="hljs-built_in">zmodload</span> zsh/net/tcp<br><br><span class="hljs-built_in">ztcp</span> 127.0.0.1 1234<br><span class="hljs-comment"># 连接建立完成</span><br>fd=<span class="hljs-variable">$REPLY</span><br><br><span class="hljs-comment"># 然后 $fd 就可读可写</span><br><span class="hljs-built_in">echo</span> good &gt;&amp;<span class="hljs-variable">$fd</span><br><br><span class="hljs-comment"># 关闭发起连接端===============</span><br><span class="hljs-comment"># fd 是之前存放 fd 号的变量</span><br>% <span class="hljs-built_in">ztcp</span> -c <span class="hljs-variable">$fd</span><br><br><span class="hljs-comment"># 关闭监听连接端=============</span><br>% <span class="hljs-built_in">ztcp</span> -c <span class="hljs-variable">$listenfd</span><br>% <span class="hljs-built_in">ztcp</span> -c <span class="hljs-variable">$fd</span><br></code></pre></td></tr></table></figure><p>接受端例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/zsh</span><br><br><span class="hljs-built_in">zmodload</span> zsh/net/tcp<br><br>(($+<span class="hljs-number">1</span>)) || &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$&#123;0:t&#125;</span> port&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-built_in">ztcp</span> -l <span class="hljs-variable">$1</span><br>listenfd=<span class="hljs-variable">$REPLY</span><br><br>[[ <span class="hljs-variable">$listenfd</span> == &lt;-&gt; ]] || <span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-keyword">while</span> ((<span class="hljs-number">1</span>)) &#123;<br>    <span class="hljs-built_in">ztcp</span> -a <span class="hljs-variable">$listenfd</span><br>    fd=<span class="hljs-variable">$REPLY</span><br>    [[ <span class="hljs-variable">$fd</span> == &lt;-&gt; ]] || <span class="hljs-built_in">continue</span><br><br>    <span class="hljs-built_in">cat</span> &lt;&amp;<span class="hljs-variable">$fd</span><br>    <span class="hljs-built_in">ztcp</span> -c <span class="hljs-variable">$fd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发送端例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/zsh</span><br><br><span class="hljs-built_in">zmodload</span> zsh/net/tcp<br><br>((<span class="hljs-variable">$#</span> &gt;= <span class="hljs-number">2</span>)) || &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$&#123;0:t&#125;</span> [hostname] port message&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == &lt;0-65535&gt; ]] &#123;<br>    <span class="hljs-built_in">ztcp</span> 127.0.0.1 <span class="hljs-variable">$1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">ztcp</span> <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span><br>    <span class="hljs-built_in">shift</span><br>&#125;<br><br>fd=<span class="hljs-variable">$REPLY</span><br>[[ <span class="hljs-string">&quot;<span class="hljs-variable">$fd</span>&quot;</span> == &lt;-&gt; ]] || <span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;*[2,-1]&#125;</span> &gt;&amp;<span class="hljs-variable">$fd</span><br><span class="hljs-built_in">ztcp</span> -c <span class="hljs-variable">$fd</span><br></code></pre></td></tr></table></figure><h3 id="日期模块-zmodload-zsh-datetime"><a href="#日期模块-zmodload-zsh-datetime" class="headerlink" title="日期模块:zmodload zsh&#x2F;datetime"></a>日期模块:zmodload zsh&#x2F;datetime</h3><table><thead><tr><th align="center">例子</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>echo $EPOCHSECONDS</code></td><td align="center">从光标1970年到现在的秒数,等价于<code>date +%s</code></td></tr><tr><td align="center"><code>echo $EPOCHREALTIME</code></td><td align="center">输出高精度当前时间戳</td></tr><tr><td align="center"><code>echo $epochtime</code></td><td align="center">输出当前时间戳的秒和纳秒</td></tr><tr><td align="center"><code>strftime &quot;%Y-%m-%d %H:%M:%S (%u)&quot; $EPOCHSECONDS</code></td><td align="center">按指定格式输出</td></tr><tr><td align="center"><code>strftime -s str &quot;%Y-%m-%d %H:%M:%S (%u)&quot; $EPOCHSECONDS</code></td><td align="center">存到变量str中</td></tr><tr><td align="center"><code>strftime -r &quot;%Y-%m-%d %H:%M:%S (%u)&quot; &quot;2017-09-01 10:10:58 (5)&quot;</code></td><td align="center">上述的反操作</td></tr></tbody></table><h3 id="gdbm模块–存在文件里的哈希表"><a href="#gdbm模块–存在文件里的哈希表" class="headerlink" title="gdbm模块–存在文件里的哈希表"></a>gdbm模块–存在文件里的哈希表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">% <span class="hljs-built_in">zmodload</span> zsh/db/gdbm<br><br><span class="hljs-comment"># 声明数据库文件对应的哈希表</span><br><span class="hljs-built_in">local</span> -A sampledb<br><span class="hljs-comment"># 创建数据库文件，文件名是 sample.gdbm，对应 sampledb 哈希表</span><br><span class="hljs-comment"># 如果该文件已经存在，则会继续使用该文件</span><br>ztie -d db/gdbm -f sample.gdbm sampledb<br><br><span class="hljs-comment"># 然后正常使用 sampledb 哈希表即可，数据会同步写入到数据库文件中</span><br>sampledb[k1]=v1<br>sampledb+=(k2 v2 k3 v3)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;(kv)sampledb&#125;</span><br><span class="hljs-comment">#k1 v1 k2 v2 k3 v3</span><br><br><span class="hljs-comment"># 获取数据库文件路径</span><br>% zgdbmpath sampledb<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$REPLY</span><br><span class="hljs-comment">#/home/goreliu/sample.gdbm</span><br><br><span class="hljs-comment"># 释放数据库文件</span><br>zuntie -u sampledb<br><br><br><span class="hljs-comment"># 也可以用只读的方式加载数据库文件</span><br>ztie -r -d db/gdbm -f sample.gdbm sampledb<br><span class="hljs-comment"># 但这样的话，需要用 zuntie -u 释放数据库文件</span><br>zuntie -u sampledb<br></code></pre></td></tr></table></figure><h3 id="sched–-计划调度命令"><a href="#sched–-计划调度命令" class="headerlink" title="sched–&gt;计划调度命令"></a>sched–&gt;计划调度命令</h3><p>zmodload zsh&#x2F;sched</p><ul><li><code>sched +5 ls</code>5秒后运行ls</li><li><code>sched</code>列出已有任务</li><li><code>sched -n</code>去除第n个待运行命令</li></ul><h3 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h3><p>可以用man zshmodules查看模块功能</p><ul><li>zsh&#x2F;system:底层文件读写</li><li>zsh&#x2F;pcre:正则表达式库</li><li>zsh&#x2F;stat:内部stat，取代stat</li><li>zsh&#x2F;zftp:内部ftp客户端</li><li>zsh&#x2F;zprof:性能追踪工具</li><li>zsh&#x2F;zpty:操作pty的命令</li><li>zsh&#x2F;zselect:select系统调用的封装</li></ul><h3 id="TRAPINT"><a href="#TRAPINT" class="headerlink" title="TRAPINT"></a>TRAPINT</h3><p>该函数名,捕获任意信号?有待研究,如下的代码竟然捕捉到SIGINT信号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/zsh</span><br><br><span class="hljs-comment"># SIGINT 是 2 信号，ctrl + c 会触发</span><br><span class="hljs-function"><span class="hljs-title">TRAPINT</span></span>() &#123;<br>    <span class="hljs-comment"># 处理一些退出前的善后工作</span><br>    <span class="hljs-built_in">sleep</span> 333<br>&#125;<br><br><span class="hljs-built_in">sleep</span> 1000<br></code></pre></td></tr></table></figure><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><ol><li>统一使用4个空格来缩进</li><li>非特殊场景,每行代码不超过100个字符</li><li>在前一行尾部加一个空格和 \ 折行，折行后缩进一层（4 个空格）。</li><li>如果缩进的是一个文本块，可以使用对齐缩进，也可以使用 4 个空格的固定缩进。</li><li>如果是在 aa &amp;&amp; bb || cc、[[ ]] 或者 (( )) 中折行，&amp;&amp; || 放在下一行的行首。</li><li>在缩进和对齐之外的场景，不允许出现逻辑上不必要的连续多个空格。</li><li><ul><li>&amp;&amp; | 等双元运算符左右要加一个空格。</li></ul></li><li>! ~等一元运算符和作用对象之间不加空格。</li><li>( ) 和 (( )) { } 内侧不加空格，[[ ]] 因为语法需要，内侧加一个空格。</li><li><code>;</code>之前不加空格，之后加一个空格。</li><li>定义函数时（以及在 (( )) 中调用函数时），函数名和 ( 之间不加空格。</li><li>if while 等关键字和后边的内容之间加一个空格</li><li>if<code>[[ ]] &#123;</code>等场景中，<code>&#123;</code>和前边的内容之间加一个空格。</li><li>变量和<code>[ ]</code>之间不加空格，用<code>[ ]</code>取数组或者哈希表值时，<code>[ ]</code>内侧不加空格。</li><li><code>&gt; &lt;</code>等重定向符号和文件或者文件描述符之间不加空格。</li><li>非特殊场景，不允许出现超过两个连续空行。</li><li>#!&#x2F;bin&#x2F;zsh 后加一个空行。</li><li>if while 等语句块之后加一个空行。</li><li>定义函数后加一个空行。</li><li>逻辑关系不强的两行（或者两块）代码之间，根据逻辑关系强弱（自行判断），加一个或两个空行。</li><li>在判断条件的场景，不使用<code>[ ]</code>，用<code>[[ ]]</code>代替。</li><li>在数值计算的场景，使用<code>$(( ))</code>而不是<code>$[ ]</code>。</li><li>使用数值时，两端不加引号。</li><li>用<code>$var</code>取变量值时，两边不加双引号，除非需要将非字符串变量转换成字符串。</li><li>在非必须场景，不需要加<code>$&#123;var&#125;</code>中的大括号。</li><li>变量使用前要明确指明是局部变量（用 local 定义）还是全局变量（用 typeset -g 定义）。</li><li>能用局部变量的地方全部使用局部变量（用 local 定义）。</li><li>变量名中的单词可以使用下划线分隔或者驼峰风格，在不影响可读性的情况也可以使用全小写字母，但在同一个文件中要一致。</li><li>字符串常量两端可以添加双引号或者单引号，但同一个文件中风格要一致。</li><li>可以使用 name() 或者 function name() 定义函数，但同一个文件中风格要一致。</li><li>非特殊场景，单个脚本文件不超过 1000 行。</li></ol><h3 id="bash和zsh的简明对比"><a href="#bash和zsh的简明对比" class="headerlink" title="bash和zsh的简明对比"></a>bash和zsh的简明对比</h3><table><thead><tr><th align="center">bash</th><th align="center">zsh</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>&quot;$var&quot;</code></td><td align="center"><code>$var</code></td><td align="center">避免变量中有空格导致异常</td></tr><tr><td align="center"><code>&quot;$@&quot;</code></td><td align="center"><code>$*</code></td><td align="center">避免变量中有空格导致异常</td></tr><tr><td align="center"><code>&quot;$&#123;array[@]&#125;&quot;</code></td><td align="center"><code>$array</code></td><td align="center">取数组所有元素，@ 可改成 *</td></tr><tr><td align="center">&#96;”$</td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件系统与存储</title>
    <link href="/2021/10/21/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%AD%98%E5%82%A8/"/>
    <url>/2021/10/21/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>原始磁盘-&gt;创建分区(划分磁盘)-&gt;在各个分区上创建文件系统-&gt;挂载文件系统</p><h3 id="创建分区-fdisk和cfdisk"><a href="#创建分区-fdisk和cfdisk" class="headerlink" title="创建分区-&gt;fdisk和cfdisk"></a>创建分区-&gt;fdisk和cfdisk</h3><p>cfdisk更加界面友好一点</p><ul><li>查看当前系统所有设备<code>fdisk -l</code></li><li>对某个设备进行分区<code>fdisk [设备名]</code>或<code>cfdisk [设备名]</code>,注意设备名后面不加数字,加数字的都是该设备上的某分区,如:<strong>&#x2F;dev&#x2F;sda是设备,&#x2F;dev&#x2F;sda1则是已分好的分区</strong>,(之后进入工具,有关知识待实践)</li></ul><h3 id="创建文件系统-mkfs"><a href="#创建文件系统-mkfs" class="headerlink" title="创建文件系统-&gt;mkfs.*"></a>创建文件系统-&gt;mkfs.*</h3><p>目前流行的系统有:ext4(mkfs.ext4),zfs(mkfs.zfs),btrfs(mkfs.btrfs)<br><code>mkfs.* [分区名]</code>分区名有数字,这会格式化分区后建文件系统</p><h3 id="挂载文件系统-mount"><a href="#挂载文件系统-mount" class="headerlink" title="挂载文件系统-&gt;mount"></a>挂载文件系统-&gt;mount</h3><p><code>mount -t [ext4、zfs、btrfs] [设备名] [目录]</code>把已经建好文件系统的分区挂载到指定目录</p><h3 id="文件系统的检查与修复-fsck"><a href="#文件系统的检查与修复-fsck" class="headerlink" title="文件系统的检查与修复-&gt;fsck"></a>文件系统的检查与修复-&gt;fsck</h3><p>fsck检查文件系统时,文件系统必须未挂载,fsck使用&#x2F;etc&#x2F;fstab文件自动检查文件系统类型,如果&#x2F;etc&#x2F;fstab里没有该文件系统分区的信息,需要加-t选项指明文件系统类型,如下:<br><code>fsck -t ext4 /dev/sdb1</code></p><h2 id="逻辑卷"><a href="#逻辑卷" class="headerlink" title="逻辑卷"></a>逻辑卷</h2><p>逻辑卷可以把不同物理设备上的分区,结合起来,动态增加文件系统大小:下面是类比<br>物理卷(实质上是各个原始分区)-&gt;卷组(多个物理卷)-&gt;逻辑卷(在卷组基础上加上逻辑关联,新成整体)。<br>物理设备-&gt;某个原始分区-&gt;文件系统。<br>Linux系统将一个逻辑卷视为一个物理分区,格式化一个文件系统后可以挂载</p><h3 id="pvcreate转化物理分区为物理卷"><a href="#pvcreate转化物理分区为物理卷" class="headerlink" title="pvcreate转化物理分区为物理卷"></a>pvcreate转化物理分区为物理卷</h3><p><code>sudo pvcreate /dev/sdb1</code>这实际只是标记该分区为一个物理卷<br><code>sudo pvdisplay /dev/sdb1</code>显示物理卷的详细信息</p><h3 id="vgcreate创建卷组"><a href="#vgcreate创建卷组" class="headerlink" title="vgcreate创建卷组"></a>vgcreate创建卷组</h3><p><code>sudo vgcreate Vol1 /dev/sdb1 /dev/sdx</code>将两个物理卷创建到一个卷组<br><code>sudo vgdisplay Vol1</code>查看卷组信息</p><h3 id="lvcreate创建逻辑卷"><a href="#lvcreate创建逻辑卷" class="headerlink" title="lvcreate创建逻辑卷"></a>lvcreate创建逻辑卷</h3><p><code>sudo lvcreate -l 100%FREE -n lvtest Vol1</code>在卷组上创建逻辑卷,-l制定多少可用的卷组空间,以百分比表示,-L选项以字节为单位,-n制定逻辑卷的名字,更多选项看man(有待研究)<br><code>sudo lvdisplay Vol1</code>查看逻辑卷</p><h3 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h3><p><code>sudo mkfs.ext4 /dev/Vol1/lvtest</code>创建文件系统<br><code>sudo mount /dev/Vol1/lvtest /mnt</code>挂载<br>注意:路径中同时指明了卷组名和逻辑卷名</p><h3 id="修改逻辑卷-待建"><a href="#修改逻辑卷-待建" class="headerlink" title="修改逻辑卷(待建)"></a>修改逻辑卷(待建)</h3><ul><li>vgchange 激活和禁用卷组</li><li>vgremove 删除卷组</li><li>vgextend 将物理卷加到卷组中</li><li>vgreduce 从卷组中删除物理卷</li><li>lvextend 增加逻辑卷的大小</li><li>lvreduce 减小逻辑卷的大小</li></ul><h2 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h2><h3 id="windows下U盘只读不可写问题"><a href="#windows下U盘只读不可写问题" class="headerlink" title="windows下U盘只读不可写问题"></a>windows下U盘只读不可写问题</h3><p>a.<code>df -h</code>查找挂载点<br>b.<code>sudo umount 位置</code>卸载U盘而不拔掉<br>c.<code>sudo dosfsck -v -a 文件系统分区(如:/dev/sdb1)</code>修复故障<br>d.<code>sudo mount 文件系统 挂载点</code>重新挂载</p><h3 id="自动挂载磁盘"><a href="#自动挂载磁盘" class="headerlink" title="自动挂载磁盘:"></a>自动挂载磁盘:</h3><p>　a.<code>fdisk -l</code>查看可挂载磁盘<br>　b.<code>df -h</code>查看已挂载的磁盘<br>　c.<code>blkid</code>获取目标磁盘的uuid和属性<br>　d.<code>vi /etc/fstab</code>添加开机mount,格式:UUID&#x3D;xx &#x2F;home&#x2F;nanbert&#x2F;disk ext4 defaults 1 1 </p><h3 id="从现有文件创建映像文件"><a href="#从现有文件创建映像文件" class="headerlink" title="从现有文件创建映像文件"></a>从现有文件创建映像文件</h3><p><code>genisoimage -o cd-rom.iso -R -J ~/cd-rom-files</code></p><h3 id="CD-ROM"><a href="#CD-ROM" class="headerlink" title="CD-ROM"></a>CD-ROM</h3><p>清除一张CD-ROM<br><code>wodim dev=/dev/cdrw blank=fast</code><br>写入一个映像文件进CD-ROM<br><code>wodim dev=/dev/cdrw image.iso</code></p><h3 id="挂载某个镜像"><a href="#挂载某个镜像" class="headerlink" title="挂载某个镜像"></a>挂载某个镜像</h3><p><code>sudo mount xx.iso -o loop /mnt</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件权限</title>
    <link href="/2021/10/20/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    <url>/2021/10/20/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="etc-passwd文件"><a href="#etc-passwd文件" class="headerlink" title="&#x2F;etc&#x2F;passwd文件"></a>&#x2F;etc&#x2F;passwd文件</h3><p>&#x2F;etc&#x2F;passwd包含了一些与用户有关的信息 以’:’分割符依次为以下内容</p><ul><li>登陆用户名</li><li>用户账户的UID(数字形式)</li><li>用户账户的组ID(GID)(数字形式)</li><li>用户账户的文本描述(备注字段)</li><li>用户HOME目录位置</li><li>用户默认shell<br>root的UID为0,1000以下的UID为系统服务账户预留,普通用户为1000以后</li></ul><h3 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="&#x2F;etc&#x2F;shadow文件"></a>&#x2F;etc&#x2F;shadow文件</h3><p>&#x2F;etc&#x2F;shadow文件管理着各个用户的密码,** 最好不要擅自修改,可能会造成系统崩溃**,以冒号分隔符,有以下字段</p><ul><li>与&#x2F;etc&#x2F;passwd 文件中的登录名字段对应的登录名</li><li>加密后的密码</li><li>自上次修改密码后过去的天数（自 1970 年 1 月 1 日开始计算）</li><li>多少天后才能更改密码</li><li>多少天后必须更改密码</li><li>密码过期前提前多少天提醒用户更改密码</li><li>密码过期后多少天禁用用户账户</li><li>用户账户被禁用的日期（用自 1970 年 1 月 1 日到当天的天数表示）</li><li>预留字段给将来使用</li></ul><h3 id="useradd命令与useradd文件"><a href="#useradd命令与useradd文件" class="headerlink" title="useradd命令与useradd文件"></a>useradd命令与useradd文件</h3><p><code>useradd</code>命令使用系统的默认配置存在&#x2F;etc&#x2F;default&#x2F;useradd文件中,arch linux默认配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># useradd defaults file for ArchLinux</span><br><span class="hljs-comment"># original changes by TomK</span><br>GROUP=<span class="hljs-built_in">users</span><br>HOME=/home<br>INACTIVE=-1<br>EXPIRE=<br>SHELL=/bin/bash<br>SKEL=/etc/skel<br>CREATE_MAIL_SPOOL=no<br></code></pre></td></tr></table></figure><p>含义如下:</p><ul><li>新用户会被添加到 users 的公共组；</li><li>新用户的 HOME 目录将会位于&#x2F;home&#x2F;loginname；</li><li>新用户账户密码在过期后不会被禁用；</li><li>新用户账户未被设置过期日期；</li><li>新用户账户将 bash shell 作为默认 shell；</li><li>系统会将&#x2F;etc&#x2F;skel 目录下的内容复制到用户的 HOME 目录下；(一般用于一些bash或vim配置文件等)</li><li>系统不会为该用户账户在 mail 目录下创建一个用于接收邮件的文件。<br>最常用命令<br><code>sudo useradd -m test</code>创建新HOME目录名为test。</li></ul><h3 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h3><p><code>sudo userdel -r test</code>删除用户test，-r选项表明删除test用户的HOME目录及邮件目录</p><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>usermod命令很强大(基本可以替代接下来的修改命令)可以用来修改&#x2F;etc&#x2F;passwd中的大部分字段,常用选项如下:</p><ul><li>-c修改备注字段</li><li>-e修改过期日期</li><li>-g修改默认的登录组</li><li>-l修改用户账户的登录名</li><li>-L锁定账户,使用户无法登录</li><li>-p修改账户的密码</li><li>-U解除锁定,使用户能够登录</li><li><code>sudo usermod -G shared test</code>把test用户添加到组shared <span id = "usermod"></span></li></ul><h3 id="passwd和chpasswd"><a href="#passwd和chpasswd" class="headerlink" title="passwd和chpasswd"></a>passwd和chpasswd</h3><ul><li><code>sudo passwd test</code>修改test用户的密码,如果只用passwd只会改变当前用户的密码,-e选项能强制用户下次登录时修改密码。</li><li>chpasswd可以大量修改密码<code>sudo chpasswd &lt; users.txt</code>能从users.txt中自动读取登录名和密码对(由冒号分割)列表</li></ul><h3 id="chsh、chfn和chage"><a href="#chsh、chfn和chage" class="headerlink" title="chsh、chfn和chage"></a>chsh、chfn和chage</h3><ul><li><code>sudo chsh -s /bin/zsh test</code>快速修改默认的用户登录shell。必须全路径</li><li><code>sudo chfn test</code>为用户test添加备注字段,默认会用finger命令的输出作为备注字段,如果没装finger，会询问你。</li><li>chage命令用来帮助管理用户的有效期<ul><li>-d:设置上次修改密码到现在的天数</li><li>-E:设置密码过期的日期</li><li>-l:设置密码过期到锁定账户的天数</li><li>-m:设置修改密码之间最少要多少天</li><li>-W:设置密码过期前多久开始出现提醒信息<br>change命令的日期值可以用下面两种方式</li><li>YYYY-MM-DD</li><li>代表从1970年1月1日起到该日期的天数</li></ul></li></ul><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><h3 id="etc-group文件"><a href="#etc-group文件" class="headerlink" title="&#x2F;etc&#x2F;group文件"></a>&#x2F;etc&#x2F;group文件</h3><p>与&#x2F;etc&#x2F;passwd文件类似,以冒号分割符有以下四个字段:</p><ul><li>组名</li><li>组密码(用的不多,允许非成员通过它成为该组的成员)</li><li>GID</li><li>属于该组的用户列表(<strong>注意:文件中不一定列全了,一定要结合&#x2F;etc&#x2F;passwd来查看</strong>)</li></ul><h3 id="groupadd命令"><a href="#groupadd命令" class="headerlink" title="groupadd命令"></a>groupadd命令</h3><p><code>sudo groupad shared</code>创建新组,默认没有用户<br>见<a href="#usermod">usermod</a>那节,为组添加用户</p><h3 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h3><ul><li>-g:修改已有组GID<code>groupmod -g newGid groupName</code></li><li>-n:修改组名<code>groupmod -n newname oldname</code></li></ul><h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><p><code>umask</code>命令会输出4位数的掩码值,以<strong>0022</strong>为例(第一个0仅代表8进制的意思):</p><ul><li>二进制: 000 010 010</li><li>取消新文件和新目录的组w权限和其他用户w权限<br>对照表</li></ul><table><thead><tr><th align="center">Oct</th><th align="center">Bin</th><th align="center">File Mode</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">000</td><td align="center">—</td></tr><tr><td align="center">1</td><td align="center">001</td><td align="center">–x</td></tr><tr><td align="center">2</td><td align="center">010</td><td align="center">-w-</td></tr><tr><td align="center">3</td><td align="center">011</td><td align="center">-wx</td></tr><tr><td align="center">4</td><td align="center">100</td><td align="center">r–</td></tr><tr><td align="center">5</td><td align="center">101</td><td align="center">r-x</td></tr><tr><td align="center">6</td><td align="center">110</td><td align="center">rw-</td></tr><tr><td align="center">7</td><td align="center">111</td><td align="center">rwx</td></tr></tbody></table><p>问题是touch默认的权限是644(即rw-r–r–),怎么来的呢？首先文件有个全权限为666,目录的全权限为777,666把umask值的1位减去即是644</p><h2 id="文件的属性"><a href="#文件的属性" class="headerlink" title="文件的属性"></a>文件的属性</h2><p>文件除了权限外,还有属性设置,也很有用</p><ul><li>chattr:为文件添加或删除属性<code>sudo chattr +i testfile</code>,<code>sudo chattr -i testfile</code></li><li>lsattr:查看文件的属性<code>sudo lsattr testfile</code></li></ul><p>可通过<code>man chattr</code>来查看可以设置哪些属性,下表列出常用属性</p><table><thead><tr><th align="center">字母</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">文件不能被删除、改名、设置链接、也无法写入或新增数据</td></tr><tr><td align="center">a</td><td align="center">只能增加数据,而不能删除也不能修改数据</td></tr></tbody></table><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>chmod [ugoa][+&#x3D;-][rwxst] 文件名表<br>也可以用八进制数字设置:<code>chmod xxx file</code>,对应关系见上表</p><h3 id="三个特殊权限"><a href="#三个特殊权限" class="headerlink" title="三个特殊权限:"></a>三个特殊权限:</h3><ul><li>setuid(SUID)–仅作用于可执行文件,<code>chmod u+s program</code> 当应用到一个可执行文件(s标志会出现在拥有者的x权限上)，它把有效用户 ID 从真正的用户（实际运行程序的用户）设置成程序所有者的 ID。这种操作通常会应用到 一些由超级用户所拥有的程序。当一个普通用户运行一个程序，这个程序由根用户(root) 所有，并且设置了 setuid 位，这个程序运行时具有超级用户的特权，这样程序就可以 访问普通用户禁止访问的文件和目录。<br>b.setgid(SGID)–作用于可执行文件和目录(s标志会出现在组的x权限上) ,<code>chmod g+s dir</code> 把有效用户组 ID 从真正的用户组ID更改为文件所有者的组ID。如果设置了一个目录的 setgid 位，则目录中新创建的文件 具有这个目录用户组的所有权，而不是文件创建者所属用户组的所有权。对于共享目录来说， 当一个普通用户组中的成员，需要访问共享目录中的所有文件，而不管文件所有者的主用户组时， 那么设置 setgid 位很有用处。<br>c.sticky位(SBIT)–仅作用于目录(t标志会出现在其他的x权限上)<code>chmod o+t dir</code>,如果一个目录设置了sticky位，那么它能阻止用户删除或重命名文件,除非用户是这个目录的所有者,或者是文件所有者,或是超级用户。这个经常用来控制访问共享目录,比方说&#x2F;tmp。<br>这3种权限也可以用另一套八进制来表示<code>chmod xxxx file</code>第一个数字是设置特殊权限的,这与umask的第一位<strong>含义不同</strong></li></ul><table><thead><tr><th align="center">Oct</th><th align="center">Bin</th><th align="center">File Mode</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">000</td><td align="center">所有特殊位为0</td></tr><tr><td align="center">1</td><td align="center">001</td><td align="center">sticky置位</td></tr><tr><td align="center">2</td><td align="center">010</td><td align="center">SGID置位</td></tr><tr><td align="center">3</td><td align="center">011</td><td align="center">SGID和sticky置位</td></tr><tr><td align="center">4</td><td align="center">100</td><td align="center">SUID置位</td></tr><tr><td align="center">5</td><td align="center">101</td><td align="center">SUID和sticky置位</td></tr><tr><td align="center">6</td><td align="center">110</td><td align="center">SUID和SGID置位</td></tr><tr><td align="center">7</td><td align="center">111</td><td align="center">所有位都置位</td></tr></tbody></table><h3 id="可执行权限上的’S-T’-还有X有待研究"><a href="#可执行权限上的’S-T’-还有X有待研究" class="headerlink" title="可执行权限上的’S&#x2F;T’(还有X有待研究)"></a>可执行权限上的’S&#x2F;T’(还有X有待研究)</h3><p>没有执行权限的 UID&#x2F;GID 和黏置位。小写的 s 与 t 都是取代 x 这个权限的，但是当下达 7666 权限时，也就是说,user,group 以及 others 都没有 x 这个可执行的标志时(因为是 666)，特殊权限位也不可能有权限执行，7666 的结果为-rwSrwSrwT。所以，这个 S, T 代表的就是“空的”执行权限，不具有执行权限。换个说法， SUID +s 是表示“该文件在执行的时候，具有文件拥有者的权限”，但是文件拥有者都无法执行时，也就不存在权限给其他人使用了。</p><h2 id="chown和chgrp"><a href="#chown和chgrp" class="headerlink" title="chown和chgrp"></a>chown和chgrp</h2><p>这两个命令除了root外,只有修改用户处于原用户组和新用户组才能修改</p><ul><li><code>chown username.groupname filename</code>改变文件的用户和用户组,用户组名可选,当省略username,并在groupname前面加个<code>.</code>,则只改变用户组名,当省略groupname,在username后面加个<code>.</code>,则改变用户并把用户组改成与用户名同名的用户组<ul><li>-R:递归目录</li><li>-h:该文件的所有链接文件也被改变所属关系</li></ul></li><li><code>chgrp groupname filename</code>更改用户组</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell基本概念</title>
    <link href="/2021/10/15/shell%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2021/10/15/shell%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释: #</li><li>多行注释:  <code>:&lt;&lt;EOF ... EOF</code>或者 <code>:&lt;&lt;! ... !</code></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>创建普通变量: <strong>name&#x3D;”test”</strong> (&#x3D;两边不可有空格)</li><li>创建函数体中的局部变量: ** local name&#x3D;”test”**,函数体及整个脚本中的变量默认都是全局变量,函数体内外皆可访问和改变,函数体内的变量最好用这个加以限制,同时为了得到命令替换的返回码时最好分开写(否则只会捕获local的成功码)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">local</span> varname<br>varname=$(<span class="hljs-built_in">command</span>)<br>re=$?<br></code></pre></td></tr></table></figure></li><li>使用变量: <strong>echo $name 或者 echo $(name)</strong> 使用时要加$,重新赋值时不需要</li><li>只读变量: <strong>name&#x3D;”only_read” -&gt; readonly name</strong></li><li>删除变量: <strong>unset name</strong></li></ul><h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><p>字符串与变量展开有密切联系,可以参考那节</p><ol><li>单引号</li></ol><ul><li>单引号变量var&#x3D;’test’,只能原样输出,不能解释变量</li><li>单引号中不能出现一个单引号,转义也不行</li></ul><ol start="2"><li>双引号</li></ol><ul><li>双引号变量<code>var=&quot;my name is $&#123;name&#125;&quot;</code>,可以解释变量</li><li>可以出现转移字符</li></ul><ol start="3"><li>拼接字符串</li></ol><ul><li><code>name=&quot;this is&quot;&quot;my name&quot;;name=&quot;this is my name&quot;;name=&quot;this&quot;is&quot;my name&quot;</code>等效</li></ul><ol start="4"><li><p>获取字符串长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#str&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>提取子字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=<span class="hljs-string">&quot;this is my name&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;name:1:4&#125;</span> <span class="hljs-comment">#输出his</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;name::4&#125;</span> <span class="hljs-comment">#输出this</span><br></code></pre></td></tr></table></figure></li><li><p>大小写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">declare</span> -u upper<br><span class="hljs-built_in">declare</span> -l lower<br><span class="hljs-comment">#upper将会强制转成SL</span><br>upper=<span class="hljs-string">&quot;sl&quot;</span><br><span class="hljs-comment">#lower将会强制转成sl</span><br>lower=<span class="hljs-string">&quot;SL&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>bash只支持以为数组,不支持多维数组</p><ul><li>定义数组: <strong>array_name&#x3D;(li wang xiang zhang)</strong> (小括号做边界、使用空格分离)或者<strong>declare -a array_name</strong></li><li>单独定义数组的元素: <strong>arraypara[0]&#x3D;”w”;arraypara[3]&#x3D;”s”</strong> (定义时下标可以不连续,同样可以用于赋值)</li><li>获取数组元素<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">array_name[0]=<span class="hljs-string">&quot;li&quot;</span><br>array_name[3]=<span class="hljs-string">&quot;zhang&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[0]&#125;</span> <span class="hljs-comment">#输出&quot;li&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[1]&#125;</span> <span class="hljs-comment">#输出空</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[@]&#125;</span> <span class="hljs-comment">#输出&quot;li zhang&quot;输出数组所有元素,没有元素的下标省略</span><br><span class="hljs-comment">#等价于下面</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[*]&#125;</span><br></code></pre></td></tr></table></figure></li><li>取得元素个数:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;#arrayname[@]&#125;</span><br><span class="hljs-comment">#或者</span><br><span class="hljs-variable">$&#123;#arrayname[\*]&#125;</span><br></code></pre></td></tr></table></figure></li><li>取得单个元素长度: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;#array_name[1]&#125;</span><br></code></pre></td></tr></table></figure></li><li><code>for i in &quot;$&#123;!foo[@]&#125;&quot;</code>取得每个非空元素的下标</li><li><code>foo+=(d e f)</code>添加3个元素</li><li>删除数组不能通过赋空值,只能通过unset,unset还能删除某个元素(这样后面元素往前补)</li><li>没有指明数组下标的访问或赋值皆指向第一个值</li><li>最新版本bash支持关联数组<code>declare -A colors;colors[&quot;red&quot;]=&quot;red&quot;</code></li><li><a href="#funAndArr">函数与数组</a></li><li>取切片<code>echo $&#123;array:0:3&#125;</code></li><li>遍历数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#方法1</span><br><span class="hljs-keyword">for</span>(( i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-variable">$&#123;#array[@]&#125;</span>;i++)) <span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array[i]&#125;</span>;<br><span class="hljs-keyword">done</span>;<br><span class="hljs-comment">#方法2</span><br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;array[@]&#125;</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$element</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#方法3</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;!arr[@]&#125;</span>&quot;</span>;<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\t%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arr[$i]&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>添加数组元素<br><code>$arr+=(a b)</code></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="FUNCNAME"><a href="#FUNCNAME" class="headerlink" title="FUNCNAME"></a>FUNCNAME</h4><p>该环境变量是个数组，存储当前位置函数调用的堆栈，当只有主程序时，个数为0,当存在调用函数时，第一个总是当前函数名，最后一个为main表示主程序</p><h4 id="BASH-SOURCE"><a href="#BASH-SOURCE" class="headerlink" title="BASH_SOURCE"></a>BASH_SOURCE</h4><p>是一个数组，不过它的第一个元素是当前脚本名称，然后是source它的脚本，依次类推，常用如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果脚本是被source的话</span><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$BASH_SOURCE</span>&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$BASH_SOURCE</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    do_something<br><span class="hljs-keyword">else</span> <span class="hljs-comment"># Otherwise, run directly in the shell</span><br>    do_other<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="参数传递的相关特殊变量"><a href="#参数传递的相关特殊变量" class="headerlink" title="参数传递的相关特殊变量"></a>参数传递的相关特殊变量</h3><table><thead><tr><th align="center">变量</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>$0</code></td><td align="center">代表执行的文件名</td></tr><tr><td align="center"><code>$n</code></td><td align="center">代表传入的第n个参数</td></tr><tr><td align="center"><code>$#</code></td><td align="center">参数个数,不包括程序名本身</td></tr><tr><td align="center"><code>$</code></td><td align="center">以一个单字符串显示所有向脚本传递的参数。即为”$1 $2…$n”</td></tr><tr><td align="center"><code>$@</code></td><td align="center">展开成一个从 1 开始的位置参数列表。当它被用双引号引 起来的时候，展开成一个由双引号引起来的字符串，包含了 所有的位置参数，每个位置参数由 shell 变量 IFS 的第一个 字符（默认为一个空格）分隔开。</td></tr><tr><td align="center"><code>$*</code></td><td align="center">把所有参数当成一个大字符串</td></tr><tr><td align="center"><code>$$</code></td><td align="center">该脚本进程ID</td></tr><tr><td align="center"><code>$!</code></td><td align="center">后台运行的最后一个进程ID</td></tr><tr><td align="center"><code>$?</code></td><td align="center">上个调用(最后命令)返回值,0表示没有错误</td></tr></tbody></table><p>有个<strong>shift</strong>命令可以方便处理命令行参数,每次执行该命令的时候,变量$2会移动到$1,变量$3会移动到变量$2,以此类推,$#值也会减1。例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">count=1<br><span class="hljs-keyword">while</span> [[ <span class="hljs-variable">$#</span> -gt 0 ]];<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Argument <span class="hljs-variable">$count</span> = <span class="hljs-variable">$1</span>&quot;</span><br>count=$((count + <span class="hljs-number">1</span>))<br><span class="hljs-built_in">shift</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><a href="#jumpopt">getopt和getopts两个命令经常被用来处理传递的参数</a></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let使数字运算更方便:<code>let a++</code>,<code>let a+=2</code></p><h4 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h4><ul><li><code>+ - * /</code></li><li>加法运算<ul><li><code>bash val=$(expr 2 + 2)</code> 这么写乘号要加转义,空格也是必须</li><li><code>val=$[2+2]</code> (4个空格不是必要的,不同于条件判断)</li><li><code>val=$((2+2))</code>(4个空格不是必要的)</li></ul></li></ul><p>bash支持任意进制</p><table><thead><tr><th align="center">表示法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">默认10进制</td></tr><tr><td align="center">0number</td><td align="center">8进制</td></tr><tr><td align="center">0xnumber</td><td align="center">16进制</td></tr><tr><td align="center">base#number</td><td align="center">base进制</td></tr></tbody></table><p>在双括号中会被解释成数字,否则默认为字符串</p><h4 id="数字关系运算符"><a href="#数字关系运算符" class="headerlink" title="数字关系运算符"></a>数字关系运算符</h4><p>关系运算符只支持数字,不支持字符串,除非字符串是数字</p><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>-eq</code></td><td align="center">相等返回true,<code>[$a -eq $b]</code></td></tr><tr><td align="center"><code>-ne</code></td><td align="center">不相等返回true,<code>[$a -ne $b]</code></td></tr><tr><td align="center"><code>-gt</code></td><td align="center">大于号</td></tr><tr><td align="center"><code>-lt</code></td><td align="center">小于号</td></tr><tr><td align="center"><code>-ge</code></td><td align="center">大于等于号</td></tr><tr><td align="center"><code>-le</code></td><td align="center">小于等于号</td></tr></tbody></table><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><strong>&#x3D;</strong></td><td align="center">相等返回true,<code>[$a = $b]</code></td></tr><tr><td align="center"><strong>!&#x3D;</strong></td><td align="center">不相等返回true,<code>[$a != $b]</code></td></tr><tr><td align="center"><strong>-z</strong></td><td align="center">字符串长度为0返回true,<code>[-z $b]</code></td></tr><tr><td align="center"><strong>-n</strong></td><td align="center">字符串长度不为0返回true,<code>[-n $b]</code></td></tr><tr><td align="center"><strong>$</strong></td><td align="center">不为空返回true,<code>[$a]</code></td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><strong>!</strong></td><td align="center">非运算,<code>[! false]</code></td></tr><tr><td align="center"><strong>&amp;&amp;</strong></td><td align="center">与运算,<code>[[ $a -lt 20 ]] &amp;&amp; [[$b -gt 100 ]]</code></td></tr><tr><td align="center">**</td><td align="center"></td></tr></tbody></table><p>逻辑判断的括号<br>1.<code>[]</code>:中括号旁边和运算符两边必须添加空格(可以使用，等价于test命令,本文不讲test命令,不推荐)<br>2.<code>[[]]</code>:中括号旁边和运算符两边必须添加空格(字符串验证,文件名时，推荐)<br>3.<code>(())</code>:中括号旁边和运算符两边必须添加空格(数字验证时，推荐)<br>4.<code>[[]]和(())</code>分别是针对数学表达式和字符串表达式的加强版<br>5.<code>[]</code>基本舍弃的原因，它与**&amp;&amp;、||、&lt;和&gt;**不兼容,会报错,它只能用-ne等等这些,例如下面是等价的<br><code>if [[ $a != 1 &amp;&amp; $a !=2 ]]</code>,<code>if [ $a -ne 1 ] &amp;&amp; [ $a != 2 ]</code>,<code>if [ $a -ne 1 -a $a !=2 ]</code><br>6.双括号支持以下额外的符号(没列全,C语言能用的都能用,包括?:)</p><table><thead><tr><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">val++</td><td align="center">后增</td></tr><tr><td align="center">val–</td><td align="center">后减</td></tr><tr><td align="center">++val</td><td align="center">前增</td></tr><tr><td align="center">–val</td><td align="center">前减</td></tr><tr><td align="center">!</td><td align="center">逻辑求反</td></tr><tr><td align="center">~</td><td align="center">位求反</td></tr><tr><td align="center">**</td><td align="center">幂运算</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左位移</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右位移</td></tr><tr><td align="center">&amp;</td><td align="center">布尔和</td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td></tr><tr><td align="center">&#96;</td><td align="center"></td></tr><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td></tr><tr><td align="center">&#x3D;~</td><td align="center">用于字符串的模式匹配,右边加上引号会丧失正则的含义，变成普通字符串,避免反斜杠转移，可以赋值给一个变量</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">用于字符串的类型匹配(通配符等),例子<code>if [[ $FILE == foo.* ]]</code></td></tr><tr><td align="center">&#x3D;</td><td align="center">用于字符串是否相同，右边一定要引号括起来，否则是模式匹配，如<code>*</code>则会永远为true</td></tr></tbody></table><h4 id="文件运算符"><a href="#文件运算符" class="headerlink" title="文件运算符"></a>文件运算符</h4><p>file是代表文件名的字符串</p><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">$file1 -ef $file2</td><td align="center">拥有相同的索引号返回True(硬连接)</td></tr><tr><td align="center">$file1 -nt $file2</td><td align="center">file1新于file2返回true</td></tr><tr><td align="center">$file1 -ot $file2</td><td align="center">file1早于file2返回true</td></tr><tr><td align="center"><code>[-b $file]</code></td><td align="center">是块设备文件返回true</td></tr><tr><td align="center"><code>[-c $file]</code></td><td align="center">是字符备文件返回true</td></tr><tr><td align="center"><code>[-d $file]</code></td><td align="center">是目录返回true</td></tr><tr><td align="center"><code>[-f $file]</code></td><td align="center">是普通文件返回true</td></tr><tr><td align="center"><code>[-g $file]</code></td><td align="center">设置了SGID位文件返回true</td></tr><tr><td align="center"><code>[-h $file]</code></td><td align="center">是符号链接返回true</td></tr><tr><td align="center"><code>[-G $file]</code></td><td align="center">由有效组(即当前进程用户组)ID拥有返回true</td></tr><tr><td align="center"><code>[-L $file]</code></td><td align="center">是符号链接返回true</td></tr><tr><td align="center"><code>[-k $file]</code></td><td align="center">设置了stick位文件返回true</td></tr><tr><td align="center"><code>[-N $file]</code></td><td align="center">atime和mtime一样的文件</td></tr><tr><td align="center"><code>[-p $file]</code></td><td align="center">是有名管道文件返回true</td></tr><tr><td align="center"><code>[-u $file]</code></td><td align="center">设置了SUID位文件返回true</td></tr><tr><td align="center"><code>[-O $file]</code></td><td align="center">由有效用户(即当前进程用户)件D拥有返回true</td></tr><tr><td align="center"><code>[-r $file]</code></td><td align="center">是可读文件返回true</td></tr><tr><td align="center"><code>[-w $file]</code></td><td align="center">是可写文件返回true</td></tr><tr><td align="center"><code>[-x $file]</code></td><td align="center">是可执行文件返回true</td></tr><tr><td align="center"><code>[-s $file]</code></td><td align="center">非空文件返回true</td></tr><tr><td align="center"><code>[-S $file]</code></td><td align="center">是一个网络Socket返回true</td></tr><tr><td align="center"><code>[-e $file]</code></td><td align="center">文件存在返回true</td></tr><tr><td align="center"><code>[-t $fd]</code></td><td align="center">fd是一个定向到终端&#x2F;从终端定向的文件描述符。这可以被用来判断是否重定向了标准输入&#x2F;错误</td></tr></tbody></table><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><strong>echo</strong>只用于字符串,自动添加换行符号<code>echo nanbert male 66.1234</code><br><strong>printf</strong>不自动加换行符号,例:<code>printf &quot;%-10s %-8s %-4.2f\n&quot; nanbert male 66.1234</code></p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#then后必须有语句,空语句可以用:</span><br><span class="hljs-keyword">if</span> condition<br><span class="hljs-keyword">then</span> <br>command1<br>...<br><span class="hljs-keyword">elif</span> condition<br><span class="hljs-keyword">then</span><br>command2<br>...<br><span class="hljs-keyword">else</span><br>command3<br>...<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> item1 item2 ... itemN<br><span class="hljs-keyword">do</span> <br>command1<br>...<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#等价于c语言</span><br><span class="hljs-keyword">for</span> (( expression1;expression2; expression3 ));<span class="hljs-keyword">do</span><br>commands<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>如果省略in，默认处理位置参数</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> condition<br><span class="hljs-keyword">do</span> <br>command1<br>...<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#无限循环</span><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">until</span> condition<br><span class="hljs-keyword">do</span> <br>command1<br>...<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>Shell case匹配一个值与一个模式,用两个分号表示break</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> value <span class="hljs-keyword">in</span><br>pattern1)<br>command1<br>...<br>commandN<br>;;<br>pattern2)<br>command1<br>...<br>commandN<br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>循环都支持<strong>continue</strong>和<strong>break</strong>,<code>break n</code>则可以指定跳出n层循环,n默认为1<br>,continue也支持数字。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><ul><li>函数定义<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">fun</span></span>()&#123;<br>action;<br>[<span class="hljs-built_in">return</span> int;]<br>&#125;<br><span class="hljs-comment">#等价于下面</span><br><span class="hljs-function"><span class="hljs-title">fun1</span></span>()&#123;<br>action;<br>[<span class="hljs-built_in">return</span> int;]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>参数传递<br>函数中直接使用特殊变量来获取参数,可以加上{}<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">funWithParam</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为 <span class="hljs-variable">$1</span> !&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个参数为 <span class="hljs-variable">$2</span> !&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十个参数为 <span class="hljs-variable">$10</span> !&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十个参数为 <span class="hljs-variable">$&#123;10&#125;</span> !&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十一个参数为 <span class="hljs-variable">$&#123;11&#125;</span> !&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;参数总数有 <span class="hljs-variable">$#</span> 个!&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;作为一个字符串输出所有参数 $* !&quot;</span>&#125;<br>funWithParam 1 2 3 4 5 6 7 8 9 34 73<br><span class="hljs-built_in">echo</span> $?  <span class="hljs-comment"># 判断执行是否成功</span><br></code></pre></td></tr></table></figure></li><li>函数返回值<ul><li>返回值是可选的</li><li>return只能为<strong>return [0-255]</strong>,可通过$?获取该值</li><li>如果不加return,则最后一条语句的执行状态为返回值,0为成功</li><li>如果用反引号执行函数,结果是函数内的所有输出而非返回值</li></ul></li><li><a href="#funAndArr">函数与数组</a></li></ul><ul><li>函数本质上是一组命令集合,不一定用大括号括起来,更多见shell例子</li><li>可以使用<code>declare -F | sed &#39;s/declare -f//&#39;</code>来查看当前脚本定义的函数</li></ul><h3 id="读取外部输入"><a href="#读取外部输入" class="headerlink" title="读取外部输入"></a>读取外部输入</h3><p><code>read arg</code>从键盘读取输入并赋值给arg</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-a array</td><td align="center">把输入赋值到数组array中</td></tr><tr><td align="center">-d delimiter</td><td align="center">用字符串delimiter中的第一个字符指示输入结束,而不是一个换行符</td></tr><tr><td align="center">-e</td><td align="center">使用readline来处理输入</td></tr><tr><td align="center">-n num</td><td align="center">读取num个输入字符,而不是整行</td></tr><tr><td align="center">-p prompt</td><td align="center">为输入显示提示信息,使用字符串prompt</td></tr><tr><td align="center">-r</td><td align="center">Raw mode,不把反斜杠解释为转义字符</td></tr><tr><td align="center">-s</td><td align="center">Silent mode,不会在屏幕上显示输入的字符。输入密码的时候很有用</td></tr><tr><td align="center">-t seconds</td><td align="center">超过时间，终止输入,read会非0状态退出</td></tr><tr><td align="center">-u fd</td><td align="center">使用文件描述符fd中的输入,而不是标准输入</td></tr><tr><td align="center">-k n</td><td align="center">只读n个字节</td></tr></tbody></table><p>IFS是字段分割符,默认为空格,tab,换行符。可以自行改变。如下:<br><code>IFS=:</code>改成冒号<br><code>IFS=$&#39;\n&#39;:;&quot;</code>改成换行符、冒号、分号和双引号<br>read不应该使用管道线来接受赋值，如下是错误的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file_info</span>&quot;</span> | IFS=<span class="hljs-string">&quot;:&quot;</span> <span class="hljs-built_in">read</span> user pw uid gid name home shell<br></code></pre></td></tr></table></figure><p>而应该这么写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">IFS=<span class="hljs-string">&quot;:&quot;</span> <span class="hljs-built_in">read</span> user pw uid gid name home shell &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-variable">$file_info</span>&quot;</span><br></code></pre></td></tr></table></figure><p>这是因为管道线会开个子进程,子进程变量的变化不会影响父进程,可以用<a href="#jump">进程替换</a>解决<br>如果输入的数多余接受的变量,则多出来的会保存在变量REPLY中</p><h3 id="包含其他shell文件"><a href="#包含其他shell文件" class="headerlink" title="包含其他shell文件"></a>包含其他shell文件</h3><ul><li><code>. filepath/filename</code></li><li><code>source filepath/filename</code></li></ul><h3 id="颜色标识"><a href="#颜色标识" class="headerlink" title="颜色标识"></a>颜色标识</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span>  <span class="hljs-string">&quot;\033[32m SUCCESS: yay \033[0m\n&quot;</span>;<br><span class="hljs-built_in">printf</span>  <span class="hljs-string">&quot;\033[33m WARNING: hmm \033[0m\n&quot;</span>;<br><span class="hljs-built_in">printf</span>  <span class="hljs-string">&quot;\033[31m ERROR: fubar \033[0m\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>具体内容有待研究</p><h3 id="长句换行"><a href="#长句换行" class="headerlink" title="长句换行"></a>长句换行</h3><p>在shell中为避免一个语句过长,可以使用”&quot;进行换行,注意”&quot;前加一个空格,之后无空格直接换行。</p><h3 id="退出脚本"><a href="#退出脚本" class="headerlink" title="退出脚本"></a>退出脚本</h3><p><code>exit [num]</code>num为0表示执行成功,可以不加num<br><code>set -e 或 set +e</code>set -e表示从当前位置开始,如果出现任何错误都将触发exit。相反,set +e表示不管出现任何错误继续执行脚本</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>-n表示检查有无语法错误,-x表示调试</p><h3 id="变量展开"><a href="#变量展开" class="headerlink" title="变量展开"></a>变量展开</h3><table><thead><tr><th align="center">操作符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>:$&#123;parameter:=word&#125;</code></td><td align="center">如果parameter没有设置或者为空,展开的结果是word的值,并且word的值会赋给parameter;否则展开为parameter的值</td></tr><tr><td align="center"><code>$&#123;parameter:-word&#125;</code></td><td align="center">如果parameter没有设置或者为空,展开的结果是word的值,否则是parameter的值</td></tr><tr><td align="center"><code>$&#123;parameter:?word&#125;</code></td><td align="center">如果parameter没有设置或者为空,会带有错误的推出,否则是parameter的值</td></tr><tr><td align="center"><code>$&#123;parameter:+word&#125;</code></td><td align="center">如果parameter没有设置或者为空,展开为空,否则是word的值;不管如何parameter值不会变</td></tr><tr><td align="center"><code>$&#123;parameter#pattern&#125;</code></td><td align="center">pattern是通配符模式,会从parameter开头开始最短匹配pattern,删除匹配中的部分,留下剩余部分,注意是开头不是从左到右第一次的意思,即第一个字符一定要匹配上</td></tr><tr><td align="center"><code>$&#123;parameter##pattern&#125;</code></td><td align="center">pattern是通配符模式,会从parameter开头开始最长匹配pattern,删除匹配中的部分,留下剩余部分,注意是开头不是从左到右第一次的意思,即第一个字符一定要匹配上</td></tr><tr><td align="center"><code>$&#123;parameter%pattern&#125;</code></td><td align="center">pattern是通配符模式,会从parameter结尾开始最短匹配pattern,删除匹配中的部分,留下剩余部分,注意是结尾不是从右到左第一次的意思,即最后一个字符一定要匹配上</td></tr><tr><td align="center"><code>$&#123;parameter%%pattern&#125;</code></td><td align="center">pattern是通配符模式,会从parameter结尾开始最长匹配pattern,删除匹配中的部分,留下剩余部分,注意是结尾不是从右到左第一次的意思,即最后一个字符一定要匹配上</td></tr><tr><td align="center"><code>$&#123;parameter/pattern/string&#125;</code></td><td align="center">在parameter中找到匹配通配符pattern的文本,用string替换,只替换第一次匹配到的</td></tr><tr><td align="center"><code>$&#123;parameter//pattern/string&#125;</code></td><td align="center">在parameter中找到匹配通配符pattern的文本,用string替换,替换所有匹配到的</td></tr><tr><td align="center"><code>$&#123;parameter/#pattern/string&#125;</code></td><td align="center">在parameter中找到匹配通配符pattern的文本,用string替换,只能从parameter开头开始匹配,注意是开头不是从左到右第一次的意思,即第一个字符一定要匹配上</td></tr><tr><td align="center"><code>$&#123;parameter/%pattern/string&#125;</code></td><td align="center">在parameter中找到匹配通配符pattern的文本,用string替换,只能从parameter结尾开始匹配,注意是结尾不是从右到左第一次的意思,即最后一个字符一定要匹配上</td></tr><tr><td align="center"><code>$&#123;parameter,,&#125;</code></td><td align="center">把parameter全部展开成小写字母</td></tr><tr><td align="center"><code>$&#123;parameter,&#125;</code></td><td align="center">把parameter首字母展开成小写字母</td></tr><tr><td align="center"><code>$&#123;parameter^^&#125;</code></td><td align="center">把parameter全部展开成大写字母</td></tr><tr><td align="center"><code>$&#123;parameter^&#125;</code></td><td align="center">把parameter首字母展开成大写字母</td></tr></tbody></table><p><code>$&#123;!prefix*&#125;</code>等价于<code>$&#123;!prefix@&#125;</code>这种展开会返回以prefix开头的已有变量名(而不是变量的值)<br>字符串的长度和切片其实也是一种展开</p><p><span id = "jump"></span></p><h3 id="进程替换"><a href="#进程替换" class="headerlink" title="进程替换"></a>进程替换</h3><p>进程替换可以用来解决子进程问题,它实质是把子进程的输出当作一个用于重定向的普通文件(文件描述符)。<br>标准输出<br><code>&lt;(cmd1;cmd2)</code><br>标准输入<br><code>&gt;(cmd1;cmd2)</code><br>由此可以解决read管道线的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> attr links owner group size <span class="hljs-built_in">date</span> time filename;<span class="hljs-keyword">do</span><br><span class="hljs-built_in">cat</span> &lt;&lt;- <span class="hljs-string">EOF</span><br><span class="hljs-string">Filename: $filename</span><br><span class="hljs-string">Size:     $size</span><br><span class="hljs-string">Owner:    $owner</span><br><span class="hljs-string">Group:    $group</span><br><span class="hljs-string">Modified: $date $time</span><br><span class="hljs-string">Links:    $links</span><br><span class="hljs-string">Attributes: $attr</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">done</span> &lt; &lt;(<span class="hljs-built_in">ls</span> -l | <span class="hljs-built_in">tail</span> -n +2)<br></code></pre></td></tr></table></figure><p><span id = "jumpopt"></span></p><h3 id="getopt和getopts"><a href="#getopt和getopts" class="headerlink" title="getopt和getopts"></a>getopt和getopts</h3><h4 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h4><p>格式:<code>getopt [options] optstring parameters</code>,例:<br><code>getopt ab:cd -a -b test1 -cd test2 test3</code>该命令会产生如下输出:<br><code>-a -b test1 -c -d -- test2 test3</code>,optstring定义了四个有效项字母:a、b、c和d。冒号(:)表示b选项需要个参数值,它会将-cd选项分成两个单独选项,插入’–’来分隔额外的参数,如果提供’-cde’由于e不在optstring中,会报错<strong>getopt: invalid option – e</strong>,但还会输出结果,可以加-q选项忽略报错结果。<br>在脚本中经常与set的’–’选项来使用,来把getopt的输出转成当前脚本的输入参数,示例如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># Extract command line options &amp; values with getopt</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">set</span> -- $(getopt -q ab:<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-keyword">while</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>    -a) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -a option&quot;</span> ;;<br>    -b) param=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -b option, with parameter value <span class="hljs-variable">$param</span>&quot;</span><br>        <span class="hljs-built_in">shift</span> ;;<br>    -c) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -c option&quot;</span> ;;<br>    --) <span class="hljs-built_in">shift</span><br>        <span class="hljs-built_in">break</span> ;;<br>    *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> is not an option&quot;</span>;;<br>    <span class="hljs-keyword">esac</span><br>    <span class="hljs-built_in">shift</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#</span><br>count=1<br><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Parameter #<span class="hljs-variable">$count</span>: <span class="hljs-variable">$param</span>&quot;</span><br>    count=$[ <span class="hljs-variable">$count</span> + 1 ]<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h4 id="getopts"><a href="#getopts" class="headerlink" title="getopts"></a>getopts</h4><p>格式:<code>getopts optstring variable</code>,这里variable为命令行上检测到的第一个参数(getopts会去除’-‘,这点与getopt不同),处理完所有参数后,它会返回一个大于0的退出状态码。可以用”:optstring”格式来忽略未识别选项的错误信息。会用到两个环境变量,如果选项用到一个参数值,OPTARG会保存该值,OPTIND环境变量保存了参数列表中getopts正在处理的参数位置。<br>getopts可以识别双引号内的带括号参数值,而getopt不可以。getopts将命令行上找到的所有未定义选项统一输成问号,getopt遇到未识别的非选项值时,会结束识别,即使后面有正确的选项。可以用以下脚本自行测试getopts的行为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> :ab:<span class="hljs-built_in">cd</span> opt<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$opt</span>&quot;</span> <span class="hljs-keyword">in</span><br>        a) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -a option&quot;</span>  ;;<br>        b) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -b option, with value <span class="hljs-variable">$OPTARG</span>&quot;</span> ;;<br>        c) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -c option&quot;</span>  ;;<br>        d) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Found the -d option&quot;</span>  ;;<br>        *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unknown option: <span class="hljs-variable">$opt</span>&quot;</span> ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">shift</span> $[ <span class="hljs-variable">$OPTIND</span> - 1 ]<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">echo</span><br>count=1<br><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Parameter <span class="hljs-variable">$count</span>: <span class="hljs-variable">$param</span>&quot;</span><br>    count=$[ <span class="hljs-variable">$count</span> + 1 ]<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h3><p>set 指令可根据不同的需求来设置当前所使用 shell 的执行方式，同时也可以用来设置或显示 shell 变量的值。当指定某个单一的选项时将设置 shell 的常用特性，如果在选项后使用 -o 参数将打开特殊特性，若是 +o 将关闭相应的特殊特性。而不带任何参数的 set 指令将显示当前 shell 中的全部变量，且总是返回 true，除非遇到非法的选项。可以使用<code>echo $-</code>查看当前设置,默认是（himxBH）<br>参数说明：</p><p>|参数|说明|<br>|:-:||:-:|<br>|-a|标示已修改的变量，以供输出至环境变量|<br>|-b|使被中止的后台程序立刻回报执行状态|<br>|-B|启用大括号展开|<br>|-d|Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消|<br>|-e|若指令传回值不等于0，则立即退出shell|<br>|-f|取消使用通配符|<br>|-h|自动缓存命令的所在位置,如果在PATH指定路径内，更换命令的位置,缓存就不会同步，就会发生错误，不过谁会换命令的位置呢,可以使用which更新缓存|<br>|-i|设置当前选项为交互式|<br>|-k|指令所给的参数都会被视为此指令的环境变量|<br>|-l|记录for循环的变量名称|<br>|-m|使用监视模式,可以控制进程的停止、继续、后台前台等，默认打开|<br>|-n|测试模式，只读取指令，而不实际执行|<br>|-p|启动优先顺序模式|<br>|-P|启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接|<br>|-t|执行完随后的指令，即退出shell|<br>|-u|当执行时使用到未定义过的变量，则显示错误信息|<br>|-v|显示shell所读取的输入值|<br>|-H shell|可利用”!”加&lt;指令编号&gt;的方式来执行 history 中记录的指令,最好不用|<br>|-x|执行指令后，会先显示该指令及所下的参数|<br>|+&lt;参数&gt;|取消某个set曾启动的参数。与-&lt;参数&gt;相反|<br>|-o [option]|特殊属性有很多,见下面|</p><p><strong>option属性</strong></p><ul><li>pipefail:管道流水线中有一个失败，则返回失败值，从右往左数起(默认只返回最后一个命令的退出码)</li><li>noclobber:防止&gt;重定向操作符覆盖已有内容，你可以使用<code>command &gt;| file</code>强制覆盖</li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>波浪号展开只能<strong>紧跟</strong>在<code>=</code>和<code>:</code>之后才能正确展开,引号中无法正确展开</li><li>**&lt;&lt;<strong>和</strong>&lt;&lt;-**的区别在于,&lt;&lt;-会忽略接下来输入的tab建,一般用于格式化脚本,便于读代码</li><li>组命令(在当前shell执行)–<code>&#123; command1;command2;command3  &#125;</code>,子shell–<code>(command1;command2;command3)</code>一般配合管道符</li><li>trap命令<br><code>trap &quot;命令&quot; &quot;信号&quot;</code>当脚本遇到信号前执行的命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;echo I am ignoring you&quot;</span> SIGINT SIGTERM<br></code></pre></td></tr></table></figure>常见信号有:</li></ul><table><thead><tr><th align="center">编号</th><th align="center">英文名</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">SIGHUP</td><td align="center">挂起进程</td></tr><tr><td align="center">2</td><td align="center">SIGINT</td><td align="center">终止进程</td></tr><tr><td align="center">3</td><td align="center">SIGQUIT</td><td align="center">停止进程</td></tr><tr><td align="center">9</td><td align="center">SIGKILL</td><td align="center">无条件终止进程</td></tr><tr><td align="center">15</td><td align="center">SIGTERM</td><td align="center">尽可能终止进程</td></tr><tr><td align="center">17</td><td align="center">SIGSTOP</td><td align="center">无条件停止进程,但不是终止进程</td></tr><tr><td align="center">18</td><td align="center">IGTSTP</td><td align="center">停止或暂停进程,但不终止进程</td></tr><tr><td align="center">19</td><td align="center">SIGCONT</td><td align="center">继续运行停止的进程</td></tr></tbody></table><pre><code class="hljs">* tap除了捕获信号外,还会捕获脚本退出:`trap &quot;echo Goodbye...&quot; EXIT`,不管正常还是非正常,都会打印Goodbye* `trap -- SIGINT`取消某个信号的设置* `trap -`恢复信号的默认行为</code></pre><ul><li>wait命令<br><code>wait $pid</code>等待子进程<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#小火车子进程</span><br>sl &amp;<br>pid=$!<br><span class="hljs-comment">#父进程继续干事</span><br><span class="hljs-built_in">sleep</span> 2<br><span class="hljs-comment">#干完事等子进程</span><br><span class="hljs-built_in">wait</span> <span class="hljs-variable">$pid</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;子父进程都结束了&quot;</span><br></code></pre></td></tr></table></figure></li><li>命名管道<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建一个命名管道文件</span><br><span class="hljs-built_in">mkfifo</span> pipe1<br><span class="hljs-comment">#子进程写入(写入完会阻塞,等待另一端读,所以不要wait)</span><br><span class="hljs-built_in">ls</span> -l &gt; pipe1 &amp;<br><span class="hljs-comment">#父进程读</span><br><span class="hljs-built_in">sleep</span> 5<br><span class="hljs-built_in">cat</span>&lt;pipe1<br></code></pre></td></tr></table></figure></li></ul><ul><li>IFS默认是空白字符(回车，空格，制表符等)，位于字符串和结尾的空白字符都被删除，中间连续空格会被压缩成一个</li></ul><ul><li>子shell的全局环境变量改变并不会影响父shell,甚至用export也不行</li><li>命令替换<code>$(command)</code>,子shell<code>(command)</code>两个是不同概念,命令替换会开个子shell(貌似都会开子shell)</li><li>文件描述符与exec<ul><li>配合exec可以使标准输入输出永久重定向:<code>exec 2&gt;testerror</code>重定向标准错误至文件。</li><li>exec可以创建文件描述:<code>exec 3&gt;testxx;echo hello&gt;&amp;3</code>这可以用来恢复正常的输入输出,如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> 3&gt;&amp;1<br><span class="hljs-built_in">exec</span> 1&gt;test14out<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这会输入到test14out&quot;</span><br><span class="hljs-built_in">exec</span> 1&gt;&amp;3<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这会输入到屏幕&quot;</span><br></code></pre></td></tr></table></figure></li><li>exec创建读写描述符:<code>exec 3&lt;&gt;testfile</code>,这要特别小心,任何读或写都会从文件指针的上次位置开始</li><li>exec关闭文件描述符:<code>exec 3&gt;&amp;-</code></li><li>lsof命令可以查看已经打开的文件描述符,见Linux命令博客</li></ul></li></ul><p><span id = "funAndArr"></span></p><ul><li><p>函数与数组<br>将数组变量当作但个参数传递的话,它不会其作用,只会传递第一个值,可以借鉴以下例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># array variable to function test</span><br><span class="hljs-keyword">function</span> testit &#123;<br>    <span class="hljs-built_in">local</span> newarray<br>    newarray=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The new array value is: <span class="hljs-variable">$&#123;newarray[*]&#125;</span>&quot;</span><br>&#125;<br>myarray=(1 2 3 4 5)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The original array is <span class="hljs-variable">$&#123;myarray[*]&#125;</span>&quot;</span><br>testit <span class="hljs-variable">$&#123;myarray[*]&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>预处理替换优先级<br>a.shell替换:文件通配符<br>b.变量替换<br>c.命令替换,如下示例:  </p></li><li><p>shell元字符汇总</p></li></ul><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">空格、制表符</td><td align="center">命令行参数的分隔符</td></tr><tr><td align="center">回车</td><td align="center">执行键入的命令</td></tr><tr><td align="center">&lt; &gt; &brvbar;</td><td align="center">重定向与管道</td></tr><tr><td align="center">;</td><td align="center">多个命令分隔符</td></tr><tr><td align="center">&amp;</td><td align="center">后台运行</td></tr><tr><td align="center">$</td><td align="center">引用shell的变量</td></tr><tr><td align="center">`</td><td align="center">命令替换,<code>\\</code>代表反斜线自身,&#96;`&#96;代表反撇号自身</td></tr><tr><td align="center">* [] ?</td><td align="center">文件通配符,不匹配*和&#x2F;</td></tr><tr><td align="center">()</td><td align="center">用于定义shell函数或子shell中执行命令</td></tr><tr><td align="center">\</td><td align="center">转义字符取消元字符特殊含义，若不用于元字符跟不加一样</td></tr><tr><td align="center">“ “</td><td align="center">其中的内容除$和`外取消元字符的特殊含义</td></tr><tr><td align="center">‘ ‘</td><td align="center">取消所有元字符特殊含义</td></tr></tbody></table><ul><li>RANDOM是个内建的随机值</li><li><code>&lt;&lt;&lt;</code><br>here-string语法，允许直接传递字符串给标准输入</li><li>eval<br>eval 的功能是将字符串作为代码来执行。看上去好像很简单，但实际涉及很复杂的内容，主要是符号转义导致的语义问题。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">str1</span>=str2<br><span class="hljs-attribute">str2</span>=abc<br>eval echo \$<span class="hljs-variable">$str1</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/03/31/git/"/>
    <url>/2021/03/31/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git预设置-gitconfig"><a href="#git预设置-gitconfig" class="headerlink" title="git预设置(~&#x2F;.gitconfig)"></a>git预设置(~&#x2F;.gitconfig)</h1><ul><li><code>git config --global user.name &quot;xxx&quot;</code></li><li><code>git config --global user.email &quot;xx.com&quot;</code></li><li><code>git config --list</code>检查已有配置信息</li><li><code>git config --global core.editor vim</code>配置默认编辑器</li><li><code>git config --global alias.comi commit</code>命令的别名</li><li><code>git config --global credential.helper cache</code>设置无密码推送</li><li><code>git config --global alias.st &quot;status&quot;</code>设置status的别名为st</li><li><code>git config --global alias.st &quot;status&quot;</code>设置status的别名为st</li><li><code>git config --global --replace-all alias.lg  &quot;log --pretty=format:&#39;%C(auto) %h | %ai | %Cred %an %Cgreen %s&#39;&quot;</code>推荐设置log的别名</li></ul><h1 id="git-初始化"><a href="#git-初始化" class="headerlink" title="git 初始化"></a>git 初始化</h1><p><code>git init</code>初始化仓库，并建立.git子目录</p><h1 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h1><p><code>-s</code>:简单展现，A表示新添加到缓存区,左边M表示文件被修改并放入缓存区,右边M表示文件被修改并没有放入缓存区,??问号表示未被跟踪的文件</p><h1 id="git-add"><a href="#git-add" class="headerlink" title="git add &lt;files&gt;"></a><code>git add &lt;files&gt;</code></h1><p>跟踪文件并加入暂存区,可以通过<code>git ls-files --stage</code>来查看暂存区的文件</p><h1 id="git-diff显示更为详细的变化"><a href="#git-diff显示更为详细的变化" class="headerlink" title="git diff显示更为详细的变化"></a><code>git diff</code>显示更为详细的变化</h1><ul><li>默认比较工作目录与缓存区间的差异</li><li><code>--cached</code>比较缓存区与已提交的差异</li><li>HEAD查看所有改动</li><li>–stat:显示摘要</li></ul><h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h1><p>注释行里会有最后一次运行git status的输出</p><ul><li>-v:会将diff输出加入到注释行</li><li>-m:将提交信息与命令放在同一行</li><li>-a:可以将所有跟踪文件跳过add步骤直接commit</li><li>–amend:上次提交后发现忘了几个文件,可以add之后再加上此选项提交将会覆盖上次提交。</li></ul><h1 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm &lt;files&gt;"></a><code>git rm &lt;files&gt;</code></h1><ul><li>移除缓存区文件并且工作目录也一并移除</li><li>–cached:只删除缓存区,保留工作目录</li></ul><h1 id="git-mv移动文件"><a href="#git-mv移动文件" class="headerlink" title="git mv移动文件"></a><code>git mv</code>移动文件</h1><ul><li>等价于’mv file1 file2;git rm file1;git add README’</li></ul><h1 id="git-log显示提交记录-git-shortlog-显示简短的记录"><a href="#git-log显示提交记录-git-shortlog-显示简短的记录" class="headerlink" title="git log显示提交记录(git shortlog 显示简短的记录)"></a><code>git log</code>显示提交记录(git shortlog 显示简短的记录)</h1><ul><li><p>-p:显示每次提交的差异</p></li><li><p>-(n):显示最近n次提交</p></li><li><p>–since,–after:仅显示指定时间之后的提交</p></li><li><p>–until,–before:仅显示指定时间之前的提交</p></li><li><p>–author:仅显示指定作者相关的提交</p></li><li><p>–committer:仅显示指定提交者相关的提交</p></li><li><p>–grep:仅显示含指定关键字的提交</p></li><li><p>-S:仅显示添加或移除了某个关键字的提交</p></li><li><p>–stat:简略信息</p></li><li><p>–graph:显示ASCLL图形表示分支的合并历史</p></li><li><p>–relative-date:使用较短的相对时间显示</p></li><li><p>–abbrev-commit:仅显示SHA-1的前几个字符,而非所有的40个字符</p></li><li><p>–name-status:显示增删改的文件清单</p></li><li><p>–name-only:仅在提交信息后显示以修改的文件清单</p></li><li><p>–pretty&#x3D;format:”&lt;格式&gt;”:指定格式输出<br>&lt;格式&gt;有如下：</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%H</td><td align="center">提交对象(commit)的完整哈希字串</td></tr><tr><td align="center">%h</td><td align="center">提交对象的简短哈希字串</td></tr><tr><td align="center">%T</td><td align="center">树对象的完整哈希字串</td></tr><tr><td align="center">%t</td><td align="center">树对象的简短哈希字串</td></tr><tr><td align="center">%P</td><td align="center">父对象的完整哈希字串</td></tr><tr><td align="center">%p</td><td align="center">父对象的简短哈希字串</td></tr><tr><td align="center">%an</td><td align="center">作者的名字</td></tr><tr><td align="center">%ae</td><td align="center">作者的邮件</td></tr><tr><td align="center">%ad</td><td align="center">作者修订日期</td></tr><tr><td align="center">%ar</td><td align="center">作者修订日期,按多久以前的方式显示</td></tr><tr><td align="center">%cn</td><td align="center">提交者的名字</td></tr><tr><td align="center">%ce</td><td align="center">提交者的电子邮件</td></tr><tr><td align="center">%cd</td><td align="center">提交日期</td></tr><tr><td align="center">%cr</td><td align="center">提交日期,按多久以前的方式显示</td></tr><tr><td align="center">%s</td><td align="center">提交说明</td></tr></tbody></table></li></ul><h1 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h1><ul><li><code>git reset HEAD &lt;file&gt;</code>(适用已提交add):撤销某个暂存文件,即将add退回</li><li><code>git reset HEAD\~1</code>:回退到上一个版本</li><li><code>git reset --hard &lt;commit_id&gt;</code>注意此步骤会将commit_id后的commit删除,最好不用</li><li><code>git push origin HEAD --force</code>让服务器也回退到某版本(本地仓库已回退)</li><li><code>git revert HEAD</code>回退到HEAD上一个版本,但是树结构往下走，只不过与父节点相同</li><li><code>git checkout [file]</code>(未git add的情况下):撤销某个工作目录下文件的修改,恢复为版本库中一模一样的版本,危险的命令,你的修改将不会保存</li></ul><h1 id="git-remote远程仓库的使用"><a href="#git-remote远程仓库的使用" class="headerlink" title="git remote远程仓库的使用"></a><code>git remote</code>远程仓库的使用</h1><ul><li>-v:显示简写对应的url</li><li><code>show origin</code>:展示origin的具体信息</li><li><code>rename o1 o2</code>:重命名某个远程</li><li><code>rm xx</code>:移除某个远程</li><li><code>add xx</code>:增加某个远程</li><li><code>prune origin</code>:删除本地在远程服务器上不存在的分支</li></ul><h1 id="git-push"><a href="#git-push" class="headerlink" title="git push &lt;remote-name&gt; &lt;branch-name&gt;"></a><code>git push &lt;remote-name&gt; &lt;branch-name&gt;</code></h1><ul><li><code>--tags</code>:推送所有标签</li><li>使用git push &lt;远程主机名(origin)&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</li><li><code>git push --set-upstream &lt;remote_name&gt; &lt;branch_name&gt;</code>将远程分支作为当前分支的上游分支,–unset-upstream,则是删除这种关联</li></ul><h1 id="远程拉取"><a href="#远程拉取" class="headerlink" title="远程拉取"></a>远程拉取</h1><ul><li>git fetch:会抓取数据到本地数据库，但不会自动合并并修改当前工作</li><li>git clone:会自动将其添加为远程仓库并默认以’origin’缩写,并自动跟踪远程master</li><li>git pull:主区数据并自动尝试合并到当前所在分支</li></ul><h1 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h1><ul><li>-a:增加个标签,可以在后面加个校验和,为指定的补打标签</li><li>-m:在命令行增加说明</li><li>-d:删除某个标签</li><li>-l:列举标签</li><li><tag_name> <commit_id>:为某个哈希打标签,必须显示地推送标签至远程库’git push origin v1.5’,当某个标签被删除或信息改变’git push origin  :refs&#x2F;tags&#x2F;<tag_name>‘</li><li><code>git branch &lt;new-branch-name&gt; &lt;tag-name&gt;</code>从指定的标签拉取一个分支出来</li><li><code>git show &lt;tag_name&gt;</code>查看tag信息</li></ul><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li><code>git clone -b &lt;分支名&gt; &lt;仓库地址&gt;</code>克隆指定分支</li><li><code>git fetch origin &lt;branch_name&gt;</code>抓取某个远程分支</li><li><code>git branch xxx</code>创建分支,不加任何xxx会显示所有分支</li><li><code>git log --oneline --decorate</code>查看各个分支当前所指对象</li><li><code>git checkout xxx</code>切换分支,切换分支会改变工作目录里的文件</li><li><code>git log --oneline --decorate --graph --all</code>查看分叉历史</li><li><code>git merge xxbranch</code>合并指定分支到当前分支,如果当前分支可以沿着一条线走下去则会有’fast-forward提示’</li><li><code>git merge --abort</code>取消当前合并,重建合并前状态</li><li><code>git merge --no-commit xxbranch</code>合并到本地文件,之后需要手动commit,xxbranch仍是新节点的父节点</li><li><code>git merge --squash xxbranch</code>生成本地diff,patch,手动提交后,与xxbranch不构成父子节点</li><li><code>git checkout -b serverfix origin/serverfix</code>跟踪远程库其他分支等价于<code>git checkout --track orighin/serverfix</code></li><li><code>git push origin --delete xxx</code> 删除远程分支</li></ul><h2 id="git-branch-选项"><a href="#git-branch-选项" class="headerlink" title="git branch 选项"></a>git branch 选项</h2><ul><li>-d xxx: 删除分支</li><li>-D xxx:强制删除某个未合并的分支</li><li>-v:显示每个分支最后的提交</li><li>–merged:查看所有已与当前分支合并的分支</li><li>–no-merged:查看所有未与当前分支合并的分支</li><li>-f some hash:强制some分支移动到某hash版本</li><li><code>-u origin:master</code>:设置当前分支跟踪远程分支</li><li><code>-r</code>:显示所有远程分支</li><li><code>-a</code>:显示所有本地和远程分支</li></ul><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a><code>git rebase</code></h2><ul><li><code>git rebase xxx</code>把当前分支衍合到xxx分支</li><li><code>git rebase --onto master server client</code>把server与client共同祖先之后的变化加到master中去</li><li><code>git rebase -i xx</code>以他为xx基础或其共同祖先节点进行交互界面的rebase</li></ul><h2 id="git-cherry-pick-a-b-c把a-b-c等应用到当前分支"><a href="#git-cherry-pick-a-b-c把a-b-c等应用到当前分支" class="headerlink" title="git cherry-pick a b c把a,b,c等应用到当前分支"></a><code>git cherry-pick a b c</code>把a,b,c等应用到当前分支</h2><h2 id="git-describe-会输出以下信息"><a href="#git-describe-会输出以下信息" class="headerlink" title="git describe &lt;branch&gt;会输出以下信息"></a><code>git describe &lt;branch&gt;</code>会输出以下信息</h2><p><code>&lt;最近的tag&gt;_&lt;tag距离分支几个节点&gt;_&lt;当前分支hash值&gt;</code></p><h2 id="第一个父提交-2第二个父提交-2爷爷提交"><a href="#第一个父提交-2第二个父提交-2爷爷提交" class="headerlink" title="^第一个父提交^2第二个父提交~2爷爷提交"></a><code>^</code>第一个父提交<code>^2</code>第二个父提交<code>~2</code>爷爷提交</h2><h2 id="格式-source-destination"><a href="#格式-source-destination" class="headerlink" title="格式:[source:destination]"></a>格式:<code>[source:destination]</code></h2><h1 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h1><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a><code>git stash</code></h2><p>备份当前的工作区内容，从最新的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区修改的内容保存到git栈中</p><ul><li><code>git stash list</code>显示所有栈内的备份</li><li><code>git stash apply &lt;stash_name&gt;</code>从栈中读取最新一次保存的内容，恢复工作区的相关内容</li><li><code>git stash pop</code>删除最新的暂存</li><li><code>git stash drop&lt;stash_name&gt;</code>删除指定暂存</li></ul><h1 id="建议规范"><a href="#建议规范" class="headerlink" title="建议规范"></a>建议规范</h1><h2 id="推荐的分支管理"><a href="#推荐的分支管理" class="headerlink" title="推荐的分支管理"></a>推荐的分支管理</h2><ul><li><code>master</code>:主分支,禁止直接在master上进行代码的提交和修改,此分支的代码可以随时被发布到线上</li><li><code>develop</code>:测试分支,所有开发完成需要提交测试的功能合并到该分支,该分支包含最新的更改</li><li><code>feature</code>:开发分支,大家根据不同需求创建独立的功能分支,开发后合并到develop分支</li><li><code>fix</code>:分支为bug修复分支,需要根据实际情况对已发布的版本进行漏洞修复</li></ul><h2 id="标签tag管理"><a href="#标签tag管理" class="headerlink" title="标签tag管理"></a>标签tag管理</h2><p>Tag采用三段式:v版本.里程碑.序号(v2.3.1)</p><ul><li>第一位:架构升级或架构重大调整</li><li>第二位:新功能上线或模块大的调整</li><li>第三位:bug修复</li></ul><h2 id="提交信息格式"><a href="#提交信息格式" class="headerlink" title="提交信息格式"></a>提交信息格式</h2><h3 id="中文"><a href="#中文" class="headerlink" title="中文:"></a>中文:</h3><ul><li>-&lt;新功能&gt;添加解析url功能</li><li>-&lt;修改&gt;修改某功能的某个实现为另一个实先</li><li>-&lt;Bug修复&gt;修复url的特殊情况下解析失败的问题</li><li>-&lt;重构&gt;重构获取数据的方法</li><li>-&lt;测试&gt;添加(修改、删除)获取数据的单元测试代码</li><li>-&lt;文档&gt;修改(添加、删除)文档</li></ul><h3 id="英文"><a href="#英文" class="headerlink" title="英文:"></a>英文:</h3><ul><li>-feat:新功能</li><li>-fix:修补bug</li><li>-refactor:重构</li><li>-test:测试相关</li><li>-docs:文档</li></ul><h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>该文件里的文件夹和文件(可以使用通配符<code>*</code>,<code>!</code>,<code>?</code>,<code>[a-zA-Z]</code>等，具体看)不被加入版本控制中，也就不会出现在git status中(文件.gitignore本身还是会untrack状态),git add的时候不会被加入，这里仅局限于untracked file，那些Staged file，不受.gitignore影响</p><ul><li>每一行定义一个或一组文件夹或文件，以<code>/</code>结尾的只匹配文件夹，否则，可以匹配文件或文件夹</li><li>以<code>!</code>开头的，如果有冲突，会把之前模式匹配的覆盖掉</li><li>如果一个文件夹已经被匹配，那么其子文件夹和文件就不受其他模式影响</li><li><code>**/foo</code>匹配任何位置的foo，类似的<code>a/**/b</code>匹配<code>a/x/b</code>,<code>a/b</code>等</li></ul><h1 id="常见问题技巧"><a href="#常见问题技巧" class="headerlink" title="常见问题技巧:"></a>常见问题技巧:</h1><ul><li>推送要密码,改成ssh认证,在.git&#x2F;config里修改remote地址,从仓库复制过去ssh地址,不用httpServer,因为它就是默认用密码登录,也可以从命令行修改</li><li>仓库中所有文件的sha1值在.git目录中的objects文件夹下，想要根据sha1值查看文件内容，可以用<code>git cat-file -p [sha1值]</code>注意，objects中只有两个数字的文件夹是该文件夹下所有文件内容的sha1值的前两位，所以要拼接一下，当然你如果用命令知道它的完整sha1值就不用拼接了</li><li><code>gitjk</code>有用的命令，可以查看如何撤销上个命令,可以从网上下载该工具，需要npm</li><li><code>git log --tags --simplify-by-decoration --pretty=&quot;format:%ci %d&quot;</code>通过log来看tag,并且加上了日期</li><li>加了ssh-key死活连不上<ol><li>在.ssh文件夹下加个config文件,内容如下： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">Host github.com<br>User <span class="hljs-number">2726905171</span>@qq.com<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_ed25519<br>Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure></li><li>之后执行命令<code>ssh-add 私钥位置</code></li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>输入输出流</title>
    <link href="/2021/03/11/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
    <url>/2021/03/11/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>1.操纵符</p><table><thead><tr><th align="center">操纵符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">boolalpha</td><td align="center">将true和false输出为字符串</td></tr><tr><td align="center">*noboolalpha</td><td align="center">将true和false输出为1,0</td></tr><tr><td align="center">showbase</td><td align="center">对整型值输出表示进制的前缀</td></tr><tr><td align="center">*noshowbase</td><td align="center">不生成表示进制的前缀</td></tr><tr><td align="center">showpoint</td><td align="center">对浮点值总是显示小数点</td></tr><tr><td align="center">*noshowpoint</td><td align="center">只有当浮点值包含小数部分时,显示小数点</td></tr><tr><td align="center">showpos</td><td align="center">对非负数显示+</td></tr><tr><td align="center">*noshowpos</td><td align="center">对非负数不显示+</td></tr><tr><td align="center">uppercase</td><td align="center">在十六进制中打印0X,在科学计数法中打印E</td></tr><tr><td align="center">*uppercase</td><td align="center">在十六进制中打印0x,在科学计数法中打印e</td></tr><tr><td align="center">*dec</td><td align="center">整型值显示为十进制</td></tr><tr><td align="center">hex</td><td align="center">整型值显示为十六进制</td></tr><tr><td align="center">oct</td><td align="center">整型值显示为十进制</td></tr><tr><td align="center">left</td><td align="center">左对齐,在值的右侧添加填充字符</td></tr><tr><td align="center">right</td><td align="center">右对齐,在值的左侧添加填充字符</td></tr><tr><td align="center">internal</td><td align="center">左对齐符号,右对齐值,在值和符号之间添加填充字符</td></tr><tr><td align="center">fixed</td><td align="center">浮点值显示为定点十进制</td></tr><tr><td align="center">scientific</td><td align="center">浮点值显示为科学计数法</td></tr><tr><td align="center">hexfloat</td><td align="center">浮点值显示为十六进制(c++11)</td></tr><tr><td align="center">defaultfloat</td><td align="center">重置浮点值显示为十进制(c++11)</td></tr><tr><td align="center">unitbuf</td><td align="center">每次输出操作后都刷新缓冲区</td></tr><tr><td align="center">*nounitbuf</td><td align="center">恢复正常的缓冲区刷新方式</td></tr><tr><td align="center">*skipws</td><td align="center">输入运算符跳过空白符</td></tr><tr><td align="center">noskipws</td><td align="center">输入运算符不跳过空白符</td></tr><tr><td align="center">flush</td><td align="center">刷新ostream缓冲区</td></tr><tr><td align="center">ends</td><td align="center">插入空字符,然后刷新ostream缓冲区</td></tr><tr><td align="center">endl</td><td align="center">插入换行符,然后刷新ostream缓冲区</td></tr><tr><td align="center">setprecision([int])</td><td align="center">在iomanip,接受一个int值,来设置精度,见详解</td></tr><tr><td align="center">setfill([char])</td><td align="center">在iomanip,用一个字符填充空白</td></tr><tr><td align="center">setw([int])</td><td align="center">在iomanip,指定值的最小宽度,注意它只影响接下来的那个值</td></tr><tr><td align="center">setbase([int])</td><td align="center">在iomanip,将整数输出为某进制</td></tr></tbody></table><p>2.流对象的成员函数</p><table><thead><tr><th align="center">成员函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">precision()</td><td align="center">返回当前精度值</td></tr><tr><td align="center">precision(int)</td><td align="center">将精度设置为此值,返回旧精度</td></tr><tr><td align="center">is.get(ch)</td><td align="center">从istream is读取下一个字节存入字符ch。返回is</td></tr><tr><td align="center">os.put(ch)</td><td align="center">将字符ch输出到ostream os。返回os</td></tr><tr><td align="center">is.get()</td><td align="center">将is的下个字节作为int返回,不返回char的原因是可以多存个结尾符,与cstdio里的EOF做比较</td></tr><tr><td align="center">is.putback(ch)</td><td align="center">将字符ch放回is。返回is</td></tr><tr><td align="center">is.unget()</td><td align="center">将is向后移动一个字节。返回is</td></tr><tr><td align="center">is.peek()</td><td align="center">将下个字节作为int返回。但不从流中删除</td></tr><tr><td align="center">is.get(sink,size,delim)</td><td align="center">从is中读取最多size字节,并保存在字符数组中,字符数组的起始地址由sink给出。读取过程知道遇到字符delim或读取了size个字节或遇到文件尾。如果遇到delim，将其留在输入流中，不读取出来存入sink</td></tr><tr><td align="center">is.getline(sink,size,delim)</td><td align="center">与接受三个参数的类似，但会丢弃delim</td></tr><tr><td align="center">is.read(sink,size)</td><td align="center">读取最多size个字节，存入字符数组sink中，返回is</td></tr><tr><td align="center">is.gcount()</td><td align="center">返回上一个未格式化读取操作从is读取的字节数</td></tr><tr><td align="center">os.write(source,size)</td><td align="center">将字符数组source中的size个字节写入os，返回os</td></tr><tr><td align="center">is.ignore(size,delim)</td><td align="center">读取并忽略最多size个字符，包括delim。与其他未格式化函数不同，ignore有默认参数：size的默认值为1，delim的默认值为文件尾</td></tr></tbody></table><p>3.流的随机访问(只支持fstream,sstream)</p><table><thead><tr><th align="center">函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">tellg()</td><td align="center">返回输入流中标记的当前位置</td></tr><tr><td align="center">tellp()</td><td align="center">返回输出流中标记的当前位置</td></tr><tr><td align="center">seekg()</td><td align="center">在一个输入流中将标记重定位到给定的绝对地址。pos通常是tellg的返回值</td></tr><tr><td align="center">seekp()</td><td align="center">在一个输出流中将标记重定位到给定的绝对地址。pos通常是tellp的返回值</td></tr><tr><td align="center">seekg(off,from)</td><td align="center">在一个输入流中将标记定位到from之前(off为负的时候)或之后off个字符。from是下列的值:beg(流开始位置)，cur(当前位置)，end(结尾位置)</td></tr><tr><td align="center">seekp(off,from)</td><td align="center">(输出流同上)</td></tr></tbody></table><p>4.getline()函数<br>getlint([istream],[string])从输入流中读取一行，并舍弃换行符，赋值给string<br>5.流的状态位</p><table><thead><tr><th align="center">状态成员(类型为strm::iostate)</th><th align="center">成员函数</th><th align="center">函数意义</th></tr></thead><tbody><tr><td align="center">badbit</td><td align="center">s.bad()</td><td align="center">strm:badbit用来指出流已经奔溃。若流s的badbit置位，成员函数返回true，这个一般由系统造成，一般这个流就废了</td></tr><tr><td align="center">failbit</td><td align="center">s.fail()</td><td align="center">strm::failbit用来指出一个IO操作失败。若s的failbit置位，成员函数返回true,流还可以修正继续使用</td></tr><tr><td align="center">eofbit</td><td align="center">s.eof()</td><td align="center">strm::eofbit用来指出流到达结尾。若s的eofbit置位，成员函数返回true</td></tr><tr><td align="center">goodbit</td><td align="center">s.good()</td><td align="center">strm::goodbit用来指出流未处于错误状态。若上述三个被置位任何一个，成员函数返回true</td></tr><tr><td align="center"></td><td align="center">s.clear()</td><td align="center">所有条件状态复位，流状态设置为有效，返回void</td></tr><tr><td align="center"></td><td align="center">s.clear(flags)</td><td align="center">根据给定的flags标志位，进行条件置位，如：<code>cin.clear(cin.rdstate() &amp; ~cin.failbit &amp; ~cin.badbit)</code>只对failbit和badbit复位，其余保持不变</td></tr><tr><td align="center"></td><td align="center">s.rdstate()</td><td align="center">返回流当前状态，类型为strm::iostate</td></tr></tbody></table><p>6.流之间的关联<br>一般情况下cin和cerr被关联到cout,所以cin操纵之后，都会刷新cout的缓冲区<br>cin.tie()会返回关联的输出流的指针<br>cin.tie([*os])关联流到该指针<br>每个流最多关联到一个输出流，但多个流可以同时关联到同一个输出流。<br>istream可以关联ostream的对象，ostream也可以关联到ostream的对象，也可以关联到一个空指针。<br>7.文件模式</p><p>|文件模式|含义|<br>|in|以读方式打开|<br>|out|以写方式打开|<br>|app|每次写操作前均定位到文件末尾|<br>|ate|打开文件后立刻定位到文件末尾|<br>|trunc|截断文件|<br>|binary|以二进制方式进行IO|</p><p>文件模式指定之间以‘|’分割，并有如下限制:<br>-只可以对ofstream或fstream对象设定out模式<br>-只可以对ifstream或fstream对象设定in模式<br>-只有当out模式设定时才可以设定trunc模式<br>-只要trunc没被设定，就可以设定app模式。在app模式下，即使没有显式指定out模式，文件也总是以输出模式打开<br>-默认情况下，即使我们没有指定trunc,out模式打开的文件也会被截断，或者同时指定app模式或者in模式<br>-ate和binary可以用于任何文件流对象，可以与其他模式任意组合<br>4.精度<br>默认情况下,精度会控制打印的数字的总数。打印时,<font color=#FF0000>浮点值按当前精度舍入而非截断</font>,在执行scientific,fixed或hexfloat后,精度值控制的是小数点后面的数字位数</p><p>1.scanf与printf<br>格式:<code>scanf(&quot;format_specifier&quot;,&amp;val)</code>与<code>printf(&quot;format_specifier&quot;,&amp;val)</code><br>例子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> ch;<br><span class="hljs-type">double</span> d;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c %lf&quot;</span>,&amp;ch,&amp;d);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %lf&quot;</span>,ch,d);<br></code></pre></td></tr></table></figure><p>|:-:|:-:|:-:|<br>|类型|格式|大小|<br>|int|%d|32bit|<br>|long|%ld|64bit|<br>|char|%c|16bit|<br>|float|%f|32bit|<br>|double|%lf|64bit|<br>2.float与double固定小数点后的位数输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">float</span> a=<span class="hljs-number">8.333291</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.03f&quot;</span>,a);<span class="hljs-comment">//小数点后面保留3位</span><br>cout.<span class="hljs-built_in">precision</span>(<span class="hljs-number">3</span>);<br>cout&lt;&lt;fixed&lt;&lt;endl;<span class="hljs-comment">//保留3位</span><br><br></code></pre></td></tr></table></figure><p>3.进制转换<br>十六进制 <code>cout&lt;&lt;hex;</code><br>十进制 <code>cout&lt;&lt;dec</code>;<br>八进制 <code>cout&lt;&lt;oct</code>;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AWK</title>
    <link href="/2021/01/24/AWK/"/>
    <url>/2021/01/24/AWK/</url>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>awk [-v var=value] [-F re] [--] &#39;pattern n&#123;action&#125;&#39; var=value files</code><br><code>awk [-v var=value] [-F re] [--] -f scriptfile [file] var=value files</code><br><strong>注:</strong>-v指定的变量定义在BEGIN之前,BEGIN过程中不能访问有关文件或命令行的任何变量(除了环境变量)</p><h3 id="awk选项总结"><a href="#awk选项总结" class="headerlink" title="awk选项总结"></a>awk选项总结</h3><table><thead><tr><th align="center">options</th><th align="center">describe</th></tr></thead><tbody><tr><td align="center">-F</td><td align="center">改变字段分割符,默认为空格</td></tr><tr><td align="center">-f</td><td align="center">跟随脚本中的文件名</td></tr><tr><td align="center">-v</td><td align="center">跟随var&#x3D;value,作用域在BEGIN之前</td></tr><tr><td align="center">-mf [N]</td><td align="center">指定处理的数据文件中最大字段数</td></tr><tr><td align="center">-mr [N]</td><td align="center">指定处理的数据文件中最大行数</td></tr><tr><td align="center">-W keyword</td><td align="center">指定gawk的兼容模式或警告等级</td></tr></tbody></table><h3 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h3><table><thead><tr><th align="center">variable</th><th align="center">describe</th></tr></thead><tbody><tr><td align="center">ARGV</td><td align="center">命令行参数的数组,不包括脚本本身(-f选项也不包括),下标从0开始(一般为awk),一般大于0的下标都是输入的文件名,最后一个是ARGC-1</td></tr><tr><td align="center">ARGC</td><td align="center">ARGV数组个数</td></tr><tr><td align="center">ARGIND</td><td align="center">当前输入文件在ARGV的索引值</td></tr><tr><td align="center">CONVFMT</td><td align="center">用于数字的字符串转换格式(%.6g)</td></tr><tr><td align="center">ENVIRON</td><td align="center">环境变量数组,下标是环境变量名</td></tr><tr><td align="center">FILENAME</td><td align="center">当前输入文件名称</td></tr><tr><td align="center">FNR</td><td align="center">当前输入文件的记录(行)个数</td></tr><tr><td align="center">FS</td><td align="center">字段分隔符,最好在BEGIN的时候定义</td></tr><tr><td align="center">ERRNO</td><td align="center">当getline或close失败时的描述信息</td></tr><tr><td align="center">FIELDWIDTHS</td><td align="center">见该小结</td></tr><tr><td align="center">IGNORECASE</td><td align="center">如果不为0,模式匹配不区分大小写</td></tr><tr><td align="center">NF</td><td align="center">每段记录(即行)的字段数(即单词)</td></tr><tr><td align="center">NR</td><td align="center">行号</td></tr><tr><td align="center">OFMT</td><td align="center">数值的输出格式,默认为”%.6g”</td></tr><tr><td align="center">OFS</td><td align="center">输出字段分割符,默认为” “</td></tr><tr><td align="center">ORS</td><td align="center">输出的记录分割符,默认为”\n”</td></tr><tr><td align="center">RLENGTH</td><td align="center">被函数match匹配的字符串长度</td></tr><tr><td align="center">RS</td><td align="center">记录分隔符</td></tr><tr><td align="center">RT</td><td align="center">如果RS为正则表达式，RT则代表当前行所匹配的值</td></tr><tr><td align="center">RSTART</td><td align="center">被函数match匹配的字符串的开始</td></tr><tr><td align="center">SUBSEP</td><td align="center">下标分割符(\034)</td></tr><tr><td align="center">$0</td><td align="center">整行内容</td></tr></tbody></table><h3 id="awk内置函数"><a href="#awk内置函数" class="headerlink" title="awk内置函数"></a>awk内置函数</h3><table><thead><tr><th align="center">算术函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">cos(x)</td><td align="center">返回x的余弦</td></tr><tr><td align="center">exp(x)</td><td align="center">返回e的x次幂</td></tr><tr><td align="center">sin(x)</td><td align="center">返回x的正弦</td></tr><tr><td align="center">int(x)</td><td align="center">返回x的整数部分的值</td></tr><tr><td align="center">log(x)</td><td align="center">返回x的自然对数(以e为底)</td></tr><tr><td align="center">sqrt(x)</td><td align="center">返回x的平方根</td></tr><tr><td align="center">atan2(y,x)</td><td align="center">返回y&#x2F;x的反正切</td></tr><tr><td align="center">rand()</td><td align="center">返回0-1之间的随机数</td></tr><tr><td align="center">srand(x)</td><td align="center">建立rand()的新的种子数。如果没有指定种子数,就用当天的时间。返回旧的种子值</td></tr><tr><td align="center">字符串函数</td><td align="center">描述</td></tr><tr><td align="center">gsub(r,s,t)</td><td align="center">在字符串t中用字符串s替换和正则表达式r匹配的所有字符串。返回替换的个数。如果没有给出t,默认$0</td></tr><tr><td align="center">gensub(r,s,h,t)</td><td align="center">如果h以g或G开始的字符串，则对于在t中的r,用s进行全局替换。否则，h是一个数据：替换第h次出现的r.该函数返回新值，t本身不会改变，t默认为$0</td></tr><tr><td align="center">sprintf(fmt,expr-list)</td><td align="center">根据格式字符串fmt返回格式化后的expr-list,fmt格式见printf那里</td></tr><tr><td align="center">index(s,t)</td><td align="center">返回子串t在字符串s中的位置,如果没有指定s,则返回0</td></tr><tr><td align="center">length(s)</td><td align="center">返回字符串s的长度,当没有给出s时,返回$0的长度</td></tr><tr><td align="center">match(s,r)</td><td align="center">如果正则表达式r在s中出现,则返回出现的起始位置;如果没有,则返回0</td></tr><tr><td align="center">spllit(s,a,sep)</td><td align="center">使用字段分隔符sep将字符串s分解到数组a的元素中,返回元素个数。如果没有给出sep,则使用FS。数组分割和字段分隔采用相同的方式</td></tr><tr><td align="center">sub(r,s,t)</td><td align="center">在字符串t中用s替换正则表达式r的首次匹配。如果成功则返回1,否则返回0,,如果没有给出t,默认为$0</td></tr><tr><td align="center">substr(s,p,n)</td><td align="center">返回字符串s中从位置p开始最大长度为n的子串。如果没有给出n,返回从p开始剩余的字符串。</td></tr><tr><td align="center">systime()</td><td align="center">返回用秒表示的天的当前的时间,从UNIX元年开始算</td></tr><tr><td align="center">strftime(format,timestamp)</td><td align="center">依照format格式化timestamp。timestamp默认为当前</td></tr><tr><td align="center">tolower(s)</td><td align="center">将字符串s中的所有大写字符转换为小写,并返回新串</td></tr><tr><td align="center">toupper(s)</td><td align="center">将字符串s中的小写字符转换为大写,并返回新串</td></tr></tbody></table><h3 id="模式汇总"><a href="#模式汇总" class="headerlink" title="模式汇总"></a>模式汇总</h3><table><thead><tr><th align="center">格式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">BEGIN {statements}</td><td align="center">在输入被读取之前,statements执行一次,<strong>注意BEGIN里一些内建变量可能为空(如FILENAME)</strong></td></tr><tr><td align="center">END {statements}</td><td align="center">当所有输入被读取完毕之后,statements执行一次</td></tr><tr><td align="center">expression {statements}</td><td align="center">每碰到一个使expression为真的输入行,statements就执行.expression为真指的是其值非零或非空</td></tr><tr><td align="center">&#x2F;regular expression&#x2F; {statements}</td><td align="center">当输入行有一段字符串可以被正则表达式匹配,则执行statements</td></tr><tr><td align="center">compound pattern {statements}</td><td align="center">一个复合模式将表达式用&amp;&amp;,</td></tr><tr><td align="center">pattern1,pattern2 {statements}</td><td align="center">一个范围模式匹配多个输入行,这些输入行从匹配pattern1的开始,到匹配pattern2的行结束(包括这两行),对这其中的每一行执行statements</td></tr></tbody></table><h3 id="字符串匹配模式"><a href="#字符串匹配模式" class="headerlink" title="字符串匹配模式"></a>字符串匹配模式</h3><table><thead><tr><th align="center">格式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&#x2F;regexpr&#x2F;</td><td align="center">当当前输入行包含一段能够被regexexpr匹配的子字符串时,该模式匹配</td></tr><tr><td align="center">expression ~ &#x2F;regexpr&#x2F;</td><td align="center">如果expression的字符串值包含一段能够被regexpr匹配的子字符串时,该模式被匹配,返回该字符串,否则返回（待测试）</td></tr><tr><td align="center">expression !~ &#x2F;regexpr&#x2F;</td><td align="center">与上述相反</td></tr></tbody></table><h3 id="正则和字符串中的转移序列"><a href="#正则和字符串中的转移序列" class="headerlink" title="正则和字符串中的转移序列"></a>正则和字符串中的转移序列</h3><table><thead><tr><th align="center">序列</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>\a</code></td><td align="center">报警字符</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格</td></tr><tr><td align="center"><code>\f</code></td><td align="center">换页</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td></tr><tr><td align="center"><code>\v</code></td><td align="center">垂直制表符</td></tr><tr><td align="center"><code>\ddd</code></td><td align="center">八进制数ddd, ddd含有1到3个数字,每个数字的值在0到7 之间</td></tr><tr><td align="center"><code>\xbex</code></td><td align="center">十六进制</td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>awk中的数组不需要声明定义,都是关联数组</p><ul><li>赋值一个数组<code>array[0]=1;array[1]=2</code></li><li>删除一个元素<code>delete array[subscript]</code></li><li>删除一个数组<code>delete array</code></li><li><code>i in a</code>如果a[i]存在,则表达式为1,否则为0</li><li>遍历数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#var是arr的每个下标</span><br><span class="hljs-keyword">for</span> (var <span class="hljs-keyword">in</span> arr)<br>&#123;<br>statements<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>字符串的连接<code>&quot;pre&quot;str&quot;suf&quot;</code>不需要加号</li></ul><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>自定义函数的参数为值传递，不改变遍历本身，但是数组例外,函数体内出现的任何变量都是全局变量，想要使用局部变量，只能放在参数列表中（参数列表中没有实际参数对应的参数都将作为局部变量使用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> name(patameter-list)&#123;<br>statements<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="awk处理多行记录-主要改变分隔符"><a href="#awk处理多行记录-主要改变分隔符" class="headerlink" title="awk处理多行记录,主要改变分隔符"></a>awk处理多行记录,主要改变分隔符</h3><p><code>BEGIN &#123; FS=&quot;\n&quot;;RS=&quot;&quot;&#125;</code>,RS代表空行</p><h3 id="awk-script-x-1-test1-x-2-test2-awk可以这样传递变量"><a href="#awk-script-x-1-test1-x-2-test2-awk可以这样传递变量" class="headerlink" title="awk &#39;script&#39; x=1 test1 x=2 test2,awk可以这样传递变量"></a><code>awk &#39;script&#39; x=1 test1 x=2 test2</code>,awk可以这样传递变量</h3><h3 id="BEGIN与END"><a href="#BEGIN与END" class="headerlink" title="BEGIN与END"></a>BEGIN与END</h3><p>特殊的模式BEGIN在第一个输入文件的第一行之前被匹配,END在最后一个输入文件的最后一行被处理之后匹配。</p><h3 id="next与exit"><a href="#next与exit" class="headerlink" title="next与exit"></a>next与exit</h3><p>next使awk抓取下一行,并返回到脚本底部;exit会使awk执行END,如果已经在END,则结束程序</p><h3 id="nextfile"><a href="#nextfile" class="headerlink" title="nextfile"></a>nextfile</h3><p>nextfile语句和next类似，但它是更高层次上的操作。当执行nextfile时，当前的数据文件将被放弃，操作从脚本顶端开始，并使用下一个文件的第一个记录。</p><h3 id="输入分隔符"><a href="#输入分隔符" class="headerlink" title="输入分隔符"></a>输入分隔符</h3><p>内建变量 FS 的默认值是 “ “, 也就是一个空格符. 当 FS 具有这个特定值时, 输入字段按照 空格和 (或) 制表符分割, 前导的空格与制表符会被丢弃, 所以下面三行数据中, 其每一行的第 1 个字段都相同:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"> field1<br> field1<br>field1 field2<br></code></pre></td></tr></table></figure><p>然而, 当 FS 是其他值时, 前导的空格与制表符不会被丢弃.  把一个字符串赋值给内建变量 FS 就可以改变字段分隔符. 如果字符串的长度多于一个字 符, 那么它会被当成一个正则表达式. 当前输入行中, 与该正则表达式匹配的最左, 最长, 非空且<br>不重叠的子字符串变成字段分隔符, 举例来说,<br><code>BEGIN &#123; FS = &quot;,[ \t]*|[ \t]+&quot; &#125;</code><br>如果某个子串由一个后面跟着空格或制表符的逗号组成, 或者没有逗号, 只有空格与制表符, 那 么这个子串就是字段分隔符.  如果 FS 被设置成单个字符 (除了空格符), 那么这个字符就变成字段分隔符. 这个约定使得<br>把正则表达式元字符当作字段分隔符来用, 变得很容易:<br>FS &#x3D; “|”<br>把 | 变成字段分隔符<br><font color=#FF0000>不管FS的值是什么,换行符总是多行记录的字段分隔符之一 </font>,如果RS被设置成””(即空行为记录分割符),则默认的字段分隔符就是空格,制表及换行;如果FS是\n,则换行符既是唯一分隔符</p><h4 id="FIELDWIDTHS"><a href="#FIELDWIDTHS" class="headerlink" title="FIELDWIDTHS"></a>FIELDWIDTHS</h4><p>该变量可以用来分隔出现在固定宽度列中的数据。这些数据可能或不可能由空白字符来风格字段的值<br><code>FIELDWIDTHS= &quot;5 6 8 3&quot;</code><br>这里的记录有4个字段：$1有5个字符宽度，$2有6个字符的宽度等等。为FS指定一个值将恢复常规机制。通常使用FS&#x3D;FS恢复，无需保存到额外变量中。</p><h3 id="print与printf"><a href="#print与printf" class="headerlink" title="print与printf"></a>print与printf</h3><table><thead><tr><th align="center">格式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">print</td><td align="center">将$0打印到标准输出</td></tr><tr><td align="center">print expression,expression,…</td><td align="center">打印各个expression,expression之间由OFS分开,由ORS终止</td></tr><tr><td align="center">print expression,expression,…&gt;filename</td><td align="center">输出至filename</td></tr><tr><td align="center">print expression,expression,…&gt;filename</td><td align="center">追加到filename,不覆盖之前内容</td></tr><tr><td align="center">print expression,expression,…</td><td align="center">command</td></tr><tr><td align="center">close(filename),close(command)</td><td align="center">断开print与filename(或command)之间的连接,同一命令想要两次之间毫无关联,必须先close</td></tr><tr><td align="center">fflush(filename&#x2F;cmd)</td><td align="center">刷新缓存</td></tr><tr><td align="center">system(command)</td><td align="center">执行command;函数的返回值是command的退出状态</td></tr></tbody></table><p>printf主要可以指定格式,以上都能用printf替换,如:<code>printf(format,expression,expression,...) &gt; filename</code>末尾不会自动添加换行符<br>printf格式控制符(每一个格式说明符都以%开始,以转换字符结束)</p><p>|字符|表达式将被打印成|<br>|C|ASCII 字符|<br>|d|十进制整数|<br>|e|[-]d.dddddde[+-]dd|<br>|E|[-]d.ddddddE[+-]dd|<br>|f|[-]ddd.dddddd|<br>|g|照e或f进行转换, 选择较短的那个, 无意义的零会被抑制|<br>|G|照E或f进行转换, 选择较短的那个, 无意义的零会被抑制|<br>|i|十进制|<br>|O|无符号八进制数|<br>|s|字符串|<br>|x|无符号十六进制数|<br>|X|无符号十六进制数,字母大写|<br>|%|打印一个百分号 %, 不会有参数被吸收|</p><table><thead><tr><th align="center">修饰符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">表达式在它的域内左对齐</td></tr><tr><td align="center">width</td><td align="center">为了达到规定的宽度,必要时填充空格，前导0表示用0填充</td></tr><tr><td align="center">.prec</td><td align="center">字符串最大宽度, 或十进制数的小数部分的位数</td></tr></tbody></table><table><thead><tr><th align="center">fmt</th><th align="center">$1</th><th align="center">printf(fmt,$1)</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">97</td><td align="center">a</td></tr><tr><td align="center">%d</td><td align="center">97.5</td><td align="center">97</td></tr><tr><td align="center">%5d</td><td align="center">97.5</td><td align="center">97</td></tr><tr><td align="center">%e</td><td align="center">97.5</td><td align="center">9.750000e+01</td></tr><tr><td align="center">%f</td><td align="center">97.5</td><td align="center">97.500000</td></tr><tr><td align="center">%7.2f</td><td align="center">97.5</td><td align="center">97.50</td></tr><tr><td align="center">%g</td><td align="center">97.5</td><td align="center">97.5</td></tr><tr><td align="center">%.6g</td><td align="center">97.5</td><td align="center">97.5</td></tr><tr><td align="center">%o</td><td align="center">97</td><td align="center">141</td></tr><tr><td align="center">%06o</td><td align="center">97</td><td align="center">000141</td></tr><tr><td align="center">%x</td><td align="center">97</td><td align="center">61</td></tr><tr><td align="center">%s</td><td align="center">January</td><td align="center">&#96;</td></tr><tr><td align="center">%10s</td><td align="center">January</td><td align="center">&#96;</td></tr><tr><td align="center">%-10s</td><td align="center">January</td><td align="center">&#96;</td></tr><tr><td align="center">%.3s</td><td align="center">January</td><td align="center"><code>Jan</code></td></tr><tr><td align="center">%10.3s</td><td align="center">January</td><td align="center">&#96;</td></tr><tr><td align="center">%-10.3s</td><td align="center">January</td><td align="center">&#96;</td></tr><tr><td align="center">%%</td><td align="center">January</td><td align="center">%</td></tr></tbody></table><h3 id="管道的奇怪用法-好好理解到底啥是管道"><a href="#管道的奇怪用法-好好理解到底啥是管道" class="headerlink" title="管道的奇怪用法(好好理解到底啥是管道)"></a>管道的奇怪用法(好好理解到底啥是管道)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-comment">#注意sort命令用引号括起来,当成字符串</span><br><span class="hljs-built_in">print</span> xx | <span class="hljs-string">&quot;sort -t&#x27;\t&#x27; +1rn&quot;</span><br><span class="hljs-comment">#上面的管道名就是&quot;sort -t&#x27;\t&#x27; +1rn&quot;</span><br>close(<span class="hljs-string">&quot;sort -t&#x27;\t&#x27; +1rn&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>假设有以下文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">France</span><span class="hljs-number">211</span><span class="hljs-number">55</span>Europe<br><span class="hljs-attribute">Japan</span><span class="hljs-number">144</span><span class="hljs-number">120</span>Asia<br><span class="hljs-attribute">Germany</span><span class="hljs-number">96</span><span class="hljs-number">61</span>Europe<br><span class="hljs-attribute">England</span><span class="hljs-number">94</span><span class="hljs-number">56</span>Europe<br><span class="hljs-attribute">USSR</span><span class="hljs-number">8649</span><span class="hljs-number">275</span>Asia<br><span class="hljs-attribute">Canada</span><span class="hljs-number">3852</span><span class="hljs-number">25</span>North America<br><span class="hljs-attribute">China</span><span class="hljs-number">3705</span><span class="hljs-number">1032</span>Asia<br><span class="hljs-attribute">USA</span><span class="hljs-number">3615</span><span class="hljs-number">237</span>North America<br><span class="hljs-attribute">Brazil</span><span class="hljs-number">3286</span><span class="hljs-number">134</span>South America<br><span class="hljs-attribute">India</span><span class="hljs-number">1267</span><span class="hljs-number">746</span>Asia<br><span class="hljs-attribute">Mexico</span><span class="hljs-number">762</span><span class="hljs-number">78</span>North America<br></code></pre></td></tr></table></figure><p>以下程序会简单排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># prep1 - prepare countries by continent and pop. den.</span><br>BEGIN &#123; FS = <span class="hljs-string">&quot;\t&quot;</span> &#125;<br>&#123; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:%s:%d:%d:%.1f\n&quot;</span>,<br><span class="hljs-variable">$4</span>, <span class="hljs-variable">$1</span>, <span class="hljs-variable">$3</span>, <span class="hljs-variable">$2</span>, 1000*<span class="hljs-variable">$3</span>/<span class="hljs-variable">$2</span>) | <span class="hljs-string">&quot;sort -t: -k 1,1 -k 5rn&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="getline函数"><a href="#getline函数" class="headerlink" title="getline函数"></a>getline函数</h3><ul><li>描述:函数getline可以从当前输入行,或文件,或管道,读取输入.getline抓取下一个记录,按照通常的方式把记录分割成一个个的字段.它会设置NF,NR,和FNR;如果存在一个记录,返回1,若遇到文件末尾,返回0,发生错误时返回-1(例如打开文件失败).</li><li><code>getline x</code>读取下一条记录到变量x中，并递增NR与FNR,不会对记录进行分隔，不会设置NF</li><li><code>getline &lt;&quot;file&quot;</code>从文件file读取输入.它不会对NR与FNR产生影响, 但是会执行字段分割,并且设置NF.</li><li><code>getline x &lt;&quot;file&quot;</code>从file读取下一条记录,存到变量x中.记录不会被分割成字段,变量NF,NR,与FNR都不会被修改.</li></ul><table><thead><tr><th align="center">表达式</th><th align="center">被设置的变量</th></tr></thead><tbody><tr><td align="center">getline</td><td align="center">$0,NF,NR,FNR</td></tr><tr><td align="center">getline var</td><td align="center">var,NR,FNR</td></tr><tr><td align="center">getline &lt;file</td><td align="center">$0,NF</td></tr><tr><td align="center">getline var&lt;file</td><td align="center">var</td></tr><tr><td align="center">&#96;cmd</td><td align="center">getline&#96;</td></tr><tr><td align="center">&#96;cmd</td><td align="center">getline var&#96;</td></tr></tbody></table><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#必须判断大于0,否则文件不存在则就是死循环</span><br><span class="hljs-keyword">while</span> (getline x&lt;file &gt;0)<br><span class="hljs-built_in">print</span> x<br>next<br><span class="hljs-keyword">while</span> (<span class="hljs-string">&quot;who&quot;</span>|getline)<br>n++<br></code></pre></td></tr></table></figure><p>13.例子<br>a.将每一行的字段逆序打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-keyword">for</span> (i=NF;i&gt;0;i=i-1) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,<span class="hljs-variable">$i</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="awk的正则表达式"><a href="#awk的正则表达式" class="headerlink" title="awk的正则表达式"></a>awk的正则表达式</h3><ul><li>awk的圆括号用法有点异样:<code>(r1)(r2)</code>若匹配xy,其中x匹配r1,y匹配r2。<br>举例:<code>(Asian|European|North American) (male|female) (black|blue)bird</code>12种组合</li></ul><h3 id="shell中包含awk"><a href="#shell中包含awk" class="headerlink" title="shell中包含awk"></a>shell中包含awk</h3><ul><li>见例子1</li></ul><h3 id="awk程序搜索路径"><a href="#awk程序搜索路径" class="headerlink" title="awk程序搜索路径"></a>awk程序搜索路径</h3><p> awk允许你指定一个名为AWKPATH的环境变量，它定义了awk程序的文件搜索路径，默认路径为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;awk。当前路径永远最优先,如果文件名包含<code>/</code>将不执行查找</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># field -打印每个文件的指定字段顺序</span><br><span class="hljs-comment"># usage: field n n n ... file file file ...</span><br>awk <span class="hljs-string">&#x27;</span><br><span class="hljs-string">#开始时,寻找数字,并使之清空,这样他们就不会被当成文件名</span><br><span class="hljs-string">BEGIN &#123;</span><br><span class="hljs-string">for (i = 1; ARGV[i] ~ /^[0-9]+$/; i++) &#123; # collect numbers</span><br><span class="hljs-string">fld[++nf] = ARGV[i]</span><br><span class="hljs-string">ARGV[i] = &quot;&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">if (i &gt;= ARGC)</span><br><span class="hljs-string"># no file names so force stdin</span><br><span class="hljs-string">ARGV[ARGC++] = &quot;-&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">for (i = 1; i &lt;= nf; i++)</span><br><span class="hljs-string">printf(&quot;%s%s&quot;, $fld[i], i &lt; nf ? &quot; &quot; : &quot;\n&quot;)</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span> $*<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#交互式awk脚本</span><br>BEGIN &#123;<br>maxnum = ARGC &gt; 1 ? ARGV[1] : 10<br><span class="hljs-comment"># default size is 10</span><br>ARGV[1] = <span class="hljs-string">&quot;-&quot;</span><span class="hljs-comment"># read standard input subsequently</span><br>srand()<span class="hljs-comment"># reset rand from time of day</span><br><span class="hljs-keyword">do</span> &#123;<br>n1 = randint(maxnum)<br>n2 = randint(maxnum)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g + %g = ? &quot;</span>, n1, n2)<br><span class="hljs-keyword">while</span> ((input = getline) &gt; <span class="hljs-number">0</span>)<br>if (<span class="hljs-variable">$0</span> == n1 + n2) &#123;<br>print &quot;Right!&quot;<br>break<br>&#125; else if (<span class="hljs-variable">$0</span> == &quot;&quot;) &#123;<br>print n1 + n2<br>break<br>&#125; else<br>printf(&quot;wrong, try again: &quot;)<br>&#125; while (input &gt; <span class="hljs-number">0</span>)<br>&#125;<br>function randint(n) &#123; return int(rand()*n)+<span class="hljs-number">1</span> &#125;<br></code></pre></td></tr></table></figure><ul><li>去除字符串<code>gsub(/&quot;([^&quot;]|\\&quot;)*&quot;/, &quot;&quot;, line)</code></li><li>去除正则表达式<code>gsub(/\/([^\/]|\\\/)+\//, &quot;&quot;, line)</code></li><li>去除注释<code>sub(/#.*/, &quot;&quot;, line)</code></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux问题解决</title>
    <link href="/2020/12/31/Arch_Linux%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%BB%8F%E9%AA%8C/"/>
    <url>/2020/12/31/Arch_Linux%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>1.广通无线网卡问题<br><code>lspci</code>查看那个shit一样的网卡名字”BCM43142”<br><code>sudo pacman -S linux-headers</code>装这个东西<br><code>sudo pacman -S broadcom-wl-dkms</code>安装这个屎样的驱动<br>你可能会说,没网下个屁啊<br>打开archwiki的package页面搜索包,点想要的包,在右边有个小字download from mirrors,点他下载离线包,sudo pacman -U 那个包<br>最新包可能出现问题,降级的时候要连linux那个包一块降级,linux和linux-headers版本号要对应上,<br>2.降级问题<br>最新包可能出现问题,先在&#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg&#x2F;那个目录下找缓存的文件<br>找不到再从网上找。<br>也可以用downgrade工具,没用过就不说它了<br>3.背光灯问题<br>&#x2F;etc&#x2F;modprobe.d&#x2F;sony-laptop.conf 索尼背光灯设置文件<br>4.制作启动盘<br>直接用如下命令制作,deepin官网的也不行<br><code>df</code>查看启动U盘的设备号<br><code>sudo dd bs=4M if=deepin-desktop-community-1010-amd64.iso of=/dev/sdb status=progress &amp;&amp; sync</code><br>注意:如果u盘表现异常,一插有两个部分(一个部分只有几百兆),制作不会成功.也无法直接格式化,此时可以借助deepin官网启动盘制作,先格式化,再按上述操作<br>5.pacman更新过程中崩溃,断电<br>a.先制作启动盘(按上述方法)<br>b.assistant键进入,选择U盘启动(bios里外部设备启动要打开)<br>c.<code>iwctl</code>进入无线网配置<br>(1)查看无线设备<br><code>device list</code><br>(2)扫描无线网<br><code>station wlan0 scan</code><br>(3)列出网络名<br><code>station wlan0 get-networks</code><br>(4)根据设备(wlan0)连接wifi名称<br><code>station wlan0 connect CMCC-A9wF</code>并输入密码(75ij3tw7)<br>(5)<br>exit退出<br>d.挂载根文件系统,proc,sys和dev<br><code>mount /dev/sda[x] /mnt;mount -t proc proc /mnt/proc;mount --rbind /sys /mnt/sys;mount --rbind /dev /mnt/dev</code><br>e.有锁的话,删除锁<br><code>rm /mnt/var/lib/pacman/db.lck</code>要加&#x2F;mnt绝对路径<br>f.查找损坏包<br><code>pacman --sysroot /mnt -S $(pacman --sysroot /mnt -Qnq)</code><br>损坏包会有<code>vim: /usr/xxx/xxx exists in filesystem</code>,这里vim就是损坏包<br>注意如果没有损坏包,就不要执行上述命令,因为他是重装所有包,这里只是检查以下<br>g.把上述命令重定向到一个文件,用vim修改成每一行如<code>rm -f /mnt/usr/xxx/xxx</code><br>列模式修改(选中按c即可)’:’前面的所有字符为<code>rm -f /mnt</code>(要加&#x2F;mnt,绝对路径),全局替换掉所有’exists in filesystem’为空<br>h.<code>chmod +x</code>赋予那个重定向文件执行权限,<code>./(那个文件)</code><br>i.更新或安装损坏包,<br><code>pacman --sysroot /mnt -S (package)</code><br>j.如果找不到镜像,重装下列包<br><code>pacman --sysroot /mnt -S mkinitcpio systemd linux</code><br>6.无线问题<br><code>如果无线标志都没出来</code>网卡重装,回到本博客开头的第一个问题<br><code>如果标志出来,收不到任何无线网</code>重装<code>wpa_supplicant</code><br>7.wps界面不显示中文<br>卸载,用yay重装wps-office-cn版本,提示你可选依赖，装上所有可选依赖<br>8.<br>gdm进不去,重装gtk,gdm,gnome,xorg,gnome相关的全部删除<br>9.yay包降级<br>在wiki上找到那个包,在右边点击View Changes,选择想要的版本,点击下载,然后进入下载的解压缩文件,输入命令makepkg,sudo pacman -U xx.tar*<br>10.自动挂载手机<br>安装<code>gvfs-mtp(安卓)\gvfs-afc(iphone)</code>和<code>gvfs-gphoto2</code><br>11.gnome的压缩软件-&gt;file-roller<br>12.lantern缺少的依赖-&gt;’libappindicator-gtk2&#x2F;3’<br>13.ubuntu虚拟机安装增强功能需要<code>build-essential gcc make perl linux-image-xx-generic</code></p><ul><li>声音要先放网易云才能有,且要一直放的trouble,装<code>pipewire pipewire-pulse pipewire-alsa pipewire-jack pipewire-media-session</code><br>14.鼠标大小<br>dconf write &#x2F;org&#x2F;gnome&#x2F;desktop&#x2F;interface&#x2F;cursor-size 42</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openSSH</title>
    <link href="/2020/12/21/openSSH/"/>
    <url>/2020/12/21/openSSH/</url>
    
    <content type="html"><![CDATA[<p>1.登录服务器<br><code>ssh &lt;user&gt;@&lt;hostname&gt;</code>hostname是主机名,可以是域名,也可能是IP地址,不指定<user>@时,默认为客户端的当前用户名<br><code>ssh -p 8821 foo.com</code>默认端口为21,可以用-p选项指定服务器的端口<br>2.文件信息<br>服务器公钥的指纹既是SSH服务器公钥的哈希值,每台SSH服务器都有唯一一对密钥<br><code>ssh-keygen -l -f [*.pub]</code>查看某个公钥的指纹<br>ssh会将本机链接过的所有服务器公钥的指纹存储在”~&#x2F;.ssh&#x2F;known_hosts”文件中。每次链接服务器都会通过该文件判断是否为陌生服务器,如果是陌生的则会产生警告,如果输入yes忽略警告,将会自动添加该服务器的公钥指纹到该文件<br><code>ssh-keygen -R &lt;hostname&gt;</code>用于删除某服务器的公钥(用于失效的情况),也可以手动删除known_hosts文件中的相关内容<br>3.执行远程命令<br>一般在登陆后,输入命令,<br>也可以一步到位<code>ssh [username@hostname] &lt;command&gt;</code>登陆成功后立即执行命令,如果命令是交互式的,则需要加上-t选项,如:<code>ssh -t foo.com vi foo.txt</code><br>4.命令行配置项</p><table><thead><tr><th align="center">参数</th><th align="center">意义</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">指定加密算法</td><td align="center"><code>ssh -c blowfish,3des server.example.com</code>,<code>ssh -c blowfish -c 3des server.example.com</code></td></tr><tr><td align="center">-C</td><td align="center">压缩数据传输</td><td align="center"><code>ssh -C server.example.com</code></td></tr><tr><td align="center">-d</td><td align="center">设置打印的debug信息级别,数值越高越详细</td><td align="center"><code>ssh -d 1 foo.com</code></td></tr><tr><td align="center">-D</td><td align="center">指定本机的Socks监听端口,该端口收到的请求,都将转发到远程SSH主机,又称动态端口转发</td><td align="center"><code>ssh -D 1080 server</code></td></tr><tr><td align="center">-f</td><td align="center">表示SSH链接在后台运行</td><td align="center"></td></tr><tr><td align="center">-F</td><td align="center">指定配置文件</td><td align="center"><code>ssh -F /usr/local/ssh/other_config</code></td></tr><tr><td align="center">-i</td><td align="center">用于指定私钥,默认值是~&#x2F;.ssh&#x2F;id_dsa</td><td align="center"><code>ssh -i my-key server.example.com</code></td></tr><tr><td align="center">-l</td><td align="center">参数指定远程登录的账户名</td><td align="center"><code>ssh -l nanbert server.example.com</code></td></tr><tr><td align="center">-L</td><td align="center">设置本地端口转发</td><td align="center"><code>ssh -L 9999:targetServer:80 user@remoteServer</code>所有发向本地9999端口的请求,都会经过remoteServer发往targetServer的80端口,相当于直接连上了80的端口</td></tr><tr><td align="center">-m</td><td align="center">指定校验数据完整性的算法(MAC)</td><td align="center"><code>ssh -m hmac-sha1,hmac-md5 server.example.com</code></td></tr><tr><td align="center">-o</td><td align="center">参数用来指定一个配置命令,来覆盖配置文件设置</td><td align="center"><code>ssh -o &quot;User sally&quot; server.example.com</code></td></tr><tr><td align="center">-p</td><td align="center">指定链接的服务器的端口</td><td align="center"><code>ssh -p 2305 server.example.com</code></td></tr><tr><td align="center">-q</td><td align="center">安静模式,不输出任何警告</td><td align="center"><code>ssh -q foo.com</code></td></tr><tr><td align="center">-R</td><td align="center">指定远程端口转发</td><td align="center"><code>ssh -R 9999:targetServer:902 local</code>该命令需要在跳板服务器执行,指定本机计算机local监听自己的9999端口,所有发向这个端口的请求,都会转向targetServer的902端口</td></tr><tr><td align="center">-t</td><td align="center">在ssh直接运行远端命令时,提供一个交互shell</td><td align="center"><code>ssh -t server.example.com emacs</code></td></tr><tr><td align="center">-v</td><td align="center">显示详细信息,可重复多次,表示详细程度</td><td align="center"><code>ssh -vvv server.example.com</code></td></tr><tr><td align="center">-V</td><td align="center">显示客户端版本信息</td><td align="center"></td></tr><tr><td align="center">-X</td><td align="center">表示打开X窗口转发</td><td align="center"><code>ssh -X server.example.com</code></td></tr><tr><td align="center">-1,-2,-4,-6</td><td align="center">1表示SSH1协议,2表示SSH2协议,4表示IPv4协议(默认值),6表示Ipv6协议</td><td align="center"></td></tr></tbody></table><p>5.配置文件</p><table><thead><tr><th align="center">路径</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">&#x2F;etc&#x2F;ssh&#x2F;ssh_config</td><td align="center">全局配置文件</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;config</td><td align="center">用户个人的配置文件</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;id_ecdsa</td><td align="center">用户的ECDSA私钥</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;id_ecdsa.pub</td><td align="center">用户的ECDSA公钥</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;rsa</td><td align="center">用于SSH2的rsa私钥</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;rsa.pub</td><td align="center">用于SSH2的rsa公钥</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;identity</td><td align="center">用于SSH1的rsa私钥</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;identity.pub</td><td align="center">用于SSH1的rsa公钥</td></tr><tr><td align="center">~&#x2F;.ssh&#x2F;known_hosts</td><td align="center">包含SSH服务器的公钥指纹</td></tr></tbody></table><p>配置文件示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host *<br>Port 2222<br>Host remoteserver<br>HostName remote.example.com<br>User nanbert<br>Port 2112<br></code></pre></td></tr></table></figure><p>常见配置命令:<br><code>AddressFamily &lt;option&gt;</code>option可以是inet,表示IPV4协议,也可以是inet6,表示IPV6协议<br><code>BindAddress 192.168.10.235</code>指定本机的IP地址(如果本机有多个Ip地址)<br><code>CheckHostIP &lt;yesOrNo&gt;</code>是否检查SSH的服务器IP地址是否跟公钥数据库吻合<br><code>Ciphers &lt;option&gt;</code>:指定加密算法<br><code>Compression &lt;yesOrNo&gt;</code>是否压缩传输信号<br><code>ConnectionAttempts &lt;num&gt;</code>客户端进行连接时,最大尝试次数<br><code>ConnectTimeout &lt;num&gt;</code>客户端进行连接时,服务器在指定秒数内没有回复,则中断连接尝试<br><code>DynamicForward &lt;portNum&gt;</code>指定动态转发端口<br><code>GlobalKnownHostsFile &lt;filePath&gt;</code>指定全局的公钥数据库文件的位置<br><code>Host &lt;serverName&gt;</code>指定连接的域名或IP地址,也可以是别名,支持通配符,后面所有配置都是针对该主机,直到遇到下一个Host<br><code>HostKeyAlgorithm &lt;options&gt;</code>指定密钥算法,优先级从高到低排列,以逗号分隔<br><code>HostName &lt;serverAddress&gt;</code>在Host命令使用别名的情况下用<br><code>IdentityFile &lt;fileName&gt;</code>指定私钥文件<br><code>LocalForward 2001 localhost:143</code>指定本地端口转发<br><code>LogLevel &lt;options&gt;</code>指定日志详细程度。如果设为<code>QUIET</code>,将不输出大部分的警告和提示<br><code>MACs &lt;options&gt;</code>指定数据校验算法,以逗号分隔<br><code>NumberOfPasswordPrompts &lt;num&gt;</code>输错密码最大尝试数<br><code>PasswordAuthentication &lt;yesOrNo&gt;</code>是否支持密码登录,这里只是客户端,需要服务器也有相同的设置<br><code>Port &lt;portNum&gt;</code>指定客户端链接的SSH服务器端口<br><code>PreferredAutentications publickey,hostbased,password</code>指定各种登录方法优先级<br><code>Protocol &lt;1,2&gt;</code>支持的SSH协议版本,可以用逗号分隔同时支持两个版本<br><code>PubKeyAuthentication &lt;yesOrNo&gt;</code>是否支持密钥登录,这里只是客户端设置,需要服务器相同的设置<br><code>RemoteForward 2001 server:143</code>指定远程端口转发<br><code>SendEnv &lt;variable&gt;</code>客户端向服务器发送环境变量名,多个环境变量之间用空格分隔,变量的值从当前环境拷贝<br><code>ServerAliveCountMax &lt;num&gt;</code>如果没有收到服务器的回应,客户端发送多少次keepalive信号,才断开连接,默认为3<br><code>ServerAliveInterval &lt;num&gt;</code>客户端建立连接后,如果在给定的数秒内,没有收到服务器发来的消息,客户端向服务器发送keepalive消息,如果不希望客户端发送,这一项设为0<br><code>StrictHostKeyChecking &lt;yesOrNo&gt;</code>yes表示严格检查,服务器公钥为未知或发生变化,则拒绝连接。no表示如果服务器公钥未知,则加入客户端公钥数据库,如果公钥发生变化,不改变客户端公钥数据库,输出一条警告,依然允许连接继续进行。ask(默认值)表示向用户询问是否继续<br><code>TCPKeepAlive &lt;yesOrNo&gt;</code>客户端是否定期向服务器发送keepalive信息<br><code>User &lt;userName&gt;</code>指定登录账户名<br><code>UserKnownHostsFile &lt;filePath&gt;</code>指定当前用户的服务器公钥指纹列表(known_hosts)的文件位置<br><code>VerifyHostKeyDNS &lt;yesOrNo&gt;</code>是否检查SSH服务器的DNS记录,确认公钥指纹是否与known_hosts文件保持一致<br>6.密钥<br><em>概念</em>:<br>密钥是一个非常大的数字,通过加密算法得到。对称加密只需要一个密钥,非对称加密需要成对使用,分为公钥和私钥。<br>SSH密钥登录采用非对称加密,每个永不通过自己的密钥登录。其中,私钥必须私密保存,不能泄露;公钥则公开,对外发送。它们的关系是,公钥和私钥是一一对应<br><em>过程</em>:<br>预备步骤,客户端通过<code>ssh-keygen</code>生产自己的公钥和私钥<br>第一步,手动将客户端的公钥放入远程服务器的指定位置<br>第二步,客户端向服务器发起SSH登录请求<br>第三步,服务器收到用户SSH登录的请求,发送一些随机数据给用户,要求用户证明自己的身份<br>第四步,客户端收到服务器发来的数据,私用私钥对数据进行签名,然后再发给服务器<br>第五步,服务器收到客户端发来的加密签名后,使用对应的公钥解密,然后跟原始数据比较。如果一致,就允许用户登录<br><em>ssh-key–生成密钥</em><br>该命令会生成一对密钥,私钥默认存在<del>&#x2F;.ssh&#x2F;id_rsa,公钥默认存在</del>&#x2F;.ssh&#x2F;id_rsa.pub</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-b [num]</td><td align="center">指定密钥的二进制位数。这个参数越大,密钥越不容易破解,但是加密解密的开销也会越大,一般至少应该是1024</td></tr><tr><td align="center">-C “[string]”</td><td align="center">可以为密钥文件指定新的注释,格式一般为<code>username@host</code></td></tr><tr><td align="center">-f [filename]</td><td align="center">参数指定生成的私钥文件。不指定的话,会在~&#x2F;.ssh文件夹下生成一对密钥</td></tr><tr><td align="center">-F [hostname]</td><td align="center">检查某个主机名是否在known_hosts文件里面</td></tr><tr><td align="center">-N [secretword]</td><td align="center">指定私钥的密码</td></tr><tr><td align="center">-p[secretword]</td><td align="center">重新指定私钥的密码</td></tr><tr><td align="center">-R [hostname]</td><td align="center">将指定的主机公钥移除出known_hosts文件</td></tr><tr><td align="center">-t [algorithm]</td><td align="center">指定加密算法,一般为dsa或rsa</td></tr></tbody></table><p><em>手动上传公钥</em><br>把客户端生成的公钥复制粘贴到文件~&#x2F;.ssh&#x2F;authorized_keys中去,一个公钥占据一行<br><em>ssh-copy-id–自动上传公钥</em><br><code>ssh-copy-id -i key_file user@host</code> 自动上传公钥到服务器<br>公钥文件可以不指定路劲和.pub后缀,会自动在~&#x2F;.ssh目录下寻找<br>确保authorized_keys文件末尾为换行符,否则两个公钥连在一起,两个都会失效</p><p><em>ssh-agent命令</em><br>私钥设置了密码后,每次使用都必须输入密码,连续使用scp命令时,这就很麻烦,ssh-agent命令就是为了解决这个问题而设计的,它让用户在整个bash对话中,只在第一次使用SSH命令是输入密码,然后将私钥保存在内存中<br>第一步,新建一次命令对话<br><code>ssh-agent bash(zhs、fish)</code><br>第二步,添加私钥<br><code>ssh-add [filename]</code>可以不指定私钥名称,使用默认文件~&#x2F;.ssh&#x2F;id_rsa<br>第三步登录远程服务器<br><code>ssh remoteHost</code><br>最后,如果要退出ssh-agent,可以按Ctrl+d,也可以用如下命令<br><code>ssh-agent -k</code><br><em>ssh-add命令</em><br>ssh-add命令用来将私钥加入ssh-agent</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-d</td><td align="center">从内存中删除指定的私钥</td></tr><tr><td align="center">-D</td><td align="center">从内存中删除所有已经添加的私钥</td></tr><tr><td align="center">-l</td><td align="center">列出所有已经添加的私钥</td></tr></tbody></table><p><font size=6><strong>服务器端sshd</strong></font><br><strong>1.sshd配置文件</strong><br><code>/etc/ssh/sshd_config</code>配置文件<br><code>/etc/ssh/ssh_host_ecdsa_key</code>ECDSA私钥<br><code>/etc/ssh/ssh_host_ecdsa_key.pub</code>ECDSA公钥<br><code>/etc/ssh/ssh_host_key</code>用于SSH1协议版本的RSA私钥<br><code>/etc/ssh/ssh_host_key.pub</code>用于SSH1协议版本的RSA公钥<br><code>/etc/ssh/ssh_host_rsa_key</code>用于SSH2协议版本的RSA私钥<br><code>/etc/ssh/ssh_host_rsa_key.pub</code>用于SSH2协议版本的RSA公钥<br><code>/etc/pam.d/sshd</code>PAM配置文件<br><font color=#FF0000>重装会使这些文件失效,可以先备份</font><br><strong>sshd配置项</strong></p><table><thead><tr><th align="center">配置项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">AcceptEnv [variables…]</td><td align="center">允许接受客户端通过SendEnv命令发来的哪些环境变量,变量名用空格分隔</td></tr><tr><td align="center">AllowGroups [groupNames…]</td><td align="center">指定允许登录的用户组,多个组之间用空格隔开,若不用该项,则所有组都可以用</td></tr><tr><td align="center">AllowUsers [userNames…]</td><td align="center">指定允许登录的用户,用户名之间用空格隔开,支持通配符</td></tr><tr><td align="center">AllowTcpForwarding [options]</td><td align="center">默认值为yes,允许端口转发,local只允许本地端口转发,remote表示只允许远程端口转发</td></tr><tr><td align="center">AuthorizedKeysFile [directory]</td><td align="center">指定存储用户公钥的目录,默认是<code>~/.ssh/authorized_keys</code></td></tr><tr><td align="center">Banner [file]</td><td align="center">指定用户登录后,sshd向其展示的信息文件,默认不展示任何内容</td></tr><tr><td align="center">ChallengeResponseAuthentication [yesOrNo]</td><td align="center">指定是否用”键盘交互”身份验证方案,默认值为yes,如果完全禁用基于密码的验证,PasswordAuthentication也设为no</td></tr><tr><td align="center">Ciphers [algorithms]</td><td align="center">指定sshd可以接受的加密算法,多个算法之间使用逗号分割</td></tr><tr><td align="center">ClientAliveCountMax [num]</td><td align="center">指定建立连接后,客户端失去响应时,服务器尝试连接的次数</td></tr><tr><td align="center">ClientAliveInterval [num]</td><td align="center">允许客户端发呆的时间,单位为秒,如果超过这时间,连接将会关闭</td></tr><tr><td align="center">Compression [yesOrNo]</td><td align="center">Compression指定客户端与服务器之间的数据传输是否为压缩,默认为yes</td></tr><tr><td align="center">DenyGroups [groupNames…]</td><td align="center">指定不允许登录的用户组,组间空格分开</td></tr><tr><td align="center">DenyUsers [userNames…]</td><td align="center">指定不允许登录的用户,空格分开不同用户</td></tr><tr><td align="center">FascistLogging [yesOrNo]</td><td align="center">SSH1版本专用,指定日志是否输出全部Debug信息</td></tr><tr><td align="center">HostKey [filePath]</td><td align="center">指定服务器密钥的文件路径</td></tr><tr><td align="center">KeyRegenerationInterval [num]</td><td align="center">指定SSH1版本的密钥重新生成的时间间隔,单位为秒,默认为3600</td></tr><tr><td align="center">ListenAddress [ipAddress]</td><td align="center">指定sshd监听本机的IP地址,即sshd启用的IP地址,默认是0.0.0.0,表示在本机所有网络接口启用。可以改成只在某个网络接口启用,可以多次使用该配置项,来监听多个ip地址</td></tr><tr><td align="center">LoginGraceTime [num]</td><td align="center">指定允许客户端登录时发呆的最长时间,超过该时间就断开,0表示没有限制</td></tr><tr><td align="center">LogLevel [options]</td><td align="center">指定日志的详细程度,可能的值有:QUIET,FATAL,ERROR,INFO,VERNBOSE,DEBUG,DEBUG1,DEBUG2,DEBUG3,默认为INFO</td></tr><tr><td align="center">MACs [algorithms]</td><td align="center">指定sshd可以接受的数据校验算法(MACs hmac-sha1),多个算法之间使用逗号分隔</td></tr><tr><td align="center">MaxAuthTries [num]</td><td align="center">指定SSH登录允许的最大密码尝试数</td></tr><tr><td align="center">MaxStartups [num]</td><td align="center">指定允许同时并发的SSH链接数量,0表示没有限制,也可以是A:B:C形式,如10:50:20,表示如果达到10个并发链接,后面的连接有50%的概率被拒绝,如果达到20个并发连接,则后面的100%拒绝</td></tr><tr><td align="center">PasswordAuthentication [yesOrNo]</td><td align="center">是否允许密码登录,默认值为yes</td></tr><tr><td align="center">PermitEmptyPasswords [yesOrNo]</td><td align="center">指定是否允许空密码登录,默认为yes</td></tr><tr><td align="center">PermitRootLogin [yesOrNo]</td><td align="center">是否允许根用户登录,默认为yes,也可以设为prohibit-password,表示允许密钥登录root,但禁止密码登录</td></tr><tr><td align="center">PermitUserEnvironment [yesOrNo]</td><td align="center">是否允许sshd加载客户端的<del>&#x2F;.ssh&#x2F;environment文件和</del>&#x2F;.ssh&#x2F;authorized_keys文件里面的environment&#x3D;options 环境变量设置.默认值为no</td></tr><tr><td align="center">Port [num]</td><td align="center">指定sshd监听的端口,默认22,可以多次设置,监听多个端口</td></tr><tr><td align="center">PrintMoth [yesOrNo]</td><td align="center">指定用户登录后,是否向其展示系统的motd的信息文件&#x2F;etc&#x2F;motd,默认为yes</td></tr><tr><td align="center">Protocol [options]</td><td align="center">1表示使用SSH1协议,’1,2’表示支持两个版本的协议</td></tr><tr><td align="center">PubKeyAuthentication [yesOrNo]</td><td align="center">指定是否允许公钥登录,默认为yes</td></tr><tr><td align="center">QuietMode [yesOrNo]</td><td align="center">SSH1专用,yes表示日志只输出致命的错误信息</td></tr><tr><td align="center">RSAAuthentication [yesOrNo]</td><td align="center"></td></tr><tr><td align="center">ServerKeyBits [num]</td><td align="center">指定SSH1版本的密钥重新生成时的位数,默认为767</td></tr><tr><td align="center">StrictModes [yesOrNo]</td><td align="center">指定sshd是否检查用户的一些重要文件和目录权限,即对于用户的SSH配置文件,密钥文件和所在目录,SSH要求拥有者必须是根用户或用户本人,其他人的写权限必须关闭</td></tr><tr><td align="center">SyslogFacility [options]</td><td align="center">指定Syslog如何处理sshd日志,默认是AUTH</td></tr><tr><td align="center">TCPKeepAlive [unknown]</td><td align="center">指定打开sshd跟客户端tcp链接的keepalive参数</td></tr><tr><td align="center">UseDNS [yesOrNo]</td><td align="center">指定用户SSH登录一个域名时,服务器是否使用DNS,确认该域名对应的IP地址包含本机,建议关闭</td></tr><tr><td align="center">UserLogin [yesOrNo]</td><td align="center">指定用户认证内部是否使用&#x2F;user&#x2F;bin&#x2F;login代替SSH工具,默认为no</td></tr><tr><td align="center">UserPrivilegeSeparation</td><td align="center">指定用户认证通过后,使用另一个子线程处理用户权限相关的操作,这样利于提高安全性</td></tr><tr><td align="center">VerboseMode</td><td align="center">SSH2版本专用,指定日志输出详细的Debug信息</td></tr><tr><td align="center">X11Forwarding</td><td align="center">指定是否打开X window的转发,默认值为no</td></tr><tr><td align="center"><strong>sshd命令行配置项</strong></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-d</td><td align="center">用于显示debug信息</td></tr><tr><td align="center">-D</td><td align="center">指定sshd不作为后台守护进程运行</td></tr><tr><td align="center">-e</td><td align="center">将sshd写入系统日志syslog的内容导向标准错误</td></tr><tr><td align="center">-f [filePath]</td><td align="center">指定配置文件位置</td></tr><tr><td align="center">-h [filePath]</td><td align="center">指定密钥</td></tr><tr><td align="center">-o [Key Value]</td><td align="center">指定配置文件的一个配置项和对应的值,如:sshd -o “Port 2034”</td></tr><tr><td align="center">-p [num]</td><td align="center">指定sshd的服务端口</td></tr><tr><td align="center">-t</td><td align="center">检查配置文件语法是否正确</td></tr></tbody></table><h2 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h2><ul><li><code>scp [参数][原路径][目标路径]</code></li><li>它的底层是SSH协议,默认端口22,相当于先用ssh命令登陆远程主机,然后在执行拷贝,可以用于两个远程系统之间的复制</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>-1 强制scp命令使用协议ssh1<br>-2 强制scp命令使用协议ssh2<br>-4 强制scp命令只使用IPv4寻址<br>-6 强制scp命令只使用IPv6寻址<br>-B 使用批处理模式（传输过程中不询问传输口令或短语）<br>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）<br>-p 留原文件的修改时间，访问时间和访问权限。<br>-q 不显示传输进度条。<br>-r 递归复制整个目录。<br>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。<br>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。<br>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。<br>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。<br>-l limit 限定用户所能使用的带宽，以Kbit&#x2F;s为单位。<br>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，<br>-P port 注意是大写的P, port是指定数据传输用到的端口号<br>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p><p><font size=6><strong>sftp命令</strong></font><br><strong>简介</strong><br>sftp是ssh提供的一个客户端应用程序,主要用来安全地访问FTP。因为FTP是不加密协议,很不安全,sftp相当于将FTP放入SSH:<br><code>sftp username@hostname</code><br>进入sftp后,使用那些命令,如get获取远程文件,put上传文件等<br><font size=6><strong>端口转发</strong></font><br>(待建)可见<a href="https://wangdoc.com/ssh/port-forwarding.html">https://wangdoc.com/ssh/port-forwarding.html</a><br><font size=6><strong>证书登录</strong></font><br>(待建)可见<a href="https://wangdoc.com/ssh/ca.html">https://wangdoc.com/ssh/ca.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>gcc编译器及编译原理</title>
    <link href="/2020/12/19/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%8F%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2020/12/19/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%8F%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>预处理:</strong><code>g++ -E main.cpp -o main.ii</code>,-E表示只进行预处理。预处理主要是处理各种宏的展开;添加行号和文件标识符,为编译器产生调试信息提供便利;删除注释;保留编译器用到的编译器指令等<br><strong>编译:</strong><code>g++ -S main.ii -o main.s</code>,-S表示只编译。编译是在预处理的基础上经过一系列词法分析、语法分析及优化后生成汇编代码。<br><strong>汇编:</strong><code>g++ -c main.s -o main.o</code>,汇编将汇编代码转换为机器可执行的指令<br><strong>链接:</strong><code>g++ main.o</code>,链接生成可执行程序,之所以需要链接是因为我们的代码不可能像main.cpp这么简单,现代软件动则成百上千万行,如果写在一个main.cpp既不利于分工合作,也无法维护,因此通常是由一堆cpp文件组成,编译器分别编译每个cpp,这些cpp里会引用别的模块中的函数或全局变量,在编译单个cpp的时候是没法知道它们的准确地址,因此在编译结束后,需要连接器将各种还没有准确地址的符号(函数、变量等)设置为正确的值,这样组装在一起就可以形成一个完整的可执行程序</p><h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul><li><code>-l&lt;library&gt;</code> 链接动态库</li><li><code>-L&lt;dir&gt;</code> 动态库搜索目录</li><li><code>-D&lt;expression&gt;</code> 宏定义命令中定义</li><li><code>-I &lt;dir&gt;</code>头文件搜索目录</li><li><code>-isystem</code>specify the include path for system headers path</li></ul><h1 id="静态库编译和使用"><a href="#静态库编译和使用" class="headerlink" title="静态库编译和使用"></a>静态库编译和使用</h1><ul><li><code>gcc -c increase.c -o increase.o</code>把.c编译成.o</li><li><code>ar -r libincrease.a increase.o</code>归档成静态库.a</li><li><code>gcc main.c -L -static -o main</code>链接成可执行文件</li><li>环境变量：<code>LIBRARY_PATH</code>Specify the directories where search for static libraries .a at compile-time</li></ul><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p><code>g++ -O0 -g [-g3] &lt;program.cpp&gt; -o program gdb [--args] ./program &lt;args...&gt;</code></p><ul><li>-O0 Disable any code optimization for helping the debugger. It is implicit for most compilers</li><li>-g Enable debugging<ul><li>stores the symbol table information in the executable (mapping between assembly and source code lines)</li><li>for some compilers, it may disable certain optimizations</li><li>slow down the compilation phase and the execution</li></ul></li><li>-g3 Produces enhanced debugging information, e.g. macro definitions. Available for most compilers. Suggested instead of -g</li></ul><h1 id="动态库编译和使用"><a href="#动态库编译和使用" class="headerlink" title="动态库编译和使用"></a>动态库编译和使用</h1><ul><li><code>gcc -shared -fPIC -o libinc.so increase.c</code>-fPIC生成位置独立的代码,此类代码可以在不同进程间共享</li><li><code>gcc -lincrease -o main main.c</code>链接动态库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ source1.c -c source1.o -fPIC<br>g++ source2.c -c source2.o -fPIC<br>g++ source1.o source2.o -shared -o libmydynamiclib.so<br></code></pre></td></tr></table></figure></li><li>环境变量：<code>LD_LIBRARY_PATH</code>Specify the directories where search for dynamic&#x2F;shared libraries .dll at run-time</li></ul><h1 id="内存检查"><a href="#内存检查" class="headerlink" title="内存检查"></a>内存检查</h1><h2 id="fsanitize"><a href="#fsanitize" class="headerlink" title="-fsanitize"></a>-fsanitize</h2><p>基本比Valgrind工具更好</p><h3 id="address"><a href="#address" class="headerlink" title="address"></a>address</h3><p>memory error detector,Similar to valgrind but faster (50X slowdown)<br>• heap&#x2F;stack&#x2F;global out-of-bounds<br>• memory leaks<br>• use-after-free, use-after-return, use-after-scope<br>• double-free, invalid free<br>• initialization order bugs<br><code>clang++ -O1 -g -fsanitize=address -fno-omit-frame-pointer &lt;program&gt;</code></p><h3 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h3><p>a run-time memory leak detector<br><code>clang++ -O1 -g -fsanitize=leak -fno-omit-frame-pointer &lt;program&gt;</code></p><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p>is detector of uninitialized reads<br><code>clang++ -O1 -g -fsanitize=memory -fno-omit-frame-pointer &lt;program&gt;</code></p><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>a undefined behavior detector</p><ul><li>signed integer overflow, floating-point types overflow, enumerated not in range</li><li>out-of-bounds array indexing, misaligned address</li><li>divide by zero</li><li>etc.<br><code>clang++ -O1 -g -fsanitize=undefined -fno-omit-frame-pointer &lt;program&gt;</code></li></ul><h3 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h3><p>Checks for undefined or suspicious integer behavior (e.g. unsigned integer overflow)</p><h3 id="nullability"><a href="#nullability" class="headerlink" title="nullability"></a>nullability</h3><p>Checks passing null as a function parameter, assigning null to an lvalue, and returning null from a function</p><h1 id="Warn"><a href="#Warn" class="headerlink" title="Warn"></a>Warn</h1><ul><li><code>Wall</code>:Enables many standard warnings (∼50 warnings)</li><li><code>Wextra</code>:Enables some extra warning flags that are not enabled by -Wall (∼15 warnings)</li><li><code>Wpedantic</code>:Issue all the warnings demanded by strict ISO C&#x2F;C++</li></ul><h1 id="栈有关选项"><a href="#栈有关选项" class="headerlink" title="栈有关选项"></a>栈有关选项</h1><ul><li><code>-Wstack-usage=&lt;byte-size&gt;</code> Warn if the stack usage of a function might exceed byte-size. The computation done to determine the stack usage is conservative (no VLA)</li><li><code>fstack-usage</code> Makes the compiler output stack usage information for the<br>program, on a per-function basis</li><li><code>-Wvla</code> Warn if a variable-length array is used in the code</li><li><code>-Wvla-larger-than=&lt;byte-size&gt;</code> Warn for declarations of variable-length arrays whose size is either unbounded, or bounded by an argument that allows the array size to exceed byte-size bytes</li></ul><h2 id="FORTIFY-SOURCE"><a href="#FORTIFY-SOURCE" class="headerlink" title="_FORTIFY_SOURCE"></a>_FORTIFY_SOURCE</h2><p>Adding FORTIFY SOURCE define, the compiler provides buffer overflow checks for the<br>following functions:<br>memcpy , mempcpy , memmove , memset , strcpy , stpcpy , strncpy , strcat ,<br>strncat , sprintf , vsprintf , snprintf , vsnprintf , gets .</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span> <span class="hljs-comment">// std::memset</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span> <span class="hljs-comment">// std::stoi</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-type">int</span> size = std::<span class="hljs-built_in">stoi</span>(argv[<span class="hljs-number">1</span>]);<br><span class="hljs-type">char</span> buffer[<span class="hljs-number">24</span>];<br>std::<span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0xFF</span>, size);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc -O1 -D FORTIFY SOURCE program.cpp -o program<br>$ ./program 12 <span class="hljs-comment"># OK</span><br>$ ./program 32 <span class="hljs-comment"># Wrong</span><br>$ *** buffer overflow detected ***: ./program terminated<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文本处理瑞士军刀--小而强悍</title>
    <link href="/2020/11/21/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-%E5%B0%8F%E8%80%8C%E5%BC%BA%E6%82%8D/"/>
    <url>/2020/11/21/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-%E5%B0%8F%E8%80%8C%E5%BC%BA%E6%82%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="1-cat命令"><a href="#1-cat命令" class="headerlink" title="1. cat命令"></a>1. cat命令</h1><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-A</td><td align="center">用$表示每行的结尾,^I表示tab空格字符(是个判别空格和tab的方法)</td></tr><tr><td align="center">-n</td><td align="center">显示行号</td></tr><tr><td align="center">-s</td><td align="center">对于连续空行,只保留一行</td></tr></tbody></table><h2 id="1-1-cat用例"><a href="#1-1-cat用例" class="headerlink" title="1.1 cat用例"></a>1.1 cat用例</h2><p><code>cat &lt;&lt; END</code>接下来直到END之间的内容<br><code>cat &gt; foo.txt</code>快捷新建foo.txt并输入内容,以ctrl-D结束<br><code>cat &lt;&lt;&lt; filename</code>打印filename这个单词</p><h1 id="2-sort命令"><a href="#2-sort命令" class="headerlink" title="2. sort命令"></a>2. sort命令</h1><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-b</td><td align="center">忽略开头的空白字符,从第一个非空白字符进行排序</td></tr><tr><td align="center">-f</td><td align="center">让排序忽略大小写</td></tr><tr><td align="center">-n</td><td align="center">基于字符串的数值来排序,而不是字母值</td></tr><tr><td align="center">-r</td><td align="center">降序排序</td></tr><tr><td align="center">-k [field1],[field2]</td><td align="center">举例<code>-k 4,5</code>,根据[4,5]间的字符段对行进行排序,如果没有5,则只是根据第四个字符段进行行排序,字符段的分隔符默认为空,可以由-t来指定</td></tr><tr><td align="center">-t [char]</td><td align="center">定义域分割字符,默认为空格或制表</td></tr><tr><td align="center">-u</td><td align="center">去除比较相等的行,即便行内容不相等,如果比较结果相等(如只从第二个字符比较)改行也会被去除,</td></tr></tbody></table><h2 id="2-1-key选项的魅力"><a href="#2-1-key选项的魅力" class="headerlink" title="2.1 -key选项的魅力"></a>2.1 -key选项的魅力</h2><p><code>sort -k 1,1 -k 2n foo.txt</code>先按第一个字段按字符串排序,如果第一字段相等,再2n表示第二个字段用数值排序,n和sort选项一样表示数值排序,同样还可以指定b(忽略开头的空格),r(逆向排序)<br>考虑系列文本字段,如何以日期的格式降序排序呢</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>/<span class="hljs-number">30</span>/<span class="hljs-number">2008</span><br><span class="hljs-attribute">11</span>/<span class="hljs-number">25</span>/<span class="hljs-number">2008</span><br><span class="hljs-attribute">06</span>/<span class="hljs-number">19</span>/<span class="hljs-number">2008</span><br></code></pre></td></tr></table></figure><p>简单用如下命令:<br><code>sort -k 1.7nbr -k 1.1nbr -k 1.4nbr xx.txt</code>表示先从第一个字段第7个字符开始进行排序,如果相等,再比较第一个字符开始的第一个字段开始排序,再者第四个字符开始排序</p><h2 id="2-2-sort用例"><a href="#2-2-sort用例" class="headerlink" title="2.2 sort用例"></a>2.2 sort用例</h2><p><code>sort &gt; foo.txt</code>同cat一样只不过对你输入的内容进行排序,也是ctrl-d结束<br><code>sort file1.txt file2.txt file3.txt &gt; final_sorted.txt</code>对多个文件进行排序</p><h1 id="3-unique命令"><a href="#3-unique命令" class="headerlink" title="3. unique命令"></a>3. unique命令</h1><p>unique命令只能删除排好序的行,即是它只判断连续相等的行</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">输出所有重复行,并且每行开头显示重复次数</td></tr><tr><td align="center">-d</td><td align="center">只输所有出重复行</td></tr><tr><td align="center">-f [n]</td><td align="center">忽略每行开头的n个字段,字段之间由空格分割(不支持自定义)</td></tr><tr><td align="center">-i</td><td align="center">忽略大小写</td></tr><tr><td align="center">-s [n]</td><td align="center">跳过每行开头的n个字符</td></tr><tr><td align="center">-u</td><td align="center">只输出独有的文本,默认选项</td></tr></tbody></table><h1 id="4-cut命令"><a href="#4-cut命令" class="headerlink" title="4. cut命令"></a>4. cut命令</h1><p>cut 程序被用来从文本行 抽取文本，并把其输出到标准输出。能够接受多个文件参数或标准输入</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-b [num_list]</td><td align="center">从文本行中抽取由num_list定义的文本,这个列表可能有一个或多个逗号分隔开的数值区间组成</td></tr><tr><td align="center">-c [num_list]</td><td align="center">从文本行中抽取由num_list定义的文本,这个列表可能有一个或多个逗号分割开的数值区间组成</td></tr><tr><td align="center">-f [num_list]</td><td align="center">从文本行中抽取一个或多个由num_list定义的字段。这个列表可能包括一个或多个字段,或由逗号分割开的字段区间</td></tr><tr><td align="center">-d [delim_char]</td><td align="center">指定字段分隔符,默认情况下,由单个tab字符分隔开</td></tr><tr><td align="center">–complement</td><td align="center">抽取整个文本行，除了那些由-c或-f选项指定的文本</td></tr></tbody></table><p>选项中各个list列表格式如下:<br>N     从第1个开始数的第N个字节、字符或域<br>N-    从第N个开始到所在行结束的所有字符、字节或域<br>N-M   从第N个开始到第M个之间(包括第M个)的所有字符、字节或域<br>-M    从第1个开始到第M个之间(包括第M个)的所有字符、字节或域</p><h1 id="5-paste命令"><a href="#5-paste命令" class="headerlink" title="5. paste命令"></a>5. paste命令</h1><p>格式:<code>paste [file1] [file2]</code>,在file1每行后添加file2中对应行内容,默认使用制表符分割两个文件的内容,可以用-d选项指定分割符</p><h1 id="6-join命令"><a href="#6-join命令" class="headerlink" title="6. join命令"></a>6. join命令</h1><p>与paste类似,但是它对文件有一个要求,每个文件对应行,都有相同的字段(默认为空白分割符),效果如下图:</p><p>|A文本|B文本|结果|<br>|John 20|John man|John 20 man|<br>|May 15|May woman|May 15 woman|<br>|Mike 33|Mike man|Mike 33 man|</p><p>各种设置有待研究</p><h1 id="7-comm命令"><a href="#7-comm命令" class="headerlink" title="7. comm命令"></a>7. comm命令</h1><p>comm比较两个文本文件,会产生三列输出,第一列包含第一个文件独有的文本行,第二列包含第二个文本行独有的,第三列,两个文本共有的,-n选项会隐藏第n列的内容,n只有三个数字选择1,2,3</p><h1 id="8-diff命令"><a href="#8-diff命令" class="headerlink" title="8. diff命令"></a>8. diff命令</h1><p>格式:<code>diff &lt;options&gt; [old file] [new file]</code><br>diff默认输出如何使第一个文件变成第二个文件<br>常用选项-c,-u选项</p><h1 id="10-patch命令"><a href="#10-patch命令" class="headerlink" title="10. patch命令"></a>10. patch命令</h1><p>patch程序被用来把更改应用到文本文件中。它接受从diff程序的输出,并且通常被用来把较老的文件转变为较新的文件,注意不一定要指定文件名,因为diff信息中已经有了文件信息</p><h1 id="11-tr命令"><a href="#11-tr命令" class="headerlink" title="11. tr命令"></a>11. tr命令</h1><p>选项:<code>tr [选项] [set1] [set2]</code><br>tr用来更改字符(只能从标准输出中接受数据),把一个字母换成另一个字母<br>set1,set2是下列选项之一:</p><ol><li>一个枚举列表,例如:ABSCKAL</li><li>一个字符域:A-Z,a-z</li><li>POSIX字符类:[:upper:]<br><font color=#FF0000>注意:set1和set2字符集长度相同,一对一,但是,也有多对一,把所有符合字符换成同一个字符</li></ol><h2 id="11-1-tr例子"><a href="#11-1-tr例子" class="headerlink" title="11.1 tr例子"></a>11.1 tr例子</h2><p>1.<code>tr -d &#39;\r&#39; dos_file &gt; unix_file</code>把dos_file的换行符删除<br>2.<code>echo &quot;aabbbbccc&quot; | tr -s ab</code>挤压重复字符,这个结果为”abccc”<br>但如果是<code>echo &quot;abcabcabc&quot; | tr -s ab</code>结果不变<br>3.<code>seq 1 2 9 | paste -sd,</code>paste的神奇用法</p><h1 id="12-expand"><a href="#12-expand" class="headerlink" title="12. expand"></a>12. expand</h1><ul><li><code>expand [选项] [文件]</code></li><li>将文件中的制表符（Tab）替换为空格</li></ul><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-t NUM</code></td><td align="center">指定每个制表符替换为<code>NUM</code>个空格</td></tr><tr><td align="center"><code>-t LIST</code></td><td align="center">自定义制表符位置（例如<code>-t 2,4,8</code>表示在第 2、4、8 列设置制表符）。</td></tr><tr><td align="center"><code>-i</code></td><td align="center">仅替换行首的制表符(忽略行中的制表符)</td></tr><tr><td align="center"><code>--help</code></td><td align="center"></td></tr><tr><td align="center"><code>--version</code></td><td align="center"></td></tr></tbody></table><h1 id="13-unexpand"><a href="#13-unexpand" class="headerlink" title="13. unexpand"></a>13. unexpand</h1><p>expand的相反命令</p><h1 id="14-split"><a href="#14-split" class="headerlink" title="14. split"></a>14. split</h1><ul><li><code>split [选项] [输入文件] [输出文件前缀]</code></li><li>用于将大文件拆分</li></ul><table><thead><tr><th align="center">选项</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center"><code>-b SIZE</code></td><td align="center">按大小分割文件（例如<code>-b</code>100M 表示每部分 100MB）</td></tr><tr><td align="center"><code>-l NUM</code></td><td align="center"></td></tr><tr><td align="center"><code>-a LENGTH</code></td><td align="center">指定后缀长度（例如<code>-a 3</code>表示使用 3 位字母后缀，如<code>xaaa、xaab</code>）</td></tr><tr><td align="center"><code>-d</code></td><td align="center">使用数字后缀而非字母</td></tr><tr><td align="center"><code>--verbose</code></td><td align="center"></td></tr><tr><td align="center"><code>--help</code></td><td align="center"></td></tr><tr><td align="center"><code>--version</code></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>grep与正则表达式</title>
    <link href="/2020/11/20/grep%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/11/20/grep%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>格式:<code>grep [options] [regex] [file...]</code></p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-i</td><td align="center">忽略大小写</td></tr><tr><td align="center">-v</td><td align="center">打印不匹配的文本行</td></tr><tr><td align="center">-c</td><td align="center">只打印匹配或不匹配(-v选项)的行数</td></tr><tr><td align="center">-l</td><td align="center">打印包含匹配项的文件名,而不是文本行本身</td></tr><tr><td align="center">-L</td><td align="center">相似于-l项,但是只是打印不包含匹配项的文件名</td></tr><tr><td align="center">-n</td><td align="center">在每个匹配行之前打印出相应的行号</td></tr><tr><td align="center">-w</td><td align="center">只识别整个单词(即模式前后有空格)</td></tr><tr><td align="center">-E</td><td align="center">识别扩展正则表达式</td></tr><tr><td align="center">-F</td><td align="center">忽略字符中的元字符</td></tr><tr><td align="center">-r</td><td align="center">递归对某个目录的所有文件</td></tr><tr><td align="center">-I</td><td align="center">等价于-binary-files&#x3D;without-match,不匹配二进制</td></tr><tr><td align="center">-exclude-dir&#x3D;[目录路径]</td><td align="center">跳过某个目录</td></tr><tr><td align="center">–binary-files&#x3D;without-match</td><td align="center">二进制文件不匹配</td></tr></tbody></table><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="正则表达式的元字"><a href="#正则表达式的元字" class="headerlink" title="正则表达式的元字"></a>正则表达式的元字</h2><table><thead><tr><th align="center">特殊字符</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center"><code>.</code></td><td align="center">匹配除换行符外的任一单字符。在awk中,句点也能匹配换行符</td></tr><tr><td align="center"><code>*</code></td><td align="center">匹配任一个(包括零个)在它面前的字符(包括由正则表达式指定的字符)</td></tr><tr><td align="center"><code>[...]</code></td><td align="center">匹配方括号中的字符类中的任意一个。如果方括号中第一个字符为脱字符号(^),则表示否定匹配,即匹配除了换行符和类中列出的那些字符以外的所有字符。在awk中,也匹配换行符。连字符(-)用于表示字符的范围(可以连续用如[A-Za-z0-9])。如果类中的第一个字符为右方括号(])则表示它是类的成员＝所有其他的元字符在被指定为类中的成员时都会失去它们原来的含义</td></tr><tr><td align="center"><code>^</code></td><td align="center">如果作为正则表达式的第一个字符,则表示匹配行的开始。在awk中匹配字符串的开始,即使字符串包含嵌入的换行符</td></tr><tr><td align="center"><code>$</code></td><td align="center">如果作为正则表达式的最后一个字符,则表示匹配行的结尾。在awk中匹配字符串的结尾,即使字符串包含嵌入的换行符。</td></tr><tr><td align="center"><code>\&#123;n,m\&#125;</code></td><td align="center">匹配它前面某个范围内单个字符出现的次数(包括由正则表达式指定的字符)。<code>\&#123;n\&#125;</code>将匹配n次出现,<code>\&#123;n,\&#125;</code>至少匹配n次出现,而且<code>\&#123;n,m\&#125;</code>匹配n和m之间任意次的出现</td></tr><tr><td align="center"><code>\</code></td><td align="center">转义随后的特殊字符</td></tr></tbody></table><h2 id="POSIX字符类"><a href="#POSIX字符类" class="headerlink" title="POSIX字符类"></a>POSIX字符类</h2><p>POSIX是标准,通用于其它shell命令,不仅仅是正则,并且只能出现在中括号中,就是说应该这么写<code>[[:alnum:]]</code></p><table><thead><tr><th align="center">类</th><th align="center">打印字符</th></tr></thead><tbody><tr><td align="center">[:alnum:]</td><td align="center">字母数字字符,等价于[A-Za-z0-9]</td></tr><tr><td align="center">[:word:]</td><td align="center">与[:alnum:]相同,但增加了下划线字符</td></tr><tr><td align="center">[:alpha:]</td><td align="center">字母字符</td></tr><tr><td align="center">[:blank:]</td><td align="center">空格和制表符</td></tr><tr><td align="center">[:cntrl:]</td><td align="center">控制字符,0~31和127的ASCII字符</td></tr><tr><td align="center">[:digit:]</td><td align="center">数字字符0~9</td></tr><tr><td align="center">[:graph:]</td><td align="center">可打印和可见的(非空格)字符,33-126的ASCII</td></tr><tr><td align="center">[:lower:]</td><td align="center">小写字符</td></tr><tr><td align="center">[:upper:]</td><td align="center">大写字符</td></tr><tr><td align="center">[:print:]</td><td align="center">可打印的字符(包括空白字符)</td></tr><tr><td align="center">[:punct:]</td><td align="center">标点符号字符,在 ASCII 中, 等 价 于:&#96;-!”#$%&amp;’()*+,.&#x2F;:;&lt;&#x3D;&gt;?@[\]_‘</td></tr><tr><td align="center">[:space:]</td><td align="center">空白字符,包括空格,tab,回车,换行,vertical tab和form feed,在ASCII中,等价于:[\t\r\n\v\f]</td></tr><tr><td align="center">[:xdigit:]</td><td align="center">十六进制数字</td></tr></tbody></table><h2 id="扩展的元字符"><a href="#扩展的元字符" class="headerlink" title="扩展的元字符"></a>扩展的元字符</h2><table><thead><tr><th align="center">特殊字符</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">匹配前面的正则表达式的一次或多次出现</td></tr><tr><td align="center"><code>?</code></td><td align="center">匹配前面的正则表达式的零次或一次出现</td></tr><tr><td align="center"><code>|</code></td><td align="center">逻辑表达或,指定可以匹配前面的或后面的正则表达式</td></tr><tr><td align="center"><code>()</code></td><td align="center">对正则表达式分组,如&#96;^(bz</td></tr><tr><td align="center"><code>&#123;n,m&#125;</code></td><td align="center">匹配它前面某个范围内单个字符出现的次数,与基本元字符的一样</td></tr><tr><td align="center"><code>\w</code></td><td align="center">和任何可以做单词组成成分的字符匹配(字母下划线数字)</td></tr><tr><td align="center"><code>\W</code></td><td align="center">和任何不能做单词组成成分的字符匹配</td></tr><tr><td align="center"><code>\&lt;</code></td><td align="center">和一个单词开头的空字符串匹配</td></tr><tr><td align="center"><code>\&gt;</code></td><td align="center">和一个单词末尾的空字符串匹配</td></tr><tr><td align="center"><code>\y</code></td><td align="center">和一个单词开头的空字符串或末尾的空字符串匹配（单词边界）,这适用于awk</td></tr><tr><td align="center"><code>\b</code></td><td align="center">同上，除了awk的其他软件</td></tr><tr><td align="center"><code>\B</code></td><td align="center">匹配非单词边界。er\B 能匹配 verb 中的 er，但不能匹配 never 中的 er。</td></tr><tr><td align="center"><code>\d</code></td><td align="center">匹配数字：[0-9]</td></tr><tr><td align="center"><code>\D</code></td><td align="center">匹配非数字</td></tr><tr><td align="center"><code>\s</code></td><td align="center">匹配所有空格字符，等价于<code>[\t\n\f\r\p&#123;Z&#125;]</code></td></tr><tr><td align="center"><code>\S</code></td><td align="center">匹配所有非空格字符</td></tr><tr><td align="center"><code>p</code></td><td align="center">匹配 CR&#x2F;LF（等同于 \r\n），用来匹配DOS行终止符</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">和在缓冲区开始处的空字符串匹配</td></tr></tbody></table><h2 id="零宽度断言"><a href="#零宽度断言" class="headerlink" title="零宽度断言"></a>零宽度断言</h2><table><thead><tr><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">?&#x3D;</td><td align="center">正先行断言-存在</td></tr><tr><td align="center">?!</td><td align="center">负先行断言-排除</td></tr><tr><td align="center">?&lt;&#x3D;</td><td align="center">正后发断言-存在</td></tr><tr><td align="center"><code>?&lt;!</code></td><td align="center">负后发断言-排除</td></tr></tbody></table><h2 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h2><table><thead><tr><th align="center">标志</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">忽略大小写。</td></tr><tr><td align="center">g</td><td align="center">全局搜索。</td></tr><tr><td align="center">m</td><td align="center">多行修饰符：锚点元字符 ^ $ 工作范围在每行的起始。</td></tr></tbody></table><h2 id="grep应用举例"><a href="#grep应用举例" class="headerlink" title="grep应用举例"></a>grep应用举例</h2><ul><li>打印匹配前后5行:<code>grep -5 &#39;pattern&#39; inputfile</code> </li><li>打印匹配后5行:<code>grep -A 5 &#39;pattern&#39; inputfile</code></li><li>打印匹配前5行:<code>grep -B 5 &#39;pattern&#39; inputfile</code></li><li>打印匹配前5行:<code>grep -i &#39;pattern&#39; inputfile</code></li><li>提取w1和w2两个中间的文字:<code>grep -o -P &#39;(?&lt;=w1).*(?=w2)&#39;</code></li><li>查找一个单词出现的次数:<code>grep -o bbo filename |wc -l</code></li><li>查找括号之间的字符:<code>grep -oP &#39;\(\K[^\)]+&#39;</code></li></ul><h2 id="正则表达式举例"><a href="#正则表达式举例" class="headerlink" title="正则表达式举例"></a>正则表达式举例</h2><ul><li>引号中的任意字符串: <code>&quot;.*&quot;</code></li><li>邮箱：<code>^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$</code></li><li>中国大陆手机号：<code>^1[3-9][[:digit:]]\&#123;9\&#125;$</code></li><li>匹配任意域名：<code>^((http:\/\/)|(https:\/\/))?([a-zA-Z0-9]([a-zA-Z0-9\-]&#123;0,61&#125;[a-zA-Z0-9])?\.)+[a-zA-Z]&#123;2,6&#125;(\/)</code></li><li>匹配IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.)&#123;3&#125;(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></li><li>汉字：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li><li>整数：<code>^-?[1-9]\d*$</code></li><li>浮点数：<code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li><li>身份证号：<code>^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$</code></li><li>军官证：<code>^[\u4E00-\u9FA5](字第)([0-9a-zA-Z]&#123;4,8&#125;)(号?)$</code></li><li>护照：<code>^([a-zA-z]|[0-9])&#123;5,17&#125;$</code></li><li>港澳通行证：<code>^([A-Z]\d&#123;6,10&#125;(\(\w&#123;1&#125;\))?)$</code></li><li>台湾通行证：<code>^\d&#123;8&#125;|^[a-zA-Z0-9]&#123;10&#125;|^\d&#123;18&#125;$</code></li><li>强密码：<code>^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$</code></li><li>火车车次：<code>^[GCDZTSPKXLY1-9]\d&#123;1,4&#125;$</code></li><li>url：<code>^[a-zA-Z]+:\/\/</code></li><li>Mac地址：<code>^([0-9a-fA-F][0-9a-fA-F]:)&#123;5&#125;([0-9a-fA-F][0-9a-fA-F])$</code></li><li>传真号码：<code>^(([0\+]\d&#123;2,3&#125;-)?(0\d&#123;2,3&#125;)-)(\d&#123;7,8&#125;)(-(\d&#123;3,&#125;))?$</code></li><li>手机号码：<code>^1[34578]\d&#123;9&#125;$</code></li><li>md5格式32位：<code>^[a-f0-9]&#123;32&#125;$</code></li><li>ipv4：<code>(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))&#123;3&#125;</code></li><li>ipv6：<code>(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9]))</code></li><li>email：<code>^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$</code></li><li>十六进制颜色：<code>^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$</code></li><li>版本号：<code>^\d+(?:\.\d+)&#123;2&#125;$</code></li><li>车牌号：<code>^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z](?:((\d&#123;5&#125;[A-HJK])|([A-HJK][A-HJ-NP-Z0-9][0-9]&#123;4&#125;))|[A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9挂学警港澳])$</code></li><li>中国邮政编码：<code>[1-9]\d&#123;5&#125;(?!\d)</code></li><li>迅雷连接：<code>^thunderx?:\/\/[a-zA-Z\d]+=$</code></li><li>ed2k连接：<code>^ed2k:\/\/\|file\|.+\|\/$</code></li><li>磁力连接：<code>^magnet:\?xt=urn:btih:[0-9a-fA-F]&#123;40,&#125;.*$</code></li><li>html标记：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*?/&gt;</code></li><li>html注释：<code>&lt;!--(.*?)--&gt;</code></li></ul><h1 id="超强的grep替代品"><a href="#超强的grep替代品" class="headerlink" title="超强的grep替代品"></a>超强的grep替代品</h1><ul><li>ripgrep</li><li>hypergrep</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>归档和备份命令</title>
    <link href="/2020/11/19/%E5%BD%92%E6%A1%A3%E5%92%8C%E5%A4%87%E4%BB%BD%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/19/%E5%BD%92%E6%A1%A3%E5%92%8C%E5%A4%87%E4%BB%BD%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>格式:<code>gzip [选项] [file]</code>,注意这不会保留原文件,默认输出为原文件加’.gz’后,同样解压缩也不会保留原压缩文件,注意只能对文件而不能对文件夹压缩,要走出这个误区</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">把输出写入到标注输出,并保留原始文件,注意要生成压缩文件,必须重定向到一个文件,这个选项就是这么令人费解</td></tr><tr><td align="center">-d</td><td align="center">解压缩,等价于gunzip</td></tr><tr><td align="center">-f</td><td align="center">强制压缩,即使原始文件已经被压缩</td></tr><tr><td align="center">-h</td><td align="center">显示用法信息</td></tr><tr><td align="center">-k</td><td align="center">保留原文件</td></tr><tr><td align="center">-l</td><td align="center">列出每个被压缩文件的压缩数据</td></tr><tr><td align="center">-r</td><td align="center">若命令的一个或多个参数是目录,则递归地压缩目录中的文件</td></tr><tr><td align="center">-t</td><td align="center">测试压缩文件的完整性</td></tr><tr><td align="center">-v</td><td align="center">显示压缩过程的信息</td></tr><tr><td align="center">-[number]</td><td align="center">设置压缩指数,[number]为1(最快,最小压缩)到9(最慢,最大压缩),默认为6</td></tr></tbody></table><p><strong>例子:</strong><br><code>gunzip -c foo.txt.gz | less</code>这可以不解压直接查看内容</p><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><p>bzip2程序程序和gzip一样,但是不支持<code>-r</code>递归选项,同时它压缩率更大,速度更慢</p><h2 id="归档tar"><a href="#归档tar" class="headerlink" title="归档tar"></a>归档tar</h2><p>.tar为普通的tar包,.tgz为压缩过的tar包<br>格式:<code>tar [options] [destination] [target]</code></p><table><thead><tr><th align="center">options</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">c</td><td align="center">Create创建新归档文件,存在则覆盖</td></tr><tr><td align="center">t</td><td align="center">Table列表,磁带文件名列表</td></tr><tr><td align="center">d</td><td align="center">磁带与文件系统的不同</td></tr><tr><td align="center">r</td><td align="center">添加文件至磁带末尾</td></tr><tr><td align="center">u</td><td align="center">只添加更新的文件</td></tr><tr><td align="center">x</td><td align="center">extract抽取,抽取文件</td></tr><tr><td align="center">v</td><td align="center">verbose冗长</td></tr><tr><td align="center">f</td><td align="center">必须指定归档文件名,必须包含该选项</td></tr><tr><td align="center">z</td><td align="center">gzip算法压缩</td></tr><tr><td align="center">j</td><td align="center">bzip2算法压缩</td></tr></tbody></table><p><code>--wildcards</code><br>提取某个文件而不是全部(见例子)时一般不支持文件通配符,可通过–wildcards来支持,如:<br><code>tar xf xx.tar --wildcards &#39;home/me/dir-\*/file&#39;</code><br><code>--file-from(-T)</code><br>这个选项导致tar命令从一个文件而不是命令行来读入它的路径名列表,可以是标准输入,例如:<br><code>find ~ -name &#39;file-A&#39;| tar cf - --files-from= -| gzip &gt;playground.tgz</code><br>注意上面这个例子中第一个’-‘表示标准输出,第二个则是标准输入(广泛用于其他程序),上面可以不用第二个管道,直接加个z选项即可,如下:<br><code>find playground -name &#39;file-A&#39; | tar czf playground.tgz -T -</code></p><h4 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h4><p><code>tar cvf my.tar *.[ch] makefile</code>不压缩创建<br><code>tar xvf tar_file -C destination_direectory</code>提取文件至指定文件夹<br><code>tar xf my.tar home/file</code>只提取归档文件某一文件(前提归档文件里必须有)</p><h2 id="归档和压缩二合一"><a href="#归档和压缩二合一" class="headerlink" title="归档和压缩二合一"></a>归档和压缩二合一</h2><ul><li>格式:<code>zip [options] [destination] [origin]</code></li><li>对于目录必须加-r选项,否则只是空目录,它最优化决定是否压缩文件</li><li>对于中文字符无法显示：<code>unzip -O GB18030 XXX.zip</code></li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="-@选项"></a>-@选项</h3><p>用来接受从标准输入的列表,例:<br><code>find playground -name &quot;fileA&quot; | zip -@ file-A.zip</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><p><code>unzip -l playground.zip playground/fileA</code>列出指定一个文件夹<br><code>unzip playground.zip playground/fileA</code>提取指定一个文件夹</p><h2 id="同步rsync"><a href="#同步rsync" class="headerlink" title="同步rsync"></a>同步rsync</h2><p>格式:<code>rsync [options] [source] [destination]</code><br>rsync会比较两者差异,最小化的复制修改以同步<br>这里source和destination是下列选项之一:<br>·一个本地文件或目录<br>·一个远端文件或目录,以[user@]host:path的形式存在<br>·一个远端rsync服务器,由rsync:&#x2F;&#x2F;[user@]host[:port]&#x2F;path指定<br>source和destination至少有一个本地文件,不支持远端到远端</p><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><h4 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h4><p>rsync默认使用ssh协议,如果想传递ssh命令的附加参数,必须使用-e选项,如:<br><code>rsync -av -e &#39;ssh -p 2234&#39; source/ user@remote_host:/destination</code></p><h4 id="rsync协议"><a href="#rsync协议" class="headerlink" title="rsync协议"></a>rsync协议</h4><p>如果另一台服务器安装并运行了rsync守护程序,则可以用该协议(默认端口873),具体写法是服务器与目标目录间使用冒号分割:<br><code>rsync -av source/ 192.168.122.32::module/destination</code><br>上面地址中的module并不是实际路径名,而是rsync守护程序指定的一个资源名,由管理员分配。<br>如果想知道rsync守护程序分配的所有module列表,可以执行下面命令:<br><code>rsync rsync://192.168.122.32</code><br>除了双冒号,也可以直接使用rsync:&#x2F;&#x2F;协议指定地址:<br><code>rsync -av source/ rsync://192.168.122.32/module/destination</code></p><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>除了源目录与目标目录直接比较,rsync还支持使用基准目录,即将源目录与基准目录之间变动的部分,同步到目标目录。<br>具体做法,第一次同步是全量备份,所有文件在基准目录里同步一份。以后每一次同步都是增量备份,只同步源目录与基准目录之间有变动的部分,将这部分保存在一个新的目标目录。这个新的目标目录之中,也是包含所有文件,但实际上,只有那些变动过的文件是存在于该目录,其他没有变动的文件都是指向基准目录文件的硬链接。<br>–link-dest参数用来指定同步时的基准目录:<br><code>rsync -a --delete --link-dest /compare/path source/path /target/path</code><br>下面是个备份用户的主目录脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -o errexit<br><span class="hljs-built_in">set</span> -o nounset<br><span class="hljs-built_in">set</span> -o pipefail<br><br><span class="hljs-built_in">readonly</span> SOURCE_DIR=<span class="hljs-string">&quot;<span class="hljs-subst">$(HOME)</span>&quot;</span><br><span class="hljs-built_in">readonly</span> BACKUP_DIR=<span class="hljs-string">&quot;/mnt/data/backups&quot;</span><br><span class="hljs-built_in">readonly</span> DATETIME=<span class="hljs-string">&quot;<span class="hljs-subst">$(date &#x27;+%Y-%m-%d_%H:%M:%S&#x27;)</span>&quot;</span><br><span class="hljs-built_in">readonly</span> BACKUP_PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>&quot;</span><br><span class="hljs-built_in">readonly</span> LATEST_LINK=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/latest&quot;</span><br><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>&quot;</span><br><br>rsync -av --delete \<br><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SOURCE_DIR&#125;</span>/&quot;</span> \<br>--link-dest <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LATEST_LINK&#125;</span>&quot;</span> \<br>--exclude=<span class="hljs-string">&quot;.cache&quot;</span> \<br><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP_PATH&#125;</span>&quot;</span><br><br><span class="hljs-comment">#注意删除硬链接,只有最后为1时,才真正删除,因为i真正备份里有个指向链接,所以不会删除真正的文件</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LATEST_LINK&#125;</span>&quot;</span><br><span class="hljs-comment">#注意下面是软连接,也就是说基准文件为最新的备份文件</span><br><span class="hljs-comment">#我的疑惑,为啥非要用中间目录,直接比较不行吗?不是脱裤放屁吗?</span><br><span class="hljs-built_in">ln</span> -s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP_PATH&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LATEST_LINK&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">不仅递归同步,还可以同步元信息(比如修改时间、权限等),软连接也会同步过去</td></tr><tr><td align="center">–append</td><td align="center">参数指定文件接着上次中断的地方,继续传输</td></tr><tr><td align="center">–append-verify</td><td align="center">与–append参数类似,但会对传输完成后的文件进行一次校验,如果校验失败,将重新发送整个文件</td></tr><tr><td align="center">-b</td><td align="center">指定在删除或更新目标目录已经存在的文件时,将该文件更名后进行备份,默认行为是删除。更名规则是由–suffix参数指定的文件后缀名,默认是’~‘</td></tr><tr><td align="center">–backup-dir</td><td align="center">参数指定文件备份时存放的目录,比如<code>--backup-dir=/path/to/backups</code></td></tr><tr><td align="center">–bwlimit</td><td align="center">参数指定带宽限制,默认是kb&#x2F;s,比如<code>--bwlimit=100</code></td></tr><tr><td align="center">-c</td><td align="center">默认情况下,rsync只检查文件的大小和最后修改日期是否发生变化,如果发生变化,就重新传输,使用这个参数以后,则通过判断文件内容的校验和,决定是否重新传输</td></tr><tr><td align="center">-delete</td><td align="center">参数删除只存在与目标目录,不存在于源目标文件,即保证目标目录是源目标的镜像</td></tr><tr><td align="center">-e</td><td align="center">参数指定使用SSH协议传输数据</td></tr><tr><td align="center">–exclude</td><td align="center">指定排除不进行同步的文件,详细用法见下</td></tr><tr><td align="center">–exclude-from</td><td align="center">参数指定一个本地文件,里面是需要排除的文件模式,每个模式一行</td></tr><tr><td align="center">–existing、–ignore-non-existing</td><td align="center">参数表示不同步目标目录中不存在的文件和目录</td></tr><tr><td align="center">-h</td><td align="center">略</td></tr><tr><td align="center">-i</td><td align="center">参数表示输出源目录与目标目录之间文件差异详细情况</td></tr><tr><td align="center">–ignore-existing</td><td align="center">参数表示只要该文件在目标目录中已经存在,就跳过去,不再同步这些文件</td></tr><tr><td align="center">–include</td><td align="center">一般与–exclude结合使用,同步时要包括的文件</td></tr><tr><td align="center">–link-dest</td><td align="center">参数指定增量备份的基准目录</td></tr><tr><td align="center">-m</td><td align="center">指定不同步空目录</td></tr><tr><td align="center">–max-size</td><td align="center">参数设置传输的最大文件的大小限制,比如不超过200kb<code>--max-size=&#39;200k&#39;</code></td></tr><tr><td align="center">–min-size</td><td align="center">参数设置传输的最大文件的大小限制,比如不小于200kb<code>--min-size=&#39;200k&#39;</code></td></tr><tr><td align="center">-n</td><td align="center">模拟将要执行的操作,而不真的执行,配合-v参数使用看哪些内容同步过去</td></tr><tr><td align="center">-P</td><td align="center">–progress和–partial这两个参数的结合</td></tr><tr><td align="center">–partial</td><td align="center">允许恢复中断中断的传输。不使用该参数时,rsync会删除传输到一般被打断的文件,使用该参数后,传输到一般的文件也会同步到目标目录,下次同步时再恢复中断的传输,一般要与–append或–append-verify配合使用</td></tr><tr><td align="center">–partial-dir</td><td align="center">参数指定将传输到一半的文件保存到一个临时目录,比如<code>--partial-dir=rsync-partial</code>,一般要与–append或–append-verify配合使用</td></tr><tr><td align="center">–progress</td><td align="center">表示显示进度</td></tr><tr><td align="center">-r</td><td align="center">表示递归</td></tr><tr><td align="center">–remove-source-files</td><td align="center">表示传输成功后,删除源文件</td></tr><tr><td align="center">–size-only</td><td align="center">表示只同步大小有变化的文件,不考虑文件修改时间的的差异</td></tr><tr><td align="center">–suffix</td><td align="center">参数指定文件名备份时,对文件名添加的后缀,默认是~</td></tr><tr><td align="center">-u</td><td align="center">表示同步时跳过目标目录中修改时间更新的文件,即不同步这些有更新的时间戳文件</td></tr><tr><td align="center">-v,-vv,-vvv</td><td align="center">表示输出细节,v越多越详细</td></tr><tr><td align="center">–version</td><td align="center">略</td></tr><tr><td align="center">-z</td><td align="center">指定同步时压缩数据</td></tr></tbody></table><h4 id="–exclude和–include参数示范"><a href="#–exclude和–include参数示范" class="headerlink" title="–exclude和–include参数示范"></a>–exclude和–include参数示范</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -av --exclude=<span class="hljs-string">&#x27;*.txt&#x27;</span> <span class="hljs-built_in">source</span>/ destination<br>rsync -av --exclude <span class="hljs-string">&#x27;*.txt&#x27;</span> <span class="hljs-built_in">source</span>/ destination<br>rsync -av --exclude <span class="hljs-string">&#x27;file.txt&#x27;</span> --exclude <span class="hljs-string">&#x27;dir1/*&#x27;</span> <span class="hljs-built_in">source</span>/ destination<br>rsync -av --exclude=&#123;<span class="hljs-string">&#x27;file1.txt&#x27;</span>,<span class="hljs-string">&#x27;dir1/*&#x27;</span>&#125; <span class="hljs-built_in">source</span>/ destination<br>rsync -av --exclude-from=<span class="hljs-string">&#x27;exclude-file.txt&#x27;</span> <span class="hljs-built_in">source</span>/ destination<br>rsync -av --include=<span class="hljs-string">&quot;*.txt&quot;</span> --exclude=<span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">source</span>/ destination<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Find命令</title>
    <link href="/2020/11/18/Find%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/18/Find%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>1.<strong>格式</strong><br>find &lt;范围&gt; &lt;条件&gt; &lt;动作&gt;<br>2.<strong>查询表</strong></p><table><thead><tr><th align="center">测试条件</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-cmin [num]</td><td align="center">匹配文件的最后修改时间正好在[num]分钟之前</td></tr><tr><td align="center">-cnewer [fileName]</td><td align="center">匹配文件的最后修改时间晚于file的文件或目录</td></tr><tr><td align="center">-ctime [num]</td><td align="center">匹配文件的最后修改时间在num*24小时之前</td></tr><tr><td align="center">-empty</td><td align="center">匹配空文件和目录</td></tr><tr><td align="center">-group [groupName]</td><td align="center">匹配属于一个组的文件</td></tr><tr><td align="center">-iname [pattern]</td><td align="center">与-name一样，但是不区分大小写</td></tr><tr><td align="center">-inum [nodeId]</td><td align="center">匹配inode号是[nodeId]的文件,可用来查找硬链接</td></tr><tr><td align="center">-mmin [num]</td><td align="center">匹配内容修改于[num]分钟之前</td></tr><tr><td align="center">-mtime [num]</td><td align="center">匹配内容修改于[num*24]小时之前</td></tr><tr><td align="center">-name [pattern]</td><td align="center">用指定的通配符模式匹配文件名</td></tr><tr><td align="center">-newer [file]</td><td align="center">匹配晚于[file]的文件</td></tr><tr><td align="center">-newerct [yyyy-mm-dd HH:mm:ss]</td><td align="center">创建晚于某个时间,详见man</td></tr><tr><td align="center">-nouser</td><td align="center">匹配不属于一个有效用户的文件</td></tr><tr><td align="center">-nogroup</td><td align="center">匹配不属于一个有效组的文件</td></tr><tr><td align="center">-perm [mode]</td><td align="center">匹配权限设置为[mode]的文件,mode可用八进制或符号</td></tr><tr><td align="center">-samefile [filename]</td><td align="center">类似于-inum测试条件,匹配和文件[fileName]享有同样inode号的文件</td></tr><tr><td align="center">-size [num]</td><td align="center">匹配大小为[num]的文件,数字后加单位,详情见其他表</td></tr><tr><td align="center">-type [fileType]</td><td align="center">匹配文件类型是[fileType]的文件</td></tr><tr><td align="center">-user name</td><td align="center">匹配属于某个用户文件</td></tr></tbody></table><p>(注:一般[num]都可以在前面加±号,表示大于或少于,如+5M表示(5M,+∞),-5M表示(0,4M],5M则表示(4M,5M]))</p><table><thead><tr><th align="center">字符</th><th align="center">单位</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">512个字节快,为默认值</td></tr><tr><td align="center">c</td><td align="center">字节</td></tr><tr><td align="center">w</td><td align="center">两个字节的字</td></tr><tr><td align="center">k</td><td align="center">千字节(1024个字节单位)</td></tr><tr><td align="center">M</td><td align="center">兆字节(1048576个字节单位)</td></tr><tr><td align="center">G</td><td align="center">千兆字节(1073741824个字节单位)</td></tr></tbody></table><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-and(-a)</td><td align="center">如果操作符两边的测试条件都是真,则匹配,默认使用</td></tr><tr><td align="center">-or(-o)</td><td align="center">如果操作符两边的测试条件,任一是真,则匹配</td></tr><tr><td align="center">-not(!)</td><td align="center">如果操作符后面的条件为假,则匹配</td></tr><tr><td align="center">()</td><td align="center">用来改变优先级,注意一般shell对其有特殊解释,所以用引号或反斜杠加来转义</td></tr></tbody></table><table><thead><tr><th align="center">操作</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-delete</td><td align="center">删除当前匹配的文件</td></tr><tr><td align="center">-print</td><td align="center">默认操作，打印</td></tr><tr><td align="center">-ls</td><td align="center">对匹配文件执行等同ls -dils命令</td></tr><tr><td align="center">-quit</td><td align="center">匹配到第一个即立刻退出</td></tr><tr><td align="center"><code>-exec [command] &#39;&#123;&#125;&#39; &#39;;&#39;</code></td><td align="center">“{}”代表匹配到的文件(为决定路径),因为是shell特殊符号所以要用单引号,结尾必须用”;”,同样是特殊符号,要用单引号</td></tr><tr><td align="center"><code>-ok [command] &#39;&#123;&#125;&#39; &#39;;&#39;</code></td><td align="center">与-exec相似，只不过执行前会进行确认</td></tr><tr><td align="center">-regex</td><td align="center">文件路径的正则匹配</td></tr></tbody></table><table><thead><tr><th align="center">文件类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">块特殊设备文件</td></tr><tr><td align="center">c</td><td align="center">字符特殊设备文件</td></tr><tr><td align="center">d</td><td align="center">目录</td></tr><tr><td align="center">f</td><td align="center">普通文件</td></tr><tr><td align="center">l</td><td align="center">符号链接</td></tr></tbody></table><p>控制find命令的搜索范围</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-depth</td><td align="center">指定find程序先处理目录中的文件,再处理目录自身(深度优先搜索?)。当指定-delete行为时,会自动用这个选项</td></tr><tr><td align="center">-maxdepth [num]</td><td align="center">设置陷入目录树的最大级别数</td></tr><tr><td align="center">-mindepth [num]</td><td align="center">设置陷入目录树的最小级别数</td></tr><tr><td align="center">-mount</td><td align="center">不搜索挂载到其他系统下的目录</td></tr><tr><td align="center">-noleaf</td><td align="center">在搜索DOS&#x2F;Win文件系统或CD&#x2F;ROMS时的时候优化选项</td></tr></tbody></table><p>3.<strong>-exec与”+”</strong><br><code>find -type f -name &#39;foo*&#39; -exec ls -l &#39;&#123;&#125;&#39; &#39;;&#39;</code><br><code>find -type f -name &#39;foo*&#39; -exec ls -l &#39;&#123;&#125;&#39; +</code><br>上述两个命令的区别在于,假设匹配到fooA与fooB两个文件,第一个相当于执行两次ls命令,相当于<code>ls -l fooA</code>和<code>ls -l fooB</code>而第二个只执行一次<code>ls -l fooA fooB</code></p><p>4.<strong>xargs</strong><br><code>find ~ -type f -name &#39;foo*&#39; -print | xargs ls -l</code>与上述带有”+”的-exec选项效果一样,注意xargs有最大参数个数限制,可以通过<code>xargs -show-limits</code>来查看最大值<br>5.<strong>文件名存在空格的问题</strong><br>类 Unix 的系统允许在文件名中嵌入空格(甚至换行符)。这就给一些程序,如<br>为其它程序构建参数列表的 xargs 程序,造成了问题。一个嵌入的空格会被看作是<br>一个分隔符,生成的命令会把每个空格分离的单词解释为单独的参数。为了解决这<br>个问题,find 命令和 xarg 程序允许使用一个可选的 null 字符作为参数分隔符。一<br>个 null 字符被定义在 ASCII 码中,由数字零来表示(相反的,例如,空格字符在<br>ASCII 码中由数字 32 表示)。find 命令提供的 -print0 行为,则会产生由 null 字符<br>分离的输出,并且 xargs 命令有一个 –null 选项,这个选项会接受由 null 字符分离<br>的输入。这里有一个例子<br><code>find ~ -iname &#39;*.jpg&#39; -print0 | xargs -null ls -l</code><br>6.<strong>例子</strong><br><code>sudo find /tmp -type d -empty</code><br><code>find ~ -perm /a=x</code>查找所有可执行文件<br><code>find . -regex &#39;.*[^-\_./0-9a-zA-Z].*&#39;</code>查找不符合规范字符的路径名(中文咋办?)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机原理</title>
    <link href="/2020/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    <url>/2020/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>1.位运算相关</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs excel">a&amp;(b|c)=(a&amp;b)|(a&amp;c)<br>a|(b&amp;c)=(a|b)&amp;(a|c)<br>a^a=<span class="hljs-number">0</span> a^(a+<span class="hljs-number">1</span>)=<span class="hljs-number">1</span>(a为偶数)<br>a=<span class="hljs-built_in">n</span>&amp;(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>)(移除<span class="hljs-built_in">n</span>最后一个<span class="hljs-number">1</span>)<br>diff=(<span class="hljs-built_in">n</span>&amp;(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>))^<span class="hljs-built_in">n</span>=<span class="hljs-built_in">n</span>&amp;(-<span class="hljs-built_in">n</span>) (获取最后一个<span class="hljs-number">1</span>)<br>(<span class="hljs-built_in">n</span>^(-<span class="hljs-number">1</span>))+<span class="hljs-number">1</span>=-<span class="hljs-built_in">n</span>(<span class="hljs-comment">有符号数取反加一为其相反数</span>)<br>(<span class="hljs-built_in">var</span>^(<span class="hljs-built_in">var</span>&gt;&gt;<span class="hljs-number">31</span>))-(<span class="hljs-built_in">var</span>&gt;&gt;<span class="hljs-number">31</span>) (<span class="hljs-number">32</span>位取绝对值)<br></code></pre></td></tr></table></figure><p>2.位移运算<br>左移:&lt;&lt;,丢弃高位,低位补0<br>逻辑右移:&gt;&gt;,左端补0(c语言,对于无符号数,为逻辑右移)<br>算术右移:&gt;&gt;,左端补最高有效位的值(c语言,对于有符号数,为算术右移)<br>3.无符号与有符号的转换<br>a.C语言两者之间的转换，保持位模式不变,只是改变解码规则,最高位的解释由负到正,除了最高位的解释变化，其余位不变，设那些的权重和为k。<br>所以有符号补码的解释为-2^(w-1)+k,而无符号解释为2^(w-1)+k,w表示位数,所以两者相差2^w, 对于位模式(只考虑负数,即超过有符号表示范围的正数)相同的有以下结论:<br>无符号数&#x3D;有符号负数+2^w<br>有符号负数&#x3D;无符号数-2^w<br>有符号负数的绝对值+无符号数&#x3D;2^w<br>b.无符号与有符号比较,c语言会都转换无符号<br>4.数字位的扩展<br>a.低位无符号向高位转换时,只要简单把多出来的位置为0<br>b.低位有符号向高位有符号扩展时,为保持表示的数值不变,多出的位与原来符号位保持一致,很好想,0好说,多出来的位为0即保持数不变,1的话即是负数，多出的位都置为1,记住2^w-2^(w-1)&#x3D;2^(w-1),这样多出来的权重和就是没多出位之前最高的负权重(用脑子一想就知道了)<br>c.低位有符号向高位无符号扩展时,C语言是这样处理,先进行低位有符号到高位有符号扩展,即b,在进行有符号到无符号的同位转换,即3中的方法<br>5.截断位<br>截断都是直接去除多出的位,C中不支持这种转换,但这就是溢出的本质<br>a.截断后表示无符号,低位表示的数&#x3D;高位数mod2^(低位数),很好想,去除的位数权重和肯定是2^(低位数)的倍数,低位表示的数肯定小于2^(低位数)(因为,低位表示的数最大值为2^(低位数)-1)<br>b.截断后表示有符号,比较弱智的想法是,先转无符号,在此基础上进行无符号到有符号的转换.<br>6.无符号相加溢出<br>若0&lt;&#x3D;x,y&lt;2^w,则x+y在[0,2^(w+1)-2]之间,x+y若大于等于2^w,则会被截断,表现为x+y-2^w。很容易想不做说明,同时也很容易得出,如果判断是否溢出,当且仅当得数小于其中任意一个加数。(因为溢出的话,x+y-2^w-x&#x3D;y-2^w,肯定小于0)<br>7.有符号相加<br>向上溢出和6相同,向下溢出,则表现为x+y+2^w。书上的太难啃,我是这么想的,接它一位,并且表示没借之前的最小负数,应该是最高前两位为1,其余为0,而没借之前无法表示多出来的值为(-x-y-2^(w-1)),再以无符号来看,所以借出来之后,表示溢出的应有负数对应的无符号值为2^w+2^(w-1)-(-x-y-2^(w-1)),该数补码值即是表示不出来的负数,该高位无符号值化简为x+y+2^(w+1),由于x+y处于[-2^w,-2^w-1)之间,所以x+y+2^(w+1)的最小值为2^w,所以补出来的那一位始终为1,所以截断时要减去个2^w,最终结果就是x+y+2^(w+1)-2^(w)&#x3D;x+y+2^(w)这个值,我知道我第二次看可能看不懂,以此纪念我思考的过程,和拙劣的表达<br>补码检测上溢出:x,y都大于0,但它们的和小于等于0即发生溢出<br>补码检测下溢出:x,y都小于0,但他们的和大于等于0即发生溢出<br><font color=#FF0000>其实本质上，溢出后表示的值,就是,借给它一个高位后,正确表达时,再按5的方法截断的值</font><br>8.整数相乘<br>若补码整数x0,y0,与它们位模式相同的无符号整数为x1,y1,(x0*y0)与(x1*y1)的结果，无论有没有被截断，它们的位模式是相同的(还要缕一缕)<br>9.乘以2的幂<br>x*2^k,就等价于x&lt;&lt;k,对于不是2的幂的也可以转换如:x*14&#x3D;x*(2^3+2^2+2)&#x3D;(x&lt;&lt;3)+(x&lt;&lt;2)+(x&lt;&lt;1)<br>10.除以2的幂<br>无符号除以就是向右逻辑移位(与乘法相反嘛,聪明的你肯定想到了),而补码除以就是向右算术移位,同时当结果为负数,要保证舍入到0(简单来说就是无论正负,都去掉小数点,因为直接移位,会使结果原离远点),还需要做点修正,x&#x2F;2^k&#x3D;(x+(1&lt;&lt;k)-1)&gt;&gt;k(本质上,利用了如下的属性x&#x2F;y)<br>C中补码的除法会进行如下:<br><code>(x&lt;0 ? x+(1&lt;&lt;k)-1 :x)&gt;&gt;k</code>来计算x&#x2F;2^k<br>3.trick<br>a.-1用补码表示为全1位<br>b.0用补码表示为全0位<br>c.非负数x,-x的w位补码表示就是2^w-x,而反码则是[111…1]-x,（这两个表达式都当成无符号来进行位表示。反码也可以这么理解2^w-1-x）<br>d.一个位模式的补码,就是两者相加刚好溢出的那个码值,无符号数x(假设为w位),它的补码可以通过计算2^w-x(不包括0)得出,而有符号数x的补码即是它的相反数(不包括所能表示的最小值),其实从位角度来看对每一位取反加1(本质上就是这么算的),也可以这么看,以最右边的位为1的为界,它左边的(不包括它本身)都取反</p><p>2.取模的算式</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">(<span class="hljs-keyword">a</span>+b) <span class="hljs-keyword">mod</span> P = [(<span class="hljs-keyword">a</span> <span class="hljs-keyword">mod</span> P)+(b <span class="hljs-keyword">mod</span> P)]<span class="hljs-keyword">mod</span> P<br>(<span class="hljs-keyword">a</span>*b) <span class="hljs-keyword">mod</span> P = [(<span class="hljs-keyword">a</span> <span class="hljs-keyword">mod</span> P)*(b <span class="hljs-keyword">mod</span> P)]<span class="hljs-keyword">mod</span> P<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Make</title>
    <link href="/2020/01/17/Make/"/>
    <url>/2020/01/17/Make/</url>
    
    <content type="html"><![CDATA[<h3 id="引用其它的Makefile"><a href="#引用其它的Makefile" class="headerlink" title="引用其它的Makefile"></a>引用其它的Makefile</h3><p><code>include &lt;filename&gt;</code><br>make会在当前目录寻找,接着在以下目录下找:</p><ul><li>如果make执行时，有 -I 或 –include-dir 参数，那么make就会在这个参数所指定的目录下去寻找。</li><li>如果目录 <prefix>&#x2F;include （一般是： &#x2F;usr&#x2F;local&#x2F;bin 或 &#x2F;usr&#x2F;include ）存在的话，make也会去找。</li></ul><h3 id="变量相关"><a href="#变量相关" class="headerlink" title="变量相关"></a>变量相关</h3><p>变量在声明时需要给予初值，而在使用时，需要给在变量名前加上<code>$</code>符号，但最好用小括号<code>()</code>或是大括号<code>&#123;&#125;</code>把变量给包括起来。如果你要使用真实的<code>$</code>字符，那么你需要用<code>$$</code>来表示</p><h4 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h4><ul><li><code>:=</code>操作符,操作符右边只能出现已定义的变量,如果是未定义的变量,则会自动忽略,用来避免递归展开 </li><li><code>=</code>操作符右边可以出现未定义的变量</li><li><code>?=</code>如果变量没有定义过,则使用后面的值</li><li><code>+=</code>追加变量值</li></ul><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><table><thead><tr><th align="center">变量类型</th><th align="center">特殊变量</th><th align="center">含义</th><th align="center">用例或说明</th></tr></thead><tbody><tr><td align="center">特殊变量</td><td align="center"><code>VPATH</code></td><td align="center">寻找依赖或目标的路径,以冒号为分隔符,当前目录永远最优先</td><td align="center"><code>VPATH = src:../headers</code></td></tr><tr><td align="center">特殊变量</td><td align="center"><code>SUFFIXE</code></td><td align="center">定义默认的后缀列表,最好不要直接改变，通过<code>.SUFFIXE</code></td><td align="center"></td></tr><tr><td align="center">特殊变量</td><td align="center">.MAKEDIR</td><td align="center">调用make的绝对路径名</td><td align="center"></td></tr><tr><td align="center">特殊变量</td><td align="center">.NULL</td><td align="center">空字符串</td><td align="center"></td></tr><tr><td align="center">特殊变量</td><td align="center">.OS</td><td align="center">正在运行的操作系统名称</td><td align="center"></td></tr><tr><td align="center">特殊变量</td><td align="center">.PWD</td><td align="center">运行时活动工作目录的绝对路径名</td><td align="center"></td></tr><tr><td align="center">特殊变量</td><td align="center">.SHELL</td><td align="center">启动的shell类型</td><td align="center"></td></tr><tr><td align="center">命令变量</td><td align="center"><code>AR</code></td><td align="center">函数库打包程序,默认命令是ar</td><td align="center"></td></tr><tr><td align="center">命令变量</td><td align="center"><code>AS</code></td><td align="center">汇编语言编译程序,默认命令是as</td><td align="center"></td></tr><tr><td align="center">命令变量</td><td align="center"><code>CC</code></td><td align="center">C语言编译程序,默认命令是cc</td><td align="center"></td></tr><tr><td align="center">命令变量</td><td align="center"><code>CXX</code></td><td align="center">C++语言编译程序,默认命令是g++</td><td align="center"></td></tr><tr><td align="center">命令变量</td><td align="center"><code>CPP</code></td><td align="center">C程序的预处理器,默认命令是$(CC) -E</td><td align="center"></td></tr><tr><td align="center">命令变量</td><td align="center"><code>RM</code></td><td align="center">删除文件命令,默认命令是rm -f</td><td align="center"></td></tr><tr><td align="center">参数变量</td><td align="center"><code>ARFLAGS</code></td><td align="center">函数库打包程序AR命令参数,默认值是rv</td><td align="center"></td></tr><tr><td align="center">参数变量</td><td align="center"><code>ASFLAGS</code></td><td align="center">汇编语言编译器参数,默认值是空</td><td align="center"></td></tr><tr><td align="center">参数变量</td><td align="center"><code>CFLAGS</code></td><td align="center">C语言编译器参数,默认为空</td><td align="center"></td></tr><tr><td align="center">参数变量</td><td align="center"><code>CPPFLAGS</code></td><td align="center">C预处理器参数,默认为空</td><td align="center"></td></tr><tr><td align="center">参数变量</td><td align="center"><code>CXXFLAGS</code></td><td align="center">C++语言编译器参数,默认为空</td><td align="center"></td></tr><tr><td align="center">参数变量</td><td align="center"><code>LDFLAGS</code></td><td align="center">ld链接器参数,默认为空</td><td align="center"></td></tr><tr><td align="center">系统变量</td><td align="center"><code>MAKELEVEL</code></td><td align="center">当前Makefile的调用层数,从0开始</td><td align="center"></td></tr><tr><td align="center">系统变量</td><td align="center"><code>MAKECMDGOALS</code></td><td align="center">存放那个你命令行中所指定的终极目标的列表,没有指定则为空</td><td align="center"></td></tr><tr><td align="center">自动变量</td><td align="center"><code>$@</code></td><td align="center">目标集</td><td align="center">它代表一个量,遍历目标集,一般与依赖集相匹配</td></tr><tr><td align="center">自动变量</td><td align="center"><code>$%</code></td><td align="center">目标集</td><td align="center">仅当目标是函数库文件时,表示规则中的目标成员名,foo.a(bar.o),$%就是bar.o,$@就是foo.a</td></tr><tr><td align="center">自动变量</td><td align="center"><code>$&lt;</code></td><td align="center">依赖集</td><td align="center">它代表一个量,遍历目标集,一般用于目标集相匹配</td></tr><tr><td align="center">自动变量</td><td align="center"><code>$?</code></td><td align="center">依赖集</td><td align="center">所有比目标新的依赖目标的集合,以空格分隔</td></tr><tr><td align="center">自动变量</td><td align="center"><code>$^</code></td><td align="center">依赖集</td><td align="center">所有依赖目标的集合,去掉重复以空格分隔</td></tr><tr><td align="center">自动变量</td><td align="center"><code>$+</code></td><td align="center">依赖集</td><td align="center">所有依赖目标的集合,不去掉重复以空格分隔</td></tr><tr><td align="center">自动变量</td><td align="center"><code>$*</code></td><td align="center"></td><td align="center">对应模式的’%’及之前的部分,包括路径</td></tr></tbody></table><p><strong>所有自动变量都可以与<code>D</code>,<code>F</code>搭配使用,表示匹配的目录部分和文件部分,如<code>$(@D)</code></strong></p><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li>替换<code>.o</code>到<code>.c</code><br><strong>方法一:</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">foo:=a.o b.o c.o<br>bar:=$(foo:.o=.c)<br></code></pre></td></tr></table></figure><strong>方法二:</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#静态模式</span><br>foo:=a.o b.o c.o<br>bar:=$(foo:%.o=%.c)<br></code></pre></td></tr></table></figure></li><li>强制覆盖</li></ul><p><code>override &lt;variable&gt;=&lt;value&gt;</code>make命令行参数可以用这个强制覆盖,否则覆盖不了</p><ul><li>替换变量中字符串<br><code>变量名: s/原字符串/新字符串</code></li><li>加前后缀<br><code>变量:^ &quot;前缀&quot;</code><br><code>变量:+ &quot;后缀&quot;</code></li><li>取部分<br><code>$(VARIABLE:&lt;option&gt;)</code>,option有3个选项d(仅取路径)、b(文件名,不包括扩展)、f(文件名,包括扩展)</li></ul><h3 id="关键字vpath"><a href="#关键字vpath" class="headerlink" title="关键字vpath"></a>关键字vpath</h3><ul><li>用法一:<code>vpath &lt;pattern&gt; &lt;directories&gt;</code>符合模式的在指定文件夹搜索</li><li>用法二:<code>vpath &lt;pattern&gt;</code>清除对应模式搜索目录</li><li>用法三:<code>vpath</code>清除所有搜索目录<br><em><strong>注意:<pattern>都必须包含%,意思是包含一个以上的匹配字符</strong></em></li></ul><h3 id="局部作用的变量"><a href="#局部作用的变量" class="headerlink" title="局部作用的变量"></a>局部作用的变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">prog: CFLAGS = -g<br>prog: prog.o foo.o bar.o<br>$(gcc) $(CFLAGS) prog.o foo.o bar.o<br>prog.o: prog.c<br>$(gcc) $(CFLAGS) prog.c<br>foo.o: foo.c<br>$(gcc) $(CFLAGS) bar.c<br></code></pre></td></tr></table></figure><p>不管全局的<code>$(CFLAGS)</code>的值是什么,prog目标及其所引发的所有规则中(prog.o foo.o bar.o),$(CFLAGS)的值都是-gl</p><h3 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h3><p>用<code>.PHONY</code>指明伪目标</p><ul><li>伪目标并不是文件，只是个标签,最终不产生文件</li><li>只有显式地指名才能使其生效</li><li>最终目标可以是伪目标,一个用法如下,使一个make文件生成多个目标:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">all: prog1 prog2 prog3<br>.PHONY: all<br>prog1: prog1.o utils.o<br>gcc -o prog1 prog1.o utils.o<br>prog2: prog2.o<br>gcc -o prog2 prog2.o<br>prog3: prog3.o sort.o utils.o<br>gcc -o prog3 prog3.o sort.o utils.o<br></code></pre></td></tr></table></figure></li></ul><h3 id="静态模式-更方便定义多目标"><a href="#静态模式-更方便定义多目标" class="headerlink" title="静态模式:更方便定义多目标"></a>静态模式:更方便定义多目标</h3><p><code>&lt;targets&gt;: &lt;target-pattern&gt;: &lt;prereq-patterns&gt;</code><br>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">objects = foo.o bar.o<br>all: $(objects)<br>$(objects): %.o: %.c<br>$(gcc) -c $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">foo.o: foo.c<br>$(gcc) -c $(CFLAGS) foo.c -o foo.o<br>bar.o: bar.c<br>$(gcc) -c $(CFLAGS) bar.c -o bar.o<br></code></pre></td></tr></table></figure><h3 id="gcc-MM选项"><a href="#gcc-MM选项" class="headerlink" title="gcc -MM选项"></a>gcc -MM选项</h3><p>该选项可以为.c源文件自动生成依赖的非标准库的头文件,按习惯称为.d文件<br>可以用以下模式规则来产生.d文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">%.d: %.c<br>    @<span class="hljs-built_in">set</span> -e; <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$@</span>; \<br>    $(CC) -M $(CPPFLAGS) $&lt; &gt; <span class="hljs-variable">$@</span>.$$$$; \<br>    sed <span class="hljs-string">&#x27;s,\($*\)\.o[ :]*,\1.o $@ : ,g&#x27;</span> &lt; <span class="hljs-variable">$@</span>.$$$$ &gt; <span class="hljs-variable">$@</span>; \<br>    <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$@</span>.$$$$<br></code></pre></td></tr></table></figure><p>然后用include</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sources = foo.c bar.c<br>include $(sources:.c=.d)<br></code></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="@关键字"></a><code>@</code>关键字</h3><p>make默认会显示命令,在命令前加@可以阻止输出,例如<br><code>@echo 正在编译XXX模块</code></p><h3 id="关键字-1"><a href="#关键字-1" class="headerlink" title="-关键字"></a><code>-</code>关键字</h3><p>在命令前加<code>-</code>会忽略该命令产生的错误</p><h3 id="嵌套make"><a href="#嵌套make" class="headerlink" title="嵌套make"></a>嵌套make</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">subsystem:<br><span class="hljs-built_in">cd</span> subdir &amp;&amp; $(MAKE) <span class="hljs-comment">#也可以这么写$(MAKE) -C subdir</span><br></code></pre></td></tr></table></figure><p>　要想传递变量给嵌套的make,使用export,不想传递使用unexport<br>　其中<code>SHELL</code>和<code>MAKEFLAGS</code>总会影响下层make,但-C、-f、-h、-o、-W几个参数并不往下传递</p><h3 id="定义命令包-即命令集"><a href="#定义命令包-即命令集" class="headerlink" title="定义命令包(即命令集)"></a>定义命令包(即命令集)</h3><p>其实这是多行变量<br>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">define run-yacc<br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">dir</span><br><span class="hljs-built_in">mv</span> <span class="hljs-built_in">dir</span> newdir<br>endef<br>crap: <br>$(run-yacc)<br></code></pre></td></tr></table></figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>make是在读取Makefile时就计算条件表达式的值,而不是运行,所以不要用自动变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">xx: xc<br>&lt;conditional-directive&gt; <span class="hljs-comment">#可以是ifeq(arg1,arg2)、ifneq、ifdef &lt;variable-name&gt;(不加美元符号)、ifndef</span><br>&lt;text-if-true&gt;<br><span class="hljs-keyword">else</span><br>&lt;text-if-false&gt;<br>endif<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h4><p><code>$(&lt;function&gt; &lt;arguments&gt;)</code>,参数间用’,’分隔</p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table><thead><tr><th align="center">函数</th><th align="center">功能</th><th align="center">返回</th></tr></thead><tbody><tr><td align="center"><code>$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</code></td><td align="center">把字符串<text>中的<from>换成<to></td><td align="center"><code>被替换过的字符串</code></td></tr><tr><td align="center"><code>$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</code></td><td align="center">查找<text>中的单词(以空格、Tab、回车、换行)符合<pattern>,替换<replacement></td><td align="center">被替换后的字符串</td></tr><tr><td align="center"><code>$(strip &lt;string&gt;)</code></td><td align="center">去掉<string>中开头和结尾的空字符</td><td align="center">去掉空字符的字符串</td></tr><tr><td align="center"><code>$(findstring &lt;find&gt;,&lt;in&gt;)</code></td><td align="center">在字符串<in>中查找<find></td><td align="center">如果找到,返回<find>,否则返回空字符串</td></tr><tr><td align="center"><code>$(filter &lt;pattern...&gt;,&lt;text&gt;)</code></td><td align="center">以<pattern>模式过滤<text>字符串中的单词(以空格等作为分隔符),可以有多个模式,模式间以空格分割</td><td align="center">返回符合<pattern>的字符串</td></tr><tr><td align="center"><code>$(filter-out &lt;pattern...&gt;,&lt;text&gt;)</code></td><td align="center">以<pattern>模式过滤<text>字符串中的单词(以空格等作为分隔符),可以有多个模式,模式间以空格分割</td><td align="center">返回不符合<pattern>的字符串</td></tr><tr><td align="center"><code>$(sort &lt;list&gt;)</code></td><td align="center">给字符串<list>中的单词升序</td><td align="center">返回排序后的字符串(会去掉相同的单词)</td></tr><tr><td align="center"><code>$(word &lt;n&gt;,&lt;text&gt;)</code></td><td align="center">取字符串<text>中的第<n>个单词</td><td align="center">返回该单词,如果n过大,则返回空字符串</td></tr><tr><td align="center"><code>$(wordlist &lt;n&gt;,&lt;m&gt;,&lt;text&gt;)</code></td><td align="center">取第<n>-第<m>个单词</td><td align="center">返回那些单词</td></tr><tr><td align="center"><code>$(words &lt;text&gt;)</code></td><td align="center">统计<text>中的单词数</td><td align="center">返回个数</td></tr><tr><td align="center"><code>$(firstword &lt;text&gt;)</code></td><td align="center">返回字符串<text>中第一个单词</td><td align="center">返回第一个单词</td></tr></tbody></table><h4 id="文件名函数"><a href="#文件名函数" class="headerlink" title="文件名函数"></a>文件名函数</h4><table><thead><tr><th align="center">格式</th><th align="center">例子</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center"><code>$(dir &lt;names...&gt;)</code></td><td align="center"><code>$(dir src/foo.c hacks)</code></td><td align="center"><code>src/ ./</code></td></tr><tr><td align="center"><code>$(notdir &lt;names...&gt;)</code></td><td align="center"><code>$(notdir src/foo.c hacks)</code></td><td align="center"><code>foo.c hacks</code></td></tr><tr><td align="center"><code>$(suffix &lt;names...&gt;)</code></td><td align="center"><code>$(suffix src/foo.c src-1.0/bar.c hacks)</code></td><td align="center"><code>.c .c</code></td></tr><tr><td align="center"><code>$(basename &lt;names...&gt;)</code></td><td align="center"><code>$(basename src/foo.c src-1.0/bar.c hacks)</code></td><td align="center"><code>src/foo src-1.0/bar hacks</code></td></tr><tr><td align="center"><code>$(addsuffix &lt;suffix&gt;,&lt;names...&gt;)</code></td><td align="center"><code>$(addsuffix .c,foo bar)</code></td><td align="center"><code>foo.c bar.c</code></td></tr><tr><td align="center"><code>$(addprefix &lt;prefix&gt;,&lt;names...&gt;)</code></td><td align="center"><code>$(addprefix src/,foo bar)</code></td><td align="center"><code>src/foo src/bar</code></td></tr><tr><td align="center"><code>$(join &lt;list1&gt;,&lt;list2&gt;)</code></td><td align="center"><code>$(join aaa bbb,111 222 333)</code></td><td align="center"><code>aaa111 bbb222</code></td></tr></tbody></table><h4 id="foreach函数"><a href="#foreach函数" class="headerlink" title="foreach函数"></a>foreach函数</h4><p>格式:<code>$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">names:= a b c d<br>files:= $(foreach n,$(names),$(n).o)<br><span class="hljs-comment">#$(files)的值是‘a.o b.o c.o d.o’</span><br></code></pre></td></tr></table></figure><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><p><code>$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)</code>,<condition>若返回为非空,则执行<then-part>,其是整个函数的返回值</p><h4 id="call函数"><a href="#call函数" class="headerlink" title="call函数"></a>call函数</h4><p><code>$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)</code>;<expression>中<code>$(1)</code>,<code>$(2)</code>等,会被参数<code>&lt;parm1&gt;</code>、<code>&lt;parm2&gt;</code>等代替</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">reverse=$(2) $(1)<br>foo=$(call reverse,a,b)<br></code></pre></td></tr></table></figure><p>此时foo的值就是’b a’</p><h4 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h4><p><code>files:=$(shell echo *.c)</code></p><h4 id="origin函数"><a href="#origin函数" class="headerlink" title="origin函数"></a>origin函数</h4><p><code>$(origin &lt;variable&gt;)</code>:告知变量来源情况</p><table><thead><tr><th align="center">返回值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">undefined</td><td align="center">未定义</td></tr><tr><td align="center">default</td><td align="center">默认定义</td></tr><tr><td align="center">environment</td><td align="center">环境变量</td></tr><tr><td align="center">file</td><td align="center">定义在make文件中</td></tr><tr><td align="center">override</td><td align="center">被override重新定义</td></tr><tr><td align="center">automatic</td><td align="center">命令运行中的自动化变量</td></tr><tr><td align="center">command line</td><td align="center">命令行定义</td></tr></tbody></table><h4 id="error函数和warning函数"><a href="#error函数和warning函数" class="headerlink" title="error函数和warning函数"></a>error函数和warning函数</h4><p><code>$(error &lt;text ...&gt;)</code><br><code>$(warning &lt;text ...&gt;)</code><br>error函数产生一个致命的错误,&lt;text …&gt;是错误信息<br>warning函数只是输出警告信息,make会继续执行</p><p>例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifdef ERROR_001<br><span class="hljs-comment">#运行到下面的会出错跳出脚本</span><br>    $(error error is $(ERROR_001))<br>endif<br></code></pre></td></tr></table></figure><p>例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#这里并不会出错跳出脚本</span><br>ERR = $(error found an error!)<br><br>.PHONY: err<br><span class="hljs-comment">#这里才会跳出</span><br>err: $(ERR)<br></code></pre></td></tr></table></figure><h3 id="make的退出码"><a href="#make的退出码" class="headerlink" title="make的退出码"></a>make的退出码</h3><ul><li>0:表示成功执行</li><li>1:表示出错</li><li>2:如果你使用了make的“-q”选项，并且make使得一些目标不需要更新，那么返回2。</li></ul><h3 id="一些常用伪目标命名"><a href="#一些常用伪目标命名" class="headerlink" title="一些常用伪目标命名"></a>一些常用伪目标命名</h3><table><thead><tr><th align="center">名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">all</td><td align="center">这个伪目标一般是所有目标的目标,一般为编译所有的目标</td></tr><tr><td align="center">clean</td><td align="center">这个伪目标的功能一般是删除所有make创建的文件</td></tr><tr><td align="center">install</td><td align="center">安装已编译好的程序,其实是把目标执行文件复制到指定文件夹</td></tr><tr><td align="center">print</td><td align="center">这个伪目标的功能是列出改变过的源文件</td></tr><tr><td align="center">tar</td><td align="center">这个伪目标的功能是打包备份源程序</td></tr><tr><td align="center">dist</td><td align="center">一般是把打包文件进行压缩</td></tr><tr><td align="center">tags</td><td align="center">这个伪目标的功能用于更新所有的目标,以备完整地重新编译</td></tr><tr><td align="center">check、test</td><td align="center">一般用来测试makefile文件流程</td></tr></tbody></table><h3 id="make选项参数"><a href="#make选项参数" class="headerlink" title="make选项参数"></a>make选项参数</h3><table><thead><tr><th align="center">短选项</th><th align="center">长选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-b,-m</td><td align="center"></td><td align="center">忽略其他版本make兼容性</td></tr><tr><td align="center">-B</td><td align="center">–always-make</td><td align="center">认为所有目标都更新(重编译)</td></tr><tr><td align="center">-C <dir></td><td align="center">–directory&#x3D;<dir></td><td align="center">指定读取makefile的目录。如果有多个“-C”参数，make的解释是后面的路径以前面的作为相对路径，并以最后的目录作为被指定目录。如：“make -C ~hchen&#x2F;test -C prog”等价于“make -C ~hchen&#x2F;test&#x2F;prog”</td></tr><tr><td align="center">-d</td><td align="center"></td><td align="center">相当于<code>-debug=a</code></td></tr><tr><td align="center">-e</td><td align="center">–environment-overrides</td><td align="center">指定环境变量值,覆盖makefile文件中定义的变量值</td></tr><tr><td align="center">-f</td><td align="center">–file、–makefile</td><td align="center">指定某个makefile文件</td></tr><tr><td align="center">-i</td><td align="center">–ignore-errors</td><td align="center">在执行时忽略所有的错误</td></tr><tr><td align="center">-I <dir></td><td align="center">–include-dir&#x3D;<dir></td><td align="center">指定一个包含makefile文件的搜索目标</td></tr><tr><td align="center">-j <jobsnum></td><td align="center">–jobs&#x3D;<jobsnum></td><td align="center">指同时运行的命令数,如果没有这个参数,能运行多少就多少,只有最后一个-j选项有效</td></tr><tr><td align="center">-k</td><td align="center">–keep-going</td><td align="center">出错也不停止,执行其它目标,失败的目标,依赖于其上的就不会执行</td></tr><tr><td align="center">-l <load></td><td align="center">–load-average [&#x3D;<load>];–max-load[&#x3D;<load>]</td><td align="center">指定make运行命令的负载</td></tr><tr><td align="center">-n</td><td align="center">–just-print、–dry-run、–recon</td><td align="center">不管目标更不更新,只打印命令,不执行</td></tr><tr><td align="center">-o <file></td><td align="center">–old-file&#x3D;<file>;–assume-old&#x3D;<file></td><td align="center">不生成指定的<file>,即使这个目标的依赖文件比他新</td></tr><tr><td align="center">-p</td><td align="center">–print-database</td><td align="center">输出makefile文件中所有数据,包括所有的规则和变量</td></tr><tr><td align="center">-q</td><td align="center">–question</td><td align="center">寻找目标,如果目标存在,什么也不输出,也不执行编译,返回0.如果目标不存在,打印一条出错信息,返回2</td></tr><tr><td align="center">-r</td><td align="center">–no-builtin-rules</td><td align="center">禁止使用任何隐式规则，会使得SUFFIXE变量为空</td></tr><tr><td align="center">-R</td><td align="center">–no-builtin-variables</td><td align="center">禁止使用任作用于变量上的何隐式规则</td></tr><tr><td align="center">-s</td><td align="center">–silent;–quiet</td><td align="center">命令运行时不显示命令的输出</td></tr><tr><td align="center">-S</td><td align="center">–no-keep-going;–stop</td><td align="center">取消-k选项的作用</td></tr><tr><td align="center">-t</td><td align="center">–touch</td><td align="center">把目标文件时间更新,但不更改目标文件,假装编译文件</td></tr><tr><td align="center">-w</td><td align="center">–print-directory</td><td align="center">输出运行makefile文件之前之后的信息,跟踪嵌套make时很有用</td></tr><tr><td align="center">-W <file></td><td align="center">–what-if&#x3D;<file>;–assume-new&#x3D;<file>;–new-file&#x3D;<file></td><td align="center">假定目标<file>;需要更新，如果和“-n”选项使用，那么这个参数会输出该目标更新时的运行动作。如果没有“-n”那么就像运行UNIX的“touch”命令一样，使得<file>;的修改时间为当前时间。</td></tr><tr><td align="center"></td><td align="center">–no-print-directory</td><td align="center">禁止-w选项</td></tr><tr><td align="center"></td><td align="center">–warn-undefined-variables</td><td align="center">警告未定义的变量</td></tr></tbody></table><h4 id="–debug"><a href="#–debug" class="headerlink" title="–debug &lt;options&gt;"></a>–debug &lt;options&gt;</h4><p>options可以是以下:</p><ul><li>也就是all,输出所有的调试信息</li><li>也就是basic,只输出简单的调试信息,即输出不需要重新编译的目标</li><li>也就是verbose,输出的信息包括哪一个makefile文件被解析,不需要重新编译的依赖文件(或是依赖目标)</li><li>也就是implicit,输出所有的隐含规则</li><li>也就是jobs,输出执行规则中命令的详细信息,如PID、返回码等</li><li>也就是makefile文件,输出make,读取makefile,更新makefile文件,并执行makefile文件的信息</li></ul><h4 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h4><ul><li><code>make -qp</code>只输出信息而不执行</li><li><code>make -p -f /dev/null</code>查看makefile前的预设变量和规则</li></ul><h3 id="模式的匹配"><a href="#模式的匹配" class="headerlink" title="模式的匹配"></a>模式的匹配</h3><p>一般来说，一个目标的模式有一个有前缀或是后缀的%，或是没有前后缀，直接就是一个%。因为%代表一个或多个字符，所以在定义好了的模式中，我们把%所匹配的内容叫做“茎”，例如%.c所匹配的文件“test.c”中“test”就是“茎”。因为在目标和依赖目标中同时有%时，依赖目标的“茎”会传给目标，当做目标中的“茎”。</p><p>当一个模式匹配包含有斜杠（实际也不经常包含）的文件时，那么在进行模式匹配时，目录部分会首先被移开，然后进行匹配，成功后，再把目录加回去。在进行“茎”的传递时，我们需要知道这个步骤。例如有一个模式e%t，文件src&#x2F;eat匹配于该模式，于是src&#x2F;a就是其“茎”，如果这个模式定义在依赖目标中，而被依赖于这个模式的目标中又有个模式c%r，那么，目标就是src&#x2F;car。（“茎”被传递）</p><h3 id="一些”老东西”–后缀规则"><a href="#一些”老东西”–后缀规则" class="headerlink" title="一些”老东西”–后缀规则"></a>一些”老东西”–后缀规则</h3><ul><li><code>.c.o:</code>等价于<code>%.o : %.c</code></li><li><code>.c:</code>等价于<code>% : %.c</code><br>以上称为后缀规则，要想这么用，必须为默认后缀，你可以用以下来添加默认后缀<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">.SUFFIXES:              <span class="hljs-comment"># 删除默认的后缀</span><br>.SUFFIXES: .a .b .c c <span class="hljs-comment"># 定义自己的后缀</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h3><h4 id="各个规则"><a href="#各个规则" class="headerlink" title="各个规则"></a>各个规则</h4><ul><li>C程序隐含规则:<n>.o的目标的依赖目标会是:<n>.c,命令是<code>$(CC) -c $(CPPFLAGS)$(CFLAGS)</code></li><li>C++程序隐含规则:<n>.o的目标的依赖目标是:<n>.cc或<n>.C,命令是<code>$(CXX) -c  $(CPPFLAGS)$(CXXFLAGS)</code></li><li>汇编和预处理隐含规则:<n>.o的目标的依赖目标会自动推导为<n>.s，默认使用编译器as，并且其生成命令是：<code>$ (AS) $(ASFLAGS)</code>。<n>.s的目标的依赖目标会自动推导为<n>.S，默认使用C预编译器cpp，并且其生成命令是：<code>$(AS) $(ASFLAGS)</code>。</li><li>链接Object文件的隐含规则:<n>目标依赖于<n>.o，通过运行C的编译器来运行链接程序生成（一般是 ld ），其生成命令是：<code>$(CC) $(LDFLAGS) &lt;n&gt;.o $(LOADLIBES) $(LDLIBS)</code>。这个规则对于只有一个源文件的工程有效，同时也对多个Object文件（由不同的源文件生成）的也有效。例如如下规则:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x : y.o z.o<br></code></pre></td></tr></table></figure>隐含规则执行如下(x.c、y.c、z.c都存在):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">cc -c x.c -o x.o<br>cc -c y.c -o y.o<br>cc -c z.c -o z.o<br>cc x.o y.o z.o -o x<br><span class="hljs-built_in">rm</span> -f x.o<br><span class="hljs-built_in">rm</span> -f y.o<br><span class="hljs-built_in">rm</span> -f z.o<br></code></pre></td></tr></table></figure></li></ul><h4 id="一些tip"><a href="#一些tip" class="headerlink" title="一些tip"></a>一些tip</h4><ul><li>隐式规则产生的中间目标，最终会被自动删除，被makefile指定成的目标或依赖目标不能被当作中介，但是可以通过<code>.INTERMEDIATE</code>来强制声明为中间目标。如<code>.intermediate: mid</code></li><li>也可以阻止自动删除中间目标，通过<code>.SECONDARY</code>来强制声明。如<code>.SECONDARY</code>。或以模式的方式指定(如：%.o)成为伪目标<code>.PRECIOUS</code>的依赖目标。</li><li>Make会优化一些特殊的隐含规则，而不生成中间文件。从文件.c直接生成执行文件，不产生目标文件</li></ul><h4 id="模式规则来定义一个隐含规则"><a href="#模式规则来定义一个隐含规则" class="headerlink" title="模式规则来定义一个隐含规则"></a>模式规则来定义一个隐含规则</h4><p>模式规则，目标的定义需要有<code>%</code>字符。依赖目标随便，与变量不同的是，模式规则的展开发生在运行期间。<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">%.o: %.c<br> $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o <span class="hljs-variable">$@</span><br></code></pre></td></tr></table></figure><h4 id="隐含规则搜索算法"><a href="#隐含规则搜索算法" class="headerlink" title="隐含规则搜索算法"></a>隐含规则搜索算法</h4><p>比如我们有一个目标叫T。下面是搜索目标T的规则的算法。请注意，在下面，我们没有提到后缀规则，原因是，所有的后缀规则在Makefile被载入内存时，会被转换成模式规则。如果目标是archive(member)的函数库文件模式，那么这个算法会被运行两次，第一次是找目标T，如果没有找到的话，那么进入第二次，第二次会把member当作T来搜索。</p><ol><li>把T的目录部分分离出来。叫D，而剩余部分叫N。（如：如果T是src&#x2F;foo.o，那么，D就是src&#x2F;，N就是foo.o）</li><li>创建所有匹配于T或是N的模式规则列表。</li><li>如果在模式规则列表中有匹配所有文件的模式，如%，那么从列表中移除其它的模式。</li><li>移除列表中没有命令的规则。</li><li>对于第一个在列表中的模式规则：</li></ol><ul><li>推导其“茎”S，S应该是T或是N匹配于模式中%非空的部分。</li><li>计算依赖文件。把依赖文件中的%都替换成“茎”S。如果目标模式中没有包含斜框字符，而把D加在第一个依赖文件的开头。</li><li>测试是否所有的依赖文件都存在或是理当存在。（如果有一个文件被定义成另外一个规则的目标文件，或者是一个显式规则的依赖文件，那么这个文件就叫“理当存在”）</li><li>如果所有的依赖文件存在或是理当存在，或是就没有依赖文件。那么这条规则将被采用，退出该算法。</li></ul><ol start="6"><li>如果经过第5步，没有模式规则被找到，那么就做更进一步的搜索。对于存在于列表中的第一个模式规则：</li></ol><ul><li>如果规则是终止规则，那就忽略它，继续下一条模式规则。</li><li>计算依赖文件。（同第5步）</li><li>测试所有的依赖文件是否存在或是理当存在。</li><li>对于不存在的依赖文件，递归调用这个算法查找他是否可以被隐含规则找到。</li><li>如果所有的依赖文件存在或是理当存在，或是就根本没有依赖文件。那么这条规则被采用，退出该算法。</li><li>如果没有隐含规则可以使用，查看.DEFAULT规则，如果有，采用，把.DEFAULT的命令给T使用。</li></ul><h3 id="函数库打包"><a href="#函数库打包" class="headerlink" title="函数库打包"></a>函数库打包</h3><p>函数库文件也就是对.o文件的打包文件<br>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">foolib(hack.o xx.o): hack.o xx.o<br>ar cr foolib hack.o xx.o <span class="hljs-comment">#foolib是库名,hack.o是包含文件</span><br></code></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>make中遇到的第一条规则是最终目标  </li><li>和bash一样用空格和”&quot;进行换行</li><li>命令总是以tab键开头,其余不是命令</li><li><code>MAKEFILES</code>最好不用该环境变量,该变量类似于include动作,但其中文件中的目标不会起作用,最好置为空,以免引入未考虑到的东西,莫名奇妙出现问题时,可以查看该变量</li><li>要想前面命令作用于后面命令,需要写在同一行上,用分号分隔,如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span>:<br><span class="hljs-built_in">cd</span> /home/nanbert;<span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure></li><li>可以在命令前加<code>-</code>,来忽略该命令可能执行失败,这也可用于include</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GDB</title>
    <link href="/2020/01/16/GDB/"/>
    <url>/2020/01/16/GDB/</url>
    
    <content type="html"><![CDATA[<ul><li>编译文件时要加上-g选项<br>　几种启动gdb方式:<br>　<code>gdb &lt;program&gt;</code>,<code>gdb &lt;program&gt; core</code>(core是程序非法执行后core dump后产生的文件),<code>gdb &lt;program&gt; &lt;PID&gt;</code>(可以指定这个服务程序运行时的进程ID)</li><li><code>break</code><br>　a.加函数名,则会在函数内第一个非简单赋值语句处<br>　b.加行号,则会在该行号处停止</li><li><code>step(s)</code>:进入函数</li><li><code>next</code>:不进入函数</li><li><code>print /&lt;f&gt; &lt;expr&gt;</code>:<f>为格式<br>　a.加表达式:其中$1、$2、….表示第几个print的表达式的值,$$n则表示倒数n+1的命令<br>　b.变量&#x3D;表达式:赋值<br>　c.静态数组直接加数组名,动态数组格式为<code>*array@len</code>,@左边是array数组的首地址,右边则是数组的长度<br>　d.格式表</li></ul><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">x(a)</td><td align="center">十六进制格式</td></tr><tr><td align="center">d</td><td align="center">十进制格式</td></tr><tr><td align="center">u</td><td align="center">十进制无符号整型</td></tr><tr><td align="center">o</td><td align="center">八进制格式</td></tr><tr><td align="center">t</td><td align="center">二进制格式</td></tr><tr><td align="center">c</td><td align="center">字符格式</td></tr><tr><td align="center">f</td><td align="center">浮点数格式</td></tr><tr><td align="center">s</td><td align="center">字符串格式</td></tr><tr><td align="center">i</td><td align="center">指令格式</td></tr></tbody></table><ul><li><code>display /&lt;fmt&gt; &lt;expr&gt;</code>:在使用display命令时,每次中断,挂起都会显示表达式的值,<fmt>指定格式可选有s和i<br>a.<code>info display</code>:查看display设置的自动显示信息<br>b.<code>enable/disable display &lt;dnums&gt;</code>:失效或恢复某个自动显示<br>c.<code>undisplay &lt;dnums&gt; or delete display &lt;dnums&gt;</code>:删除某个自动显示,支持1-5这样的范围表示或者以空格分割不同号码</li><li><code>run</code></li><li><code>finish</code>:结束执行当前函数,显示其返回值</li><li><code>set</code>:设置变量新值</li><li><code>continue(cont)</code>:后面可以加数字,表示忽略几个断点</li><li><code>condition &lt;断点号&gt;　&lt;条件表达式&gt;</code>:条件为真时,执行断点</li><li><code>tbreak</code>:临时断点等价于<code>break xx;enable delete &lt;断点号&gt;</code></li><li><code>enable &lt;断点编号&gt;</code>:恢复暂时失效的断点</li><li><code>disable &lt;断点编号&gt;</code>:使断点失效</li><li><code>delete &lt;断点的编号或表达式&gt;</code>:清除断点或者表达式</li><li><code>clear &lt;要清除的断点所在的行号&gt;</code>:与delete不同的是给出行号,并且gdb会给出提示,delete则不会</li><li><code>watch &lt;条件表达式&gt;</code>:在表达式为真时中断程序的运行</li><li><code>info line &lt;行号&gt;or&lt;函数名&gt;or&lt;文件名:行号&gt;or&lt;文件名:函数名&gt;</code>:显示所指定源代码运行时的内存地址</li><li><code>disassemble &lt;函数名&gt;</code>:该函数的机器指令(汇编码)</li><li>查看栈信息<br>　a.<code>bt &lt;n&gt;或&lt;-n&gt;</code>:打印栈顶n层或栈底n层信息,不加n则表示打印当前所有函数栈的信息<br>　b.<code>frame(f) &lt;n&gt;</code>:frame 0表示栈顶,依次类推,不加n则表示输出当前层<br>　c.<code>up &lt;n&gt;或down &lt;n&gt;</code>:向栈底移动n层或向栈顶移动一层,栈底处于高地址区域,栈顶处于低地址区域<br>　d.<code>info frame(f)</code>:显示当前层更为详细的信息<br>　e.<code>info args</code>:显示当前函数的参数名及值<br>　f.<code>info locals</code>:显示当前函数所有局部变量及值<br>　g.<code>info catch</code>:显示当前函数中的异常处理信息</li><li>显示源代码–list<br>　a.<code>list &lt;linenum&gt;</code>:显示第linenum行的周围的源程序<br>　b.<code>list &lt;function&gt;</code>:显示function函数的源程序<br>　c.<code>list</code>:显示当前行后面的源程序<br>　d.<code>list -</code>:显示当前行前面的源程序<br>　e.<code>list &lt;first&gt;,&lt;last&gt;</code>:first行到last行之间的源程序<br>　f.<code>list ,&lt;last&gt;</code>:当前行到last行之间的源程序</li><li>搜索源代码<br>　a.<code>search &lt;regexp&gt;</code>:正向搜索<br>　b.<code>reverse-search &lt;regexp&gt;</code>:反向搜索</li><li>指定源文件路径–directory<br>　a.<code>directory(dir) &lt;dirname1:dirname2&gt;</code>:添加路径到当前路径下<br>　b.<code>direcory</code>:清除所有自定义源文件搜索路径<br>　c.<code>show directories</code>:显示已定义的搜索路径</li><li><code>examine(x)/&lt;n/f/u&gt; &lt;addr&gt;</code>　<br>　n、f、u是可选参数<br>　n:是一个正整数,表示一个显示内存的长度,也就是说从当前地址向后显示几个地址的内容<br>　f:表示显示的格式<br>　u:表示往后请求的字节数,默认是4bytes,b表示单字节,h表示双字节,w表示4字节,g表示8字节<br>　<code>x/3uh 0x54320</code>表示从内存地址0x54320读取内容,h表示以双字节为一个单位,3表示3个单位,u表示以十进制无符号整型显示</li><li>设置显示选项:<code>show\set &lt;某个选项&gt; (状态)</code><br>　a.<code>set print address &lt;on/off&gt;</code>:系统默认打开,显示函数参数地址<br>　b.<code>set print array &lt;on/off&gt;</code>:系统默认关闭,显示数组元素是否占一行<br>　c.<code>set print elements &lt;number of elements&gt;</code>:显示数组最大显示长度,默认为0表示不做限制<br>　d.<code>set print null-stop &lt;on/off&gt;</code>:默认为off,表示字符串时，遇到结束符是否停止显示<br>　e.<code>set print pretty &lt;on/off&gt;</code>:为on时,结构体每个元素占一行<br>　f.<code>set print sevenbit-strings &lt;on/off&gt;</code>:为on时,字符显示ascll码<br>　g.<code>set print union &lt;on/off&gt;</code>:为on时,显示结构体中联合体数据<br>　h.<code>set print statci-members &lt;on/off&gt;</code>:是否显示c++对象中静态数据成员<br>　i.<code>set print object &lt;on/off&gt;</code>:是否按虚方法显示c++中的对象<br>　j.<code>set print vtbl &lt;on/off&gt;</code>:按规整的格式显示虚函数表<br>　k.<code>info frame</code>:查看当前函数语言<br>　l.<code>info source</code>:查看当前文件语言<br>　m.<code>show language</code>:查看当前语言环境<br>　n.<code>set language &lt;language&gt;</code>:设置语言环境</li><li><code>set</code>:可以用set设置gdb的环境变量,如:<code>set $i = 0</code>,为了不与环境变量冲突,设置程序中的值时最好用<code>set var xx=xx</code></li><li>寄存器情况<br>　a.<code>info registers</code>:查看除浮点寄存器外的所有寄存器<br>　b.<code>info all-registers</code>:查看所有寄存器<br>　c.<code>info registers &lt;regname&gt;</code>:查看指定寄存器</li><li>跳转<br>　a.<code>jump &lt;linespec or address&gt;</code>:可以是文件的行号、也可以是file:line、也可以是＋num偏移量、也可以是内存地址</li><li>产生信号量<br>　<code>signal &lt;1-15&gt;</code>:在断点处设置1-15的任意信号</li><li>强制函数返回<br>　<code>return (&lt;expression&gt;)</code>:忽略当前函数未执行语句,直接返回表达式的值</li><li>强制调用函数<br>　<code>cal &lt;expr&gt;</code>:调用某函数</li><li><code>ptype</code>:显示某个量的类型</li><li><code>until</code>:执行某个循环体直到结束</li></ul><h1 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h1><ul><li><code>layout</code>：用于分割窗口，可以一边查看代码，一边测试：</li><li><code>layout src</code>：显示源代码窗口</li><li><code>layout asm</code>：显示反汇编窗口</li><li><code>layout regs</code>：显示源代码&#x2F;反汇编和CPU寄存器窗口</li><li><code>layout split</code>：显示源代码和反汇编窗口</li><li>Ctrl+L:刷新窗口</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MariaDB</title>
    <link href="/2019/11/18/MariaDB/"/>
    <url>/2019/11/18/MariaDB/</url>
    
    <content type="html"><![CDATA[<h1 id="启动-关闭"><a href="#启动-关闭" class="headerlink" title="启动&#x2F;关闭"></a>启动&#x2F;关闭</h1><p>启动关闭用’systemctl’命令</p><h1 id="mysql命令行工具"><a href="#mysql命令行工具" class="headerlink" title="mysql命令行工具:"></a><code>mysql</code>命令行工具:</h1><ul><li><code>-h、--help</code>: 后接服务器地址,若是本地127.0.0.1,可以省略</li><li><code>-p、--port</code>: 后接端口,默认是3306</li><li><code>-u、--user</code>: 连接MariaDB服务器时用的用户名</li><li><code>-p、--password</code>: 连接MariaDB服务器的密码</li><li><code>-D、--database</code>: 连接MariaDB服务器时要使用的数据库</li><li><code>--auto-rehash</code>: 在mysql客户端程序内输入表或列名时，使用TAB键可以自动补全</li><li><code>--batch</code>: 以批处理模式(非交互模式)运行mysql客户端程序</li><li><code>--execute、-e</code>: mysql客户端程序在连接MariaDB服务器的同时执行参数给出的语句</li><li><code>--skip-column-names、-N</code>: 在mysql客户端中不显示查询结果中的列名</li><li><code>--safe-updates、-U</code>: 以安全模式运行mysql客户端，安全模式下防止误操作</li></ul><h1 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h1><p>默认数据库文件存放位置为:&#x2F;var&#x2F;lib&#x2F;mysql<br>读取配置文件顺序:&#x2F;etc&#x2F;my.cnf、&#x2F;etc&#x2F;mysql&#x2F;my.cnf、~&#x2F;.my.cnf</p><h1 id="创建、删除数据库"><a href="#创建、删除数据库" class="headerlink" title="创建、删除数据库"></a>创建、删除数据库</h1><ul><li><code>CREATE DATABASE 数据库名称 DEFAULT CHARACTER SET utf8mb4(指定字符集及排序方式)</code></li><li><code>DROP DATABASE 数据库名称</code></li></ul><h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><ul><li><code>USE test</code>进入指定的数据库test<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] tab_test (<br>tid <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>tname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>tmemo TEXT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (tid),<br>INDEX ix_tname_tid (tname,tid)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure>约束分为表约束和列约束，上述NOT NULL为列约束跟在每个列定义后面,而PRIMARY KEY为表约束可以指定多个列。<br>完整性约束的基本语法格式：<br>[CONSTRAINT&lt;约束名&gt;]&lt;约束类型&gt;,中括号中内容可以省略,约束类型有:NULL&#x2F;NOT NULL、UNIQUE、PRIMARY KEY、FOREIGN KEY、CHECK。 其中外键约束格式为:FOREIGN KEY REFERENCES &lt;主表名&gt;(&lt;列名&gt;),CHECK:CHECK(&lt;约束条件&gt;),约束条件举例:CHECK (Score&gt;&#x3D;0 AND Score&lt;&#x3D;100)</li></ul><h1 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h1><p><code>SHOW CREATE TABLE test</code><br>修改数据表格式<br>(待建设,各种情形不同处理,有点复杂)</p><h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><p><code>DROP TABLE &lt;表名&gt;</code></p><h1 id="插入元组数据"><a href="#插入元组数据" class="headerlink" title="插入元组数据"></a>插入元组数据</h1><p><code>INSERT INTO test (fd1,fd2) VALUES (1,&#39;Matt&#39;) ON DUPLICATE KEY UPDATE fd2=&#39;Matt&#39;;</code>ON DUPLICATE KEY UPDATE选项可以确保若记录已存在则执行UPDATE,否则执行INSERT;</p><h1 id="检索元祖数据"><a href="#检索元祖数据" class="headerlink" title="检索元祖数据"></a>检索元祖数据</h1><ul><li><code>SELECT * FROM tab_test;</code></li><li><code>SELECT * FROM tab_test WHERE fd1=1;</code><br>条件查询可以有NOT、AND、OR(优先级从高到低);BETWEEN…AND…;IN(&lt;值1&gt;、&lt;值2&gt;);LIKE&lt;字符串常量&gt;(‘张％’代表姓张的人,<code>_力%</code>代表第二个字是力,%匹配0或多个字符);</li></ul><h2 id="统计汇总查询常用函数"><a href="#统计汇总查询常用函数" class="headerlink" title="统计汇总查询常用函数"></a>统计汇总查询常用函数</h2><ul><li>AVG:按列计算平均值</li><li>SUM:按列计算值的总和</li><li>MAX:求一列中的最大值</li><li>MIN:求一列中的最小值</li><li>COUNT:按列值计算个数<br>例子:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(Score) <span class="hljs-keyword">AS</span> MaxScore,<br>   <span class="hljs-built_in">MIN</span>(Score) <span class="hljs-keyword">AS</span> MinScore,<br>   <span class="hljs-built_in">MAX</span>(Score)<span class="hljs-operator">-</span><span class="hljs-built_in">MIN</span>(Score) <span class="hljs-keyword">AS</span> Diff <br>   <span class="hljs-keyword">FROM</span> SC <br>       <span class="hljs-keyword">WHERE</span>(CNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C1&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><code>SELECT COUNT(DISTINCT Dept) AS DeptNum FROM S</code>DISTINCT关键字消除重复</li><li><code>SELECT fd2 FROM tab_test;</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SNo,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> SC_Num<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SNo<br><span class="hljs-keyword">HAVING</span>(<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>这GROUP BY后面的属性表示若其相同，将在同一行呈现(相当于DISTINCT),但count将计算当前组的个数，而HAVING则是对GROUP BY进一步筛选,不能用where。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SNo,CNo,Score<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> CNo <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>,<span class="hljs-string">&#x27;C4&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SNo,Score <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure>学号升序，分数降序排列</li><li><code>SELECT * FROM tab_test\G</code>注意这没有分号,按列输出记录</li></ul><h2 id="多表内连接查询"><a href="#多表内连接查询" class="headerlink" title="多表内连接查询"></a>多表内连接查询</h2><ul><li>方法一:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> T.TNo,TN,CNo<br><span class="hljs-keyword">FROM</span> T,TC<br><span class="hljs-keyword">WHERE</span> (T.TNo<span class="hljs-operator">=</span>TC.TNo) <span class="hljs-keyword">AND</span>(TN<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘伟&#x27;</span>)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>这里TN<span class="hljs-operator">=</span>‘刘伟为查询条件’T.TNo<span class="hljs-operator">=</span>TC.TNo为连接条件，TNo为连接字段<br></code></pre></td></tr></table></figure></li><li>方法二:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> T.TNo,TN,CNo <br><span class="hljs-keyword">FROM</span> T <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> TC<br><span class="hljs-keyword">ON</span> T.TNo<span class="hljs-operator">=</span>TC.TNo <span class="hljs-keyword">WHERE</span>(TN<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘伟&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="多表外连接查询"><a href="#多表外连接查询" class="headerlink" title="多表外连接查询"></a>多表外连接查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> S.SNo,SN,CN,Score<br><span class="hljs-keyword">FROM</span> S<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> SC<br><span class="hljs-keyword">ON</span> S.SNo<span class="hljs-operator">=</span>SC.SNo<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> C<br><span class="hljs-keyword">ON</span> C.CNo<span class="hljs-operator">=</span>SC.CNo<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>外链接不符合条件的将置为<span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><h2 id="多表交叉查询"><a href="#多表交叉查询" class="headerlink" title="多表交叉查询"></a>多表交叉查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> C<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>行数两个表行的乘积，列数为两个表的列数和<br></code></pre></td></tr></table></figure><h2 id="自连接查询-例子为查询所有比”刘伟”工资高的教师姓名、工资和刘伟的工资"><a href="#自连接查询-例子为查询所有比”刘伟”工资高的教师姓名、工资和刘伟的工资" class="headerlink" title="自连接查询(例子为查询所有比”刘伟”工资高的教师姓名、工资和刘伟的工资)"></a>自连接查询(例子为查询所有比”刘伟”工资高的教师姓名、工资和刘伟的工资)</h2><ul><li>方法一:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> X.TN,X.Sal <span class="hljs-keyword">AS</span> Sal_a,Y.Sal <span class="hljs-keyword">AS</span> Sal_b<br><span class="hljs-keyword">FROM</span> T <span class="hljs-keyword">AS</span> X,T <span class="hljs-keyword">AS</span> Y<br><span class="hljs-keyword">WHERE</span> X.Sal<span class="hljs-operator">&gt;</span>Y.Sal <span class="hljs-keyword">AND</span> Y.TN<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘伟&#x27;</span><br></code></pre></td></tr></table></figure></li><li>方法二:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> X.TN,X.Sal,Y.Sal<br><span class="hljs-keyword">FROM</span> T <span class="hljs-keyword">AS</span> X <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> T <span class="hljs-keyword">AS</span> Y<br><span class="hljs-keyword">ON</span> X.Sal<span class="hljs-operator">&gt;</span>Y.Sal<br><span class="hljs-keyword">AND</span> Y.TN<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘伟&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="普通子查询"><a href="#普通子查询" class="headerlink" title="普通子查询"></a>普通子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> TNo,TN<br><span class="hljs-keyword">FROM</span> T<br><span class="hljs-keyword">WHERE</span> Prof<span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> Prof <br><span class="hljs-keyword">FROM</span> T<br><span class="hljs-keyword">WHERE</span> TN<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘伟&#x27;</span>)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询与刘伟老师相同职称的老师姓名与工号<br><span class="hljs-keyword">SELECT</span> TN<br><span class="hljs-keyword">FROM</span> T<br><span class="hljs-keyword">WHERE</span> (TNo <span class="hljs-operator">=</span> <span class="hljs-keyword">ANY</span> (<span class="hljs-keyword">SELECT</span> TNo<br><span class="hljs-keyword">FROM</span> TC<br><span class="hljs-keyword">WHERE</span> CNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C5&#x27;</span>))<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询讲授课程号为C5的教师姓名<br></code></pre></td></tr></table></figure><h2 id="相关子查询-它先对外查询中每一条记录进行比对，这与普通子查询不同，普通子查询先执行子查询"><a href="#相关子查询-它先对外查询中每一条记录进行比对，这与普通子查询不同，普通子查询先执行子查询" class="headerlink" title="相关子查询(它先对外查询中每一条记录进行比对，这与普通子查询不同，普通子查询先执行子查询)"></a>相关子查询(它先对外查询中每一条记录进行比对，这与普通子查询不同，普通子查询先执行子查询)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> TN<br><span class="hljs-keyword">FROM</span> T<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> TC<br><span class="hljs-keyword">WHERE</span> TNo<span class="hljs-operator">=</span>T.TNo <span class="hljs-keyword">AND</span> CNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C5&#x27;</span>)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询讲授课程为C5的教师姓名<br></code></pre></td></tr></table></figure><h2 id="合并查询-就是把结果合并到一起"><a href="#合并查询-就是把结果合并到一起" class="headerlink" title="合并查询(就是把结果合并到一起)"></a>合并查询(就是把结果合并到一起)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SNo <span class="hljs-keyword">AS</span> 学号,<span class="hljs-built_in">SUM</span>(Score) <span class="hljs-keyword">AS</span> 总分<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> (SNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S1&#x27;</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SNo<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> SNo <span class="hljs-keyword">AS</span> 学号,<span class="hljs-built_in">SUM</span>(Score) <span class="hljs-keyword">AS</span> 总分<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> (SNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S5&#x27;</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SNo<br></code></pre></td></tr></table></figure><h2 id="存储查询"><a href="#存储查询" class="headerlink" title="存储查询"></a>存储查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SNo <span class="hljs-keyword">AS</span> 学号,<span class="hljs-built_in">SUM</span>(Score) <span class="hljs-keyword">AS</span> 总分<br><span class="hljs-keyword">INTO</span> Cal_Table<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SNo<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>如果在新表名前面加个#则是临时表，关闭则消失<br></code></pre></td></tr></table></figure><h1 id="修改元祖数据"><a href="#修改元祖数据" class="headerlink" title="修改元祖数据"></a>修改元祖数据</h1><p><code>UPDATE tab_test SET fd2=&#39;Brandon&#39; WHERE fd1=1</code>如果没有WHERE则所有元祖的fd2都将改变，请一定小心<br><code>REPLACE tab_test SET fd1=1,fd2=&#39;Matt&#39;;</code>若记录存在执行UPDATE,否则执行INSERT,最好用INSERT加ON DUPLICATE KEY UPDATE命令,资源消耗更小。</p><h1 id="删除元祖数据"><a href="#删除元祖数据" class="headerlink" title="删除元祖数据"></a>删除元祖数据</h1><p><code>DELETE FROM tab_test WHERE fd1=1;</code>同理没有WHERE将会删除所有元组</p><h1 id="视图-是一个虚表-基于基本表，对其修改会影响基本表，但本身不占内存"><a href="#视图-是一个虚表-基于基本表，对其修改会影响基本表，但本身不占内存" class="headerlink" title="视图(是一个虚表,基于基本表，对其修改会影响基本表，但本身不占内存)"></a>视图(是一个虚表,基于基本表，对其修改会影响基本表，但本身不占内存)</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> Sub_T<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> TNo,TN,Prof<br><span class="hljs-keyword">FROM</span> T<br><span class="hljs-keyword">WHERE</span> Dept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机&#x27;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建一个计算机系老师情况的视图Sub_T<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> S_SC_C(SN,CN,Score)<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> SN,CN,Score<br> <span class="hljs-keyword">FROM</span> S,C,SC<br> <span class="hljs-keyword">WHERE</span> S.SNo<span class="hljs-operator">=</span>SC.SNo <span class="hljs-keyword">AND</span> SC.CNo<span class="hljs-operator">=</span>C.CNo<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改,就是查询内容的覆盖<br></code></pre></td></tr></table></figure><p>对表的操作适用于视图，可以通过视图简化操作</p><h1 id="索引-待建"><a href="#索引-待建" class="headerlink" title="索引(待建)"></a>索引(待建)</h1><h1 id="规则约束"><a href="#规则约束" class="headerlink" title="规则约束"></a>规则约束</h1><h2 id="创建规则"><a href="#创建规则" class="headerlink" title="创建规则"></a>创建规则</h2><p><code>CREATE RULE age_rule AS@age &gt;=18and @age &lt;= 50</code></p><h2 id="将规则绑定到数据库的对象上，或者将规则从数据库的对象上松绑"><a href="#将规则绑定到数据库的对象上，或者将规则从数据库的对象上松绑" class="headerlink" title="将规则绑定到数据库的对象上，或者将规则从数据库的对象上松绑"></a>将规则绑定到数据库的对象上，或者将规则从数据库的对象上松绑</h2><p>用sp_bindrule绑定规则<br><code>EXEC sp_bindrule &#39;age_rule&#39;,&#39;S.Age&#39;</code>对已输入的数据不起作用<br><code>EXEC sp_unbindrule &#39;S.Age&#39;</code>解绑</p><h2 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h2><p><code>DROP RULE age_rule</code>删除前必须先解绑</p><h1 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h1><h2 id="创建默认"><a href="#创建默认" class="headerlink" title="创建默认"></a>创建默认</h2><p><code>CREATE DEFAULT birthday_defa AS &#39;1978-1-1&#39;</code></p><h2 id="查看默认"><a href="#查看默认" class="headerlink" title="查看默认"></a>查看默认</h2><p><code>EXEC sp_helptext birthday_defa</code></p><h2 id="默认的绑定与解绑"><a href="#默认的绑定与解绑" class="headerlink" title="默认的绑定与解绑"></a>默认的绑定与解绑</h2><p><code>EXEC sp_bindefault &#39;birthday_defa&#39; &#39;S.[Birthday]&#39;</code><br><code>EXEC sp_unbinefault &#39;S.[Birthday]&#39;</code></p><h2 id="删除默认"><a href="#删除默认" class="headerlink" title="删除默认"></a>删除默认</h2><p><code>DROP DEFAULT birthday_defa</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++标准库</title>
    <link href="/2019/08/10/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/2019/08/10/C-%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h1><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">c.resize(n)</td><td align="center">调整c的大小为n个元素。要么多出的元素被丢弃,要么新添加默认值的元素</td></tr><tr><td align="center">c.resize(n,t)</td><td align="center">调整c的大小为n个元素。任何新添加的元素初始为t</td></tr><tr><td align="center">c.shrink_to_fit()</td><td align="center">只适用于vector,string和deque。将capacity()减少与size()相同大小</td></tr><tr><td align="center">c.capacity()</td><td align="center">只适用于vector和string,返回c可以保存多少元素</td></tr><tr><td align="center">c.reserve(n)</td><td align="center">只适用于vector和string,分配至少容纳n个元素的内存空间</td></tr><tr><td align="center">c.assign(i1)</td><td align="center">将c中的元素全部替换为i1元素,i1可以和c类型不同,但元素必须相同,甚至可以是map与set类型</td></tr><tr><td align="center">c.assign(n,t)</td><td align="center">将c中的元素全部换为n个t</td></tr></tbody></table><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><p>格式:<code>priority_queue&lt;Type,Container,Functional&gt;</code><br>例子:<code>priority_queue&lt;int,vector&lt;int&gt;,myCompare&gt;</code>,myCompare可以替换为less<int>降序,greater<int>升序</p><h1 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h1><h2 id="cmath"><a href="#cmath" class="headerlink" title="cmath"></a>cmath</h2><ul><li>fabs(x) computes absolute value, |x|, C++11</li><li>exp(x) returns e raised to the given powerx</li><li>exp2(x) returns 2 raised to the given power , C++11</li><li>log(x) computes natural (base e) logarithm, loge (x)</li><li>log10(x) computes base 10 logarithm, log10(x)</li><li>log2(x) computes base 2 logarithm, log2 (x), C++11</li><li>pow(x, y) raises a number to the given power, x y</li><li>sqrt(x) computes square root</li><li>cqrt(x) computes cubic root x, C++11</li><li>sin(x) computes sine, sin(x)</li><li>cos(x) computes cosine, cos(x)</li><li>tan(x) computes tangent, tan(x)</li><li>ceil(x) nearest integer not less than the given value, ⌈x⌉</li><li>floor(x) nearest integer not greater than the given value, ⌊x⌋</li><li>atan2(y,x)</li><li>atan(y)</li><li>asin()</li><li>acos()</li><li>round|lround|llround(x) nearest integer(x+0.5),  (return type: floating point, long, long long respectivel</li></ul><h2 id="limits"><a href="#limits" class="headerlink" title="limits"></a>limits</h2><ul><li><code>T numeric_limits&lt;T&gt;:: max()</code></li><li><code>T numeric_limits&lt;T&gt;:: min()</code></li><li><code>T numeric_limits&lt;T&gt;:: lowest()</code></li></ul><h2 id="numeric-c-20"><a href="#numeric-c-20" class="headerlink" title="numeric(c++20)"></a>numeric(c++20)</h2><ul><li><code>e</code> Euler number e</li><li><code>pi</code> π</li><li><code>phi</code>黄金分割比率</li><li><code>sqrt2</code></li></ul><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><ul><li>选择随机种子seed(随机引擎的初始值)</li><li>定义随机引擎<code>&lt;type of random engine&gt; generator(seed)</code></li><li>定义分布<code>&lt;type of distribution&gt; distribution(range start, range end)</code></li><li>产生随机数<code>distribution(generator)</code></li></ul><h2 id="产生种子"><a href="#产生种子" class="headerlink" title="产生种子"></a>产生种子</h2><ul><li>自定义：<code>unsigned seed = 2</code>,注意相同种子，产生的随机序列是一样的</li><li>使用时间<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-type">unsigned</span> seed = std::chrono::system_clock::<span class="hljs-built_in">now</span>()<br>.<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><span class="hljs-function">std::default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="使用random-device"><a href="#使用random-device" class="headerlink" title="使用random_device"></a>使用random_device</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br>std::random_device rnd_device;<br><span class="hljs-function">std::default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(rnd_device())</span></span>;<br></code></pre></td></tr></table></figure><h3 id="使用seed-seq"><a href="#使用seed-seq" class="headerlink" title="使用seed seq"></a>使用seed seq</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-type">unsigned</span> seed1 = std::chrono::system_clock::<span class="hljs-built_in">now</span>()<br>.<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><span class="hljs-type">unsigned</span> seed2 = seed1 + <span class="hljs-number">1000</span>;<br>std::seed_seq seq1&#123; seed1, seed2 &#125;;<br><span class="hljs-function">std::default_random_engine <span class="hljs-title">generator1</span><span class="hljs-params">(seq)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h2><p>以下方法支持bitwise，性能更好<br>rotate left : std::rotl<br>rotate right : std::rotr<br>count leading zero : std::countl zero<br>count leading one : std::countl one<br>count trailing zero : std::countr zero<br>count trailing one : std::countr one<br>population count : std::popcount</p><h2 id="随机引擎"><a href="#随机引擎" class="headerlink" title="随机引擎"></a>随机引擎</h2><p>三种随机引擎的对比</p><table><thead><tr><th align="center">Generator</th><th align="center">Quality</th><th align="center">Period</th><th align="center">Randomness</th><th align="center">C++引擎</th></tr></thead><tbody><tr><td align="center">Linear Congruential</td><td align="center">Poor</td><td align="center">10^9</td><td align="center">Statistical tests</td><td align="center">std::minstd_rand,std::minstd_rand0,std::knuth_b</td></tr><tr><td align="center">Mersenne Twister 32&#x2F;64-bit</td><td align="center">High</td><td align="center">10^6000</td><td align="center">Statistical tests</td><td align="center">std::mt19937,std::19937_64</td></tr><tr><td align="center">Subtract-with-carry 24&#x2F;48-bit</td><td align="center">Highest</td><td align="center">10^171</td><td align="center">Mathematically proven</td><td align="center">std::ranlux24_base,std::ranlux48_base,std::ranlux24,std::ranlux48</td></tr></tbody></table><h2 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h2><ul><li><code>uniform int distribution&lt;T&gt;(range start, range end)</code> where T is integral type</li><li><code>uniform real distribution&lt;T&gt;(range start, range end)</code> where T is floating point type</li><li><code>normal distribution&lt;T&gt;(mean, std dev)</code>where T is floating point type</li><li><code>exponential distribution&lt;T&gt;(lambda)</code>where T is floating point type</li></ul><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><ul><li><code>Wall-Clock/Real time</code> It is the human perception of the passage of time from the start to the completion of a task(整个程序的时间)</li><li><code>User/CPU time</code> The amount of time spent by the CPU to compute in user code(用户空间的执行时间)</li><li><code>System time</code> The amount of time spent by the CPU to compute system calls (including I&#x2F;O calls) executed into kernel code(内核消耗的时间)<br>如果程序是但线程并且系统负载不高则有：<br>Wall-clock time &#x3D; User time + System time</li></ul><h2 id="Real-Time"><a href="#Real-Time" class="headerlink" title="Real Time"></a>Real Time</h2><h3 id="linux系统调用"><a href="#linux系统调用" class="headerlink" title="linux系统调用"></a>linux系统调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># include &lt;time.h&gt; //struct timeval</span><br><span class="hljs-comment"># include &lt;sys/time.h&gt; //gettimeofday()</span><br>struct timeval start, end; // timeval &#123;second, microseconds&#125;<br>::gettimeofday(&amp;start, NULL);<br>... // code<br>::gettimeofday(&amp;end, NULL);<br>long start_time = start.tv_sec * 1000000 + start.tv_usec;<br>long end_time = end.tv_sec * 1000000 + end.tv_usec;<br>cout &lt;&lt; <span class="hljs-string">&quot;Elapsed: &quot;</span> &lt;&lt; <span class="hljs-string">end_time - start_time; // in microsec</span><br></code></pre></td></tr></table></figure><h3 id="chrono"><a href="#chrono" class="headerlink" title="chrono"></a>chrono</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-keyword">auto</span> start_time = std::chrono::system_clock::<span class="hljs-built_in">now</span>();<br>... <span class="hljs-comment">// code</span><br><span class="hljs-keyword">auto</span> end_time = std::chrono::system_clock::<span class="hljs-built_in">now</span>();<br>std::chrono::duration&lt;<span class="hljs-type">double</span>&gt; diff = end_time - start_time;<br>cout &lt;&lt; <span class="hljs-string">&quot;Elapsed: &quot;</span> &lt;&lt; diff.<span class="hljs-built_in">count</span>(); <span class="hljs-comment">// in seconds</span><br>cout &lt;&lt; std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;milli&gt;(diff).<span class="hljs-built_in">count</span>(); <span class="hljs-comment">// in ms</span><br></code></pre></td></tr></table></figure><h2 id="User-Time"><a href="#User-Time" class="headerlink" title="User Time"></a>User Time</h2><h3 id="chrono-1"><a href="#chrono-1" class="headerlink" title="chrono"></a>chrono</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-type">clock_t</span> start_time = std::<span class="hljs-built_in">clock</span>();<br>... <span class="hljs-comment">// code</span><br><span class="hljs-type">clock_t</span> end_time = std::<span class="hljs-built_in">clock</span>();<br><span class="hljs-type">float</span> diff = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(end_time - start_time) / CLOCKS_PER_SEC;<br>cout &lt;&lt; <span class="hljs-string">&quot;Elapsed: &quot;</span> &lt;&lt; diff; <span class="hljs-comment">// in seconds</span><br></code></pre></td></tr></table></figure><h3 id="系统调用-包含内核时间的计算方法"><a href="#系统调用-包含内核时间的计算方法" class="headerlink" title="系统调用(包含内核时间的计算方法)"></a>系统调用(包含内核时间的计算方法)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/times.h&gt;</span></span><br><span class="hljs-keyword">struct</span> ::tms start_time, end_time;<br>::<span class="hljs-built_in">times</span>(&amp;start_time);<br>... <span class="hljs-comment">// code</span><br>::<span class="hljs-built_in">times</span>(&amp;end_time);<br><span class="hljs-keyword">auto</span> user_diff = end_time.tmus_utime - start_time.tms_utime;<br><span class="hljs-keyword">auto</span> sys_diff = end_time.tms_stime - start_time.tms_stime;<br><span class="hljs-type">float</span> user = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(user_diff) / ::<span class="hljs-built_in">sysconf</span>(_SC_CLK_TCK);<br><span class="hljs-type">float</span> sys = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(sys_diff) / ::<span class="hljs-built_in">sysconf</span>(_SC_CLK_TCK);<br>cout &lt;&lt; <span class="hljs-string">&quot;user time: &quot;</span> &lt;&lt; user; <span class="hljs-comment">// in seconds</span><br>cout &lt;&lt; <span class="hljs-string">&quot;system time: &quot;</span> &lt;&lt; sys; <span class="hljs-comment">// in seconds</span><br></code></pre></td></tr></table></figure><h1 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><span class="hljs-function">std::tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">float</span>, <span class="hljs-type">char</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">7</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;; &#125;<br><span class="hljs-function">std::tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>, <span class="hljs-type">float</span>&gt; <span class="hljs-title">tuple1</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">2.2f</span>)</span></span>;<br><span class="hljs-keyword">auto</span> tuple2 = std::<span class="hljs-built_in">make_tuple</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">1.5f</span>);<br>cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(tuple1); <span class="hljs-comment">// print 3</span><br>cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">1</span>&gt;(tuple1); <span class="hljs-comment">// print &#x27;c&#x27;</span><br>cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">2</span>&gt;(tuple1); <span class="hljs-comment">// print 2.2f</span><br>cout &lt;&lt; (tuple1 &gt; tuple2); <span class="hljs-comment">// print true</span><br><span class="hljs-keyword">auto</span> concat = std::<span class="hljs-built_in">tuple_cat</span>(tuple1, tuple2);<br>cout &lt;&lt; std::tuple_size&lt;<span class="hljs-keyword">decltype</span>(concat)&gt;::value; <span class="hljs-comment">// print 6</span><br><span class="hljs-keyword">using</span> T = std::tuple_element&lt;<span class="hljs-number">4</span>, <span class="hljs-keyword">decltype</span>(concat)&gt;::type; <span class="hljs-comment">// T is int</span><br><span class="hljs-type">int</span> value1; <span class="hljs-type">float</span> value2;<br>std::<span class="hljs-built_in">tie</span>(value1, value2, std::ignore) = <span class="hljs-built_in">f</span>();<span class="hljs-comment">//creates a tuple of references to its arguments</span><br>std::<span class="hljs-built_in">swap</span>(tuple1,tuple2);<br></code></pre></td></tr></table></figure><h1 id="variant-c-17"><a href="#variant-c-17" class="headerlink" title="variant(c++17)"></a>variant(c++17)</h1><p>代替联合体union，类型安全(切换类型前会自动析构)，见<a href="https://en.cppreference.com/w/cpp/utility/variant">variant</a></p><ul><li>构造：<code>std::variant&lt;int, float&gt; tmp</code></li><li>获取类型个数：<code>std::variant_size_v&lt;decltype(tmp)&gt; // 2</code></li><li>获取下标：<code>tmp = 3.2; tmp.index() // 1</code></li><li>判断当前值类型：<code>hold_alternative&lt;float&gt; tmp // true</code></li><li>获取当前值类型：<code>static_assert(std::is_same_v&lt;int, variant_alternative_t&lt;0, tmp&gt;&gt;) // int</code></li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">std</span>::variant&lt;<span class="hljs-type">int</span>, <span class="hljs-type">float</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; tmp;<br>tmp = <span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-built_in">std</span>::get&lt;<span class="hljs-type">int</span>&gt;(tmp); <span class="hljs-comment">// throw exception</span><br><span class="hljs-type">int</span>* s = <span class="hljs-built_in">std</span>::get_if&lt;<span class="hljs-type">int</span>&gt;(tmp); <span class="hljs-comment">// no throw, but return null</span><br><span class="hljs-built_in">string</span> g = <span class="hljs-built_in">std</span>::get&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;(tmp); <span class="hljs-comment">//success</span><br></code></pre></td></tr></table></figure><h2 id="visitor"><a href="#visitor" class="headerlink" title="visitor"></a>visitor</h2><p>It is also possible to query the index at run-time depending on the type currently being held by providing a visitor</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;variant&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Visitor</span> &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; value)</span> </span>&#123; value *= <span class="hljs-number">2</span>; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">float</span>&amp; value)</span> </span>&#123; value += <span class="hljs-number">3.0f</span>; &#125; <span class="hljs-comment">// &lt;--</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">bool</span>&amp; value)</span> </span>&#123; value = <span class="hljs-literal">true</span>; &#125;<br>&#125;;<br><span class="hljs-function">std::variant&lt;<span class="hljs-type">int</span>, <span class="hljs-type">float</span>, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">3.3f</span>)</span></span>;<br>std::<span class="hljs-built_in">visit</span>(v, Visitor&#123;&#125;);<br>cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-type">float</span>&gt;(v); <span class="hljs-comment">// 6.3f</span><br></code></pre></td></tr></table></figure><h1 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;optional&gt;</span></span><br><span class="hljs-function">std::optional&lt;std::string&gt; <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* set, <span class="hljs-type">char</span> value)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (set[i] == value)<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> &#123;&#125;; <span class="hljs-comment">// std::nullopt;</span><br>&#125;<br>=============================<br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;optional&gt;</span></span><br><span class="hljs-type">char</span> set[] = <span class="hljs-string">&quot;sdfslgfsdg&quot;</span>;<br><span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">find</span>(set, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// &#x27;a&#x27; is not present</span><br><span class="hljs-keyword">if</span> (!x)<br>cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span>;<br><span class="hljs-keyword">if</span> (!x.<span class="hljs-built_in">has_value</span>())<br>cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span>;<br><span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">find</span>(set, <span class="hljs-string">&#x27;l&#x27;</span>);<br>cout &lt;&lt; *y &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y.<span class="hljs-built_in">value</span>(); <span class="hljs-comment">// print &#x27;4&#x27; &#x27;4&#x27;</span><br>x.<span class="hljs-built_in">value_or</span>(<span class="hljs-number">-1</span>); <span class="hljs-comment">// returns &#x27;-1&#x27;</span><br>y.<span class="hljs-built_in">value_or</span>(<span class="hljs-number">-1</span>); <span class="hljs-comment">// returns &#x27;4&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="any"><a href="#any" class="headerlink" title="any"></a>any</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;any&gt;</span></span><br>std::any var = <span class="hljs-number">1</span>; <span class="hljs-comment">// int</span><br>cout &lt;&lt; var.<span class="hljs-built_in">type</span>().<span class="hljs-built_in">name</span>(); <span class="hljs-comment">// print &#x27;i&#x27;</span><br>cout &lt;&lt; std::<span class="hljs-built_in">any_cast</span>&lt;<span class="hljs-type">int</span>&gt;(var);<br><span class="hljs-comment">// cout &lt;&lt; std::any_cast&lt;float&gt;(var); // exception!!</span><br>var = <span class="hljs-number">3.14</span>; <span class="hljs-comment">// double</span><br>cout &lt;&lt; std::<span class="hljs-built_in">any_cast</span>&lt;<span class="hljs-type">double</span>&gt;(var);<br>var.<span class="hljs-built_in">reset</span>();<br>cout &lt;&lt; var.<span class="hljs-built_in">has_value</span>(); <span class="hljs-comment">// print &#x27;false&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="stacktrace-c-23"><a href="#stacktrace-c-23" class="headerlink" title="stacktrace(c++23)"></a>stacktrace(c++23)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;print&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stacktrace&gt;</span> <span class="hljs-comment">// the program must be linked with the library</span></span><br><span class="hljs-comment">// -lstdc++_libbacktrace</span><br><span class="hljs-comment">// (-lstdc++exp with gcc-14 trunk)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">auto</span> call_stack = std::stacktrace::<span class="hljs-built_in">current</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; entry : call_stack)<br>std::<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;\n&quot;</span>, entry);<span class="hljs-comment">//entry.description()entry.source_file(),entry.source_line()</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">g</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">f</span>(); &#125;<br></code></pre></td></tr></table></figure><h1 id="filesystem-c-17"><a href="#filesystem-c-17" class="headerlink" title="filesystem(c++17)"></a>filesystem(c++17)</h1><ul><li>Follow the Boost filesystem library</li><li>Based on POSIX</li><li>Fully-supported from clang 7, gcc 8, etc.</li><li>Work on Windows, Linux, Android, etc.</li></ul><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><h3 id="member-function"><a href="#member-function" class="headerlink" title="member function"></a>member function</h3><ul><li>root_name()</li><li>relative_path()</li><li>parent_path()</li><li>filename()</li><li>extension()</li></ul><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><ul><li>exists(path)</li><li>file_size(path)</li><li>is_directory(path)</li><li>is_empty(path)</li><li>is_regular_file(path):return true if path is no dir,hard link,soft link</li><li>copy(path1, path2)</li><li>copy_file(src_path, src_path, [fs::copy_options::recursive])</li><li>create_directory(path)</li><li>remove(path):remove a file or empty directory</li><li>remove_all(path)</li><li>rename(old_path,new_path)</li></ul><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> fs = std::filesystem;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; path : fs::<span class="hljs-built_in">directory_iterator</span>(<span class="hljs-string">&quot;/usr/tmp/&quot;</span>))<br>cout &lt;&lt; path &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; path : fs::<span class="hljs-built_in">recursive_directory_iterator</span>(<span class="hljs-string">&quot;/usr/tmp/&quot;</span>))<br>cout &lt;&lt; path &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;filesystem&gt;</span> <span class="hljs-comment">// required</span></span><br><span class="hljs-keyword">namespace</span> fs = std::filesystem;<br>fs::path p1 = <span class="hljs-string">&quot;/usr/tmp/my_file.txt&quot;</span>;<br>cout &lt;&lt; p1.<span class="hljs-built_in">exists</span>(); <span class="hljs-comment">// true</span><br>cout &lt;&lt; p1.<span class="hljs-built_in">parent_path</span>(); <span class="hljs-comment">// &quot;/usr/tmp/&quot;</span><br>cout &lt;&lt; p1.<span class="hljs-built_in">filename</span>(); <span class="hljs-comment">// &quot;my_file&quot;</span><br>cout &lt;&lt; p1.<span class="hljs-built_in">extension</span>(); <span class="hljs-comment">// &quot;txt&quot;</span><br>cout &lt;&lt; p1.<span class="hljs-built_in">is_directory</span>(); <span class="hljs-comment">// false</span><br>cout &lt;&lt; p1.<span class="hljs-built_in">is_regular_file</span>(); <span class="hljs-comment">// true</span><br>fs::<span class="hljs-built_in">create_directory</span>(<span class="hljs-string">&quot;/my_dir/&quot;</span>);<br>fs::<span class="hljs-built_in">copy</span>(p1.<span class="hljs-built_in">parent_path</span>(), <span class="hljs-string">&quot;/my_dir/&quot;</span>, fs::copy_options::recursive);<br>fs::<span class="hljs-built_in">copy_file</span>(p1, <span class="hljs-string">&quot;/my_dir/my_file2.txt&quot;</span>);<br>fs::<span class="hljs-built_in">remove</span>(p1);<br>fs::<span class="hljs-built_in">remove_all</span>(p1.<span class="hljs-built_in">parent_path</span>());<br></code></pre></td></tr></table></figure><h1 id="多线程库"><a href="#多线程库" class="headerlink" title="多线程库"></a>多线程库</h1><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;thread &quot;</span> &lt;&lt; id &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>std::vector&lt;std::thread&gt; thread_vect; <span class="hljs-comment">// thread vector</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>thread_vect.<span class="hljs-built_in">push_back</span>( std::<span class="hljs-built_in">thread</span>(&amp;f, i) );<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; th : thread_vect)<br>th.<span class="hljs-built_in">join</span>();<br>thread_vect.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">// thread + lambda expression</span><br>thread_vect.<span class="hljs-built_in">push_back</span>(<br>std::<span class="hljs-built_in">thread</span>( []()&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;thread\n&quot;</span>; &#125; );<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">类别</th><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">库函数</td><td align="center"><code>std::this_thread::get_id()</code></td><td align="center">返回线程id</td></tr><tr><td align="center">库函数</td><td align="center"><code>std::this_thread::sleep_for(sleep_duration)</code></td><td align="center">blocks the thread</td></tr><tr><td align="center">库函数</td><td align="center"><code>std::thread::hardware_concurrency()</code></td><td align="center">returns the number of concurrent threads supported by the implementation</td></tr><tr><td align="center">对象方法</td><td align="center"><code>get_id()</code></td><td align="center">returns the thread id</td></tr><tr><td align="center">对象方法</td><td align="center"><code>join()</code></td><td align="center">waits for a thread to finish its execution</td></tr><tr><td align="center">对象方法</td><td align="center"><code>detach()</code></td><td align="center">permits the thread to execute independently of the thread handle</td></tr></tbody></table><h2 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h2><h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><h2 id="future"><a href="#future" class="headerlink" title="future"></a>future</h2><p>The future library provides facilities to obtain values that are returned and to catch exceptions that are thrown by asynchronous tasks</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span> <span class="hljs-comment">// numeric, algorithm, vector, iostream</span></span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> RandomIt&gt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parallel_sum</span><span class="hljs-params">(RandomIt beg, RandomIt end)</span> </span>&#123;<br><span class="hljs-keyword">auto</span> len = end - beg;<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">1000</span>) <span class="hljs-comment">// base case</span><br><span class="hljs-keyword">return</span> std::<span class="hljs-built_in">accumulate</span>(beg, end, <span class="hljs-number">0</span>);<br>RandomIt mid = beg + len / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">auto</span> handle = std::<span class="hljs-built_in">async</span>(std::launch::async, <span class="hljs-comment">// right side</span><br>parallel_sum&lt;RandomIt&gt;, mid, end);<br><span class="hljs-type">int</span> sum = <span class="hljs-built_in">parallel_sum</span>(beg, mid); <span class="hljs-comment">// left side</span><br><span class="hljs-keyword">return</span> sum + handle.<span class="hljs-built_in">get</span>(); <span class="hljs-comment">// left + right</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10000</span>, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">// init all to 1</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;The sum is &quot;</span> &lt;&lt; <span class="hljs-built_in">parallel_sum</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>std::future methods:<br>• T get() returns the result<br>• wait() waits for the result to become available<br>async() can be called with two launch policies for a task executed:<br>• std::launch::async a new thread is launched to execute the task asynchronously<br>• std::launch::deferred the task is executed on the calling thread the first time its result is requested (lazy evaluation)</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shell例子</title>
    <link href="/2019/07/20/shell%E4%BE%8B%E5%AD%90/"/>
    <url>/2019/07/20/shell%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<ul><li>追加信息于文件<br><code>cat - &gt;&gt; filename</code></li><li>赋值日期命令<br><code>eval $(date &#39;+weekday=&quot;%a&quot; month=&quot;%b&quot; day=&quot;%e&quot; year=&quot;%G&quot;&#39;)</code></li><li>判断是否符合正则表达式<br><code>expr string : pattern</code></li></ul><ul><li>追加内容到文件<br>echo的-n选项不会在添加内容前加换行符</li><li>读取文件首行赋给变量<br><code>read -r line &lt; file</code>,-r选项保证读入的内容是原始内容，反斜杠不会发生转义，read命令会删除开头和结尾的<code>IFS</code>中的所有字符，如果想保留，把<code>IFS</code>置为空:<code>IFS= read -r line &lt; file</code></li><li>依次读入文件每一行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># do something with $line</span><br><span class="hljs-keyword">done</span> &lt; file<br></code></pre></td></tr></table></figure></li><li>随机读取一行内容<br><code>read -r random_line &lt; &lt;(shuf file)</code></li><li>读取文件首行前三个字段<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> -r field1 field2 field3 _; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># do something with $field1, $field2, and $field3</span><br><span class="hljs-keyword">done</span> &lt; file<br></code></pre></td></tr></table></figure><code>_</code>用来接受三个字段后的所有内容，如果没有他，field3会接受所有</li><li>从文件路径中获取文件名<br><code>filename=$&#123;path##*/&#125;</code>,这其实就是参数展开</li><li>从文件路径中获取目录名<br><code>dirname=$&#123;path%/*&#125;</code></li><li>相同路径下的快速拷贝&#x2F;移动写法<br><code>cp /path/to/file&#123;,_copy&#125;</code></li><li>生成a到z字母表<ul><li><code>echo &#123;a..z&#125;</code></li><li><code>printf &quot;%c&quot; &#123;a..z&#125;</code>,字母间不含空格</li><li><code>printf &quot;%c&quot; &#123;a..z&#125; $&#39;\n&#39;</code>结尾加空行</li><li><code>printf &quot;%c\n&quot; &#123;a..z&#125;</code>每个字符后加个空行</li></ul></li><li>生成00-09数字<ul><li><code>printf &quot;%02d&quot; &#123;0..9&#125;</code></li><li><code>echo &#123;00..09&#125;</code>bash4以上支持</li></ul></li><li>生成若干单词<br><code>echo &#123;w,t,&#125;h&#123;e&#123;n&#123;,ce&#123;,forth&#125;&#125;,re&#123;,in,fore,with&#123;,al&#125;&#125;&#125;,ither,at&#125;</code></li><li>重复输出10次字符串<br><code>echo foo&#123;,,,,,,,,,&#125;</code></li><li>分割字符串<ul><li><code>IFS=- read -r x y z &lt;&lt;&lt; &quot;$str&quot;</code></li><li><code>IFS=- read -ra parts &lt;&lt;&lt; &quot;foo-bar-baz&quot;</code>保存到数组</li></ul></li><li>逐个字符处理字符串<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -rn1 c; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># do something with $c</span><br><span class="hljs-keyword">done</span> &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-variable">$str</span>&quot;</span><br></code></pre></td></tr></table></figure>-n1表示一次读一个字符</li><li>获取一个字符的ascll<br><code>printf &#39;%02x&#39; &quot;+&quot;</code></li><li>获取最后一个参数<br><code>echo $&#123;@: -1&#125;</code>或<code>echo $&#123;!#&#125;</code></li><li>遍历参数<br><code>for arg in &quot;$@&quot;</code>等价于<code>for arg</code></li><li>路径中含空格：<ul><li>非递归：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> *.mp3;<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li>递归：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">OLDIFS=<span class="hljs-string">&quot;<span class="hljs-variable">$IFS</span>&quot;</span><br>filelist=$(find -name <span class="hljs-string">&#x27;*.mp3&#x27;</span> -print0|xargs --null <span class="hljs-built_in">ls</span>)&amp;&amp;IFS=$<span class="hljs-string">&#x27;\n&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$filelist</span>;<br><span class="hljs-keyword">do</span><br>IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$OLDIFS</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><strong>注意，IFS必须单引号，filelist的变量是必须的,不能写在for后面,要即时还原IFS</strong></li></ul></li></ul><h2 id="函数特殊用法"><a href="#函数特殊用法" class="headerlink" title="函数特殊用法"></a>函数特殊用法</h2><ul><li>测试文件是否存在函数<br><code>function fileExists() [[ -f $1 ]]</code></li><li>测试是否及偶数<br><code>function isEven() (( $1 % 2 == 0 ))</code></li><li>使用小括号<br>会fork个子进程，对环境的修改不会印象外面，不需要恢复现场<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> name() ( <br>... <br>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="文件描述符与重定向"><a href="#文件描述符与重定向" class="headerlink" title="文件描述符与重定向"></a>文件描述符与重定向</h2><p>bash启动时，文件描述符表如下所示：<br><img src="/images/file_descriptor.png"><br>当bash执行命令时，他会fork一个子进程，它会继承父进程的描述符表</p><h3 id="重定向命令到stdout"><a href="#重定向命令到stdout" class="headerlink" title="重定向命令到stdout"></a>重定向命令到stdout</h3><ul><li><code>command &gt;file</code>到底发生了啥？<br><code>&gt;</code>是输出重定向操作符，bash首先打开文件准备写入，如果文件打开成功，command的stdout指向打开的文件，如果失败，不执行命令，其实等价于<code>command 1 &gt;file</code></li></ul><h3 id="重定向命令到stderr"><a href="#重定向命令到stderr" class="headerlink" title="重定向命令到stderr"></a>重定向命令到stderr</h3><p><code>command 2&gt;file</code></p><h3 id="重定向命令stdout和stderr到同一个文件"><a href="#重定向命令stdout和stderr到同一个文件" class="headerlink" title="重定向命令stdout和stderr到同一个文件"></a>重定向命令stdout和stderr到同一个文件</h3><p><code>command &amp;&gt;file</code>等价于<code>command &gt;file 2&gt;&amp;1</code><br>当只有一个重定向时，重定向位置可以任意放，甚至可以在命令的前面，但注意遇到多个重定向操作时,顺序很重要，会从左到右依次处理:<br>首先<code>&gt;file</code>会发生如下：<br><img src="/images/file_descriptor1.png"><br>然后<code>2&gt;&amp;1</code>会发生如下：<br><img src="/images/file_descriptor2.png"><br>如果顺序错了，为节省流量,你自己想会发生啥吧</p><h3 id="重定向stdin"><a href="#重定向stdin" class="headerlink" title="重定向stdin"></a>重定向stdin</h3><p><code>command &lt;file</code>Bash 在执行命令之前，打开文件file准备读入。如果打开文件出错，Bash 会直接返错，不会继续执行命令。相反如果打开成功，Bash 会使用打开的文件的文件描述符作为命令的标准输入</p><h3 id="重定向一堆字符到stdin"><a href="#重定向一堆字符到stdin" class="headerlink" title="重定向一堆字符到stdin"></a>重定向一堆字符到stdin</h3><p>这是最常见的here document语法<code>&lt;&lt;MARKER</code>,当bash遇到该操作符时，会从标输入读取每一行，直到遇到<code>MARKER</code>,例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed <span class="hljs-string">&#x27;s|http://||&#x27;</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">http://url1.com</span><br><span class="hljs-string">http://url2.com</span><br><span class="hljs-string">http://url3.com</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line2; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">let</span> b++<br>    <span class="hljs-built_in">echo</span> ??<span class="hljs-variable">$line2</span>??<br><span class="hljs-keyword">done</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">`grep -v 1 /tmp/test.txt`</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>如果MARKER用引号括起来，那么变量是不会展开的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>hello, <span class="hljs-variable">$USER</span> <span class="hljs-comment">#USER不会展开</span><br>EOF<br></code></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>见另一篇</p><h3 id="通过bash访问web站点"><a href="#通过bash访问web站点" class="headerlink" title="通过bash访问web站点"></a>通过bash访问web站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> 3&lt;&gt;/dev/tcp/www.google.com/80<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;GET / HTTP/1.1\n\n&quot;</span> &gt;&amp;3<br><span class="hljs-built_in">cat</span> &lt;&amp;3<br></code></pre></td></tr></table></figure><p>Bash 将&#x2F;dev&#x2F;tcp&#x2F;host&#x2F;port当作一种特殊的文件(套接字文件？)，它并不需要实际存在于系统中，这种类型的特殊文件是给 Bash 建立 tcp 连接用的。</p><h3 id="重定向进程的stdout和stderr到另外一个进程的输入"><a href="#重定向进程的stdout和stderr到另外一个进程的输入" class="headerlink" title="重定向进程的stdout和stderr到另外一个进程的输入"></a>重定向进程的stdout和stderr到另外一个进程的输入</h3><p><code>command1 |&amp; command2</code>等价于<code>command1 2&gt;&amp;1|command2</code></p><h3 id="交换标准输出与标准错误"><a href="#交换标准输出与标准错误" class="headerlink" title="交换标准输出与标准错误"></a>交换标准输出与标准错误</h3><p><code>command 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</code></p><h3 id="重定向标准输出与错误给不同进程"><a href="#重定向标准输出与错误给不同进程" class="headerlink" title="重定向标准输出与错误给不同进程"></a>重定向标准输出与错误给不同进程</h3><p>主要就是使用进程替换<br><code>command &gt; &gt;(stdout_cmd) 2&gt; &gt;(stderr_cmd)</code></p><h3 id="获取管道流中的所有命令执行退出码"><a href="#获取管道流中的所有命令执行退出码" class="headerlink" title="获取管道流中的所有命令执行退出码"></a>获取管道流中的所有命令执行退出码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;pants are cool&#x27;</span> | grep <span class="hljs-string">&#x27;moo&#x27;</span> | sed <span class="hljs-string">&#x27;s/o/x/&#x27;</span> | awk <span class="hljs-string">&#x27;&#123; print $1 &#125;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PIPESTATUS[@]&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>字符相关</title>
    <link href="/2019/07/19/%E5%AD%97%E7%AC%A6%E7%9B%B8%E5%85%B3/"/>
    <url>/2019/07/19/%E5%AD%97%E7%AC%A6%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="cctype中的函数"><a href="#cctype中的函数" class="headerlink" title="cctype中的函数"></a>cctype中的函数</h1><p>isalnum() 参数为字母或数字,返回true<br>isalpha() 参数字母为字母,返回true<br>iscntrl() 参数为控制字符,返回true<br>isdigit() 参数为数字(0～9),返回true<br>isgraph() 参数为除空格外的打印字符,返回true<br>islower() 参数为小写字母,返回true<br>isprint() 参数为打印字符(包括空格),返回true<br>ispunct() 参数为标点符号,返回true<br>isspace() 参数为标准空白字符,如空格,进纸,换行符,回车,制表符,返回true<br>isupper() 参数为大写字母,返回true<br>isxdigit() 参数为十六进制数字,即0～9,a～f或A～F,返回true<br>tolower() 若是大写,返回其小写,否则返回该参数<br>toupper() 若是小写,返回其大写,否则返回该参数</p><h1 id="C字符串的函数-cstring"><a href="#C字符串的函数-cstring" class="headerlink" title="C字符串的函数(cstring)"></a>C字符串的函数(cstring)</h1><p>strcpy(str1,str2)  复制str2到str1<br>strncpy(str1,str2,n) 把str2的前n字符拷贝到str1<br>strcat(str1,str2)  str2连接到str1后面<br>strncat(str1,str2,n) 把str2的前n字符连接到str1<br>strcmp(str1,str2) 比较两个字符串<br>strlen(str) 计算长度不包括结束标识符<br>3.<br>C字符类型与其他类型的转换<br>atof(str) 将字符串转换为float类型<br>atoi(str) 将字符串转换为int类型<br>itoa(num,str,10) 将int类型转换为字符串,10代表十进制<br>ltoa(num,str,10) 将long类型转换为字符串,10代表十进制<br>ultoa(num,str,10) 将unsigned long类型转换为字符串,10代表十进制<br>sprintf() 函数比上述三个更灵活,具体百度<br>以下三个都是浮点型转换为字符串<br>fcvt()<br>ecvt()<br>gcvt()<br>cppstr.c_str() string类型转换为C类型<br>C字符串可以直接赋值给string类型</p><h1 id="string类型的操作-详见C-Primer-P323"><a href="#string类型的操作-详见C-Primer-P323" class="headerlink" title="string类型的操作(详见C++Primer P323)"></a>string类型的操作(详见C++Primer P323)</h1><p>str1.substr(pos,n) 返回一个string,包含s中从pos开始的n个字符的拷贝.pos的默认值为0,n的默认值为str1.size()-pos,即所有字符<br>str1.insert(pos,args) 在pos之前插入args指定的字符,若pos不是下标而是迭代器,则返回指向第一个插入字符的迭代器<br>str1.erase(pos,len) 删除从pos开始的len个字符.len默认至末尾<br>str1.assign(args) 将str1字符替换为指定的args的字符<br>str1.append(args) 将args追加到str1,<br>str1.replace(range,args) 删除s中范围range内的字符,替换为args指定的字符.range或者是个下标和长度,或一堆迭代器<br>注:<br>以上args可以是下面格式:<br>a.str2  字符串str2<br>b.str2,pos,len 字符串str2中从pos开始的len个字<br>c.cp cp指向的以空字符结尾的字符数组<br>d.cp,len 从cp指向的字符数组的前len个字符<br>e.n,c n个字符c<br>f.b,e 迭代器的范围,不能是本身<br>g.初始化列表 花括号包围的,以逗号分隔的字符列表<br>而replace和insert的args形式取决于range和pos,以标号代替args.</p><table><thead><tr><th align="center">args</th><th align="center">replace(pos,len,args)</th><th align="center">replace(b,e,args)</th><th align="center">insert(pos,args)</th><th align="center">insert(iter,args)</th></tr></thead><tbody><tr><td align="center">a.</td><td align="center">y</td><td align="center">y</td><td align="center">y</td><td align="center">n</td></tr><tr><td align="center">b.</td><td align="center">y</td><td align="center">n</td><td align="center">y</td><td align="center">n</td></tr><tr><td align="center">c.</td><td align="center">y</td><td align="center">y</td><td align="center">y</td><td align="center">n</td></tr><tr><td align="center">d.</td><td align="center">y</td><td align="center">y</td><td align="center">n</td><td align="center">n</td></tr><tr><td align="center">e.</td><td align="center">y</td><td align="center">y</td><td align="center">y</td><td align="center">y</td></tr><tr><td align="center">f.</td><td align="center">n</td><td align="center">y</td><td align="center">n</td><td align="center">y</td></tr><tr><td align="center">g.</td><td align="center">n</td><td align="center">y</td><td align="center">n</td><td align="center">y</td></tr></tbody></table><p>　　str1.find(args) 查找str1中args第一次出现的位置<br>　　str1.rfind(args) 查找str1中args最后一次出现的位置<br>　　str1.find_first_of(args) 在str1查找args中任意字符第一次出现的位置<br>　　str1.find_last_of(args) 在str1查找args中任意字符最后一次出现的位置<br>　　str1.find_first_not_of(args) 在str1查找第一个不在args中的字符<br>　　str1.find_last_not_of(args) 在str1查找最后一个不在args中的字符<br>　　注:<br>　　args可以是以下的格式:<br>　　c,pos  从str1中位置pos开始查找字符c.pos默认为0<br>　　str2,pos 从str1中位置pos开始查找字符串str2,pos默认为0<br>　　cp,pos 从str1中位置pos开始查找指针cp指向的C字符串.pos默认为0<br>　　cp,pos,n 从str1中查找指针cp指向的前n个字符.无默认值<br>　　str1.compare(args)<br>　　注:<br>　　args可以是以下格式:<br>　　str2 比较str1和str2<br>　　pos1,n1,str2 将str1中从pos1开始的n1个字符与str2字符进行比较<br>　　pos1,n1,str2,pos2,n2 将str1中从pos1开始的n1个字符与str2中从pos2开始的n2个字符串进行比较<br>　　cp 与C字符串比较<br>　　pos1,n1,cp ….<br>　　pos1,n1,cp,n2 ………………….C字符串cp指针指向的位置后的n2个字符串进行比较</p><h1 id="string类型与数字的转换"><a href="#string类型与数字的转换" class="headerlink" title="string类型与数字的转换"></a>string类型与数字的转换</h1><p>to_string(num) 数字转换成string<br>stoi(s,p,b)<br>stol(s,p,b)<br>stoul(s,p,b)<br>stoll(s,p,b)<br>stoull(s,p,b)<br>注:返回类型为int,long,unsigned long,long long,unsigned long long,<br>   b一般表示十进制<br>   p为size_t指针,用来保存s字符中第一个非数值字符的下标,默认为0,即不保存下标<br>stof(s,p)<br>stod(s,p)<br>stold(s,p)<br>注:返回类型为float,double,long double<br>std::from_chars(start,end,result,base)</p><h1 id="char-to-string"><a href="#char-to-string" class="headerlink" title="char to string"></a>char to string</h1><ul><li><code>std::string(1,char_value)</code></li></ul><h1 id="std-format"><a href="#std-format" class="headerlink" title="std::format"></a>std::format</h1><p>提供python style的字符串构造</p><h2 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::format(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// &quot;3&quot;</span><br>std::format(<span class="hljs-string">&quot;&#123;:b&#125;&quot;</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// &quot;101&quot;</span><br></code></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::format(<span class="hljs-string">&quot;&#123;:.1f&#125;&quot;</span>, <span class="hljs-number">3.273</span>); <span class="hljs-comment">// &quot;3.1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::format(<span class="hljs-string">&quot;&#123;:&gt;6&#125;&quot;</span>, <span class="hljs-number">3.27</span>); <span class="hljs-comment">// &quot; 3.27&quot;</span><br>std::format(<span class="hljs-string">&quot;&#123;:&lt;6&#125;&quot;</span>, <span class="hljs-number">3.27</span>); <span class="hljs-comment">// &quot;3.27 &quot;</span><br></code></pre></td></tr></table></figure><h2 id="reordering"><a href="#reordering" class="headerlink" title="reordering"></a>reordering</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::format(<span class="hljs-string">&quot;&#123;1&#125; - &#123;0&#125;&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// &quot;3 - 1&quot; </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sed</title>
    <link href="/2019/07/18/sed/"/>
    <url>/2019/07/18/sed/</url>
    
    <content type="html"><![CDATA[<h3 id="sed作用原理"><a href="#sed作用原理" class="headerlink" title="sed作用原理"></a>sed作用原理</h3><p>sed首先将整个编辑脚本应用于第一个输入行(存在模式空间)，然后再读取第二个输入行。sed总是处理原始行的最新形式，所以生成的任何编辑动作都会作用于后续命令。</p><h3 id="sed选项总结"><a href="#sed选项总结" class="headerlink" title="sed选项总结"></a>sed选项总结</h3><table><thead><tr><th align="center">options</th><th align="center">describe</th><th align="center">example</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">编辑随后的指令</td><td align="center"><code>sed -e &#39;s/brown/green/;s/dog/cat/&#39; data.txt</code></td></tr><tr><td align="center">-f</td><td align="center">跟随脚本中的文件名</td><td align="center"></td></tr><tr><td align="center">-n</td><td align="center">阻止输入行的自动输出</td><td align="center"></td></tr><tr><td align="center">-r</td><td align="center">支持扩展的正则表达式</td><td align="center"></td></tr><tr><td align="center">-i</td><td align="center">直接修改读取的文件内容,而不是由屏幕输出</td><td align="center"></td></tr></tbody></table><h3 id="在命令行上指定多重命令"><a href="#在命令行上指定多重命令" class="headerlink" title="在命令行上指定多重命令"></a>在命令行上指定多重命令</h3><ul><li><code>sed &#39;s/MA/ma/; s/FA/fa/&#39; file</code></li><li><code>sed -e &#39;/MA/ma/&#39; -e &#39;s/FA/fa/&#39; file</code></li><li>bash等通用,输入单引号后回车,会出现<code>&gt;</code>多行输入提示符<br>sed为流编辑器,一次读取一行内容,并执行相应的命令,格式如下:<br><code>sed [options] &#39;[command]&#39; (file)</code></li></ul><h3 id="sed地址表示方法"><a href="#sed地址表示方法" class="headerlink" title="sed地址表示方法"></a>sed地址表示方法</h3><table><thead><tr><th align="center">地址</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">n</td><td align="center">行号,n是一个正整数</td></tr><tr><td align="center">$</td><td align="center">最后一行</td></tr><tr><td align="center">&#x2F;regexp&#x2F;</td><td align="center">正则表达式匹配行</td></tr><tr><td align="center">addr1,addr2</td><td align="center">从addr1到addr2范围内的文本行,包含地址addr2在内,地址是上述任意的地址形式</td></tr><tr><td align="center">first~step</td><td align="center">匹配由数字first代表的文本行,然后随后的每个在step间隔处的文本行。例如1~2代表奇数行</td></tr><tr><td align="center">addr1,+n</td><td align="center">匹配地址addr1和随后的n个文本行</td></tr><tr><td align="center">addr!</td><td align="center">匹配所有文本行,除了addr之外,addr是上述任意的地址形式</td></tr></tbody></table><h3 id="分组命令"><a href="#分组命令" class="headerlink" title="分组命令"></a>分组命令</h3><p>sed使用大括号<code>&#123;&#125;</code>将一个地址嵌套在另一个地址上，或在相同的地址上应用多个命令，左大括号必须在行末，右大括号独占一行，之后必须没空格<br><strong>例1：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1,5&#123;<br>/^$/d<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1,5&#123;<br>/^$/d<br>s/a/b/<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="替换s"><a href="#替换s" class="headerlink" title="替换s"></a>替换s</h3><p><code>[address]s/pattern/replacement/flags</code></p><h4 id="替换的标志位"><a href="#替换的标志位" class="headerlink" title="替换的标志位"></a>替换的标志位</h4><table><thead><tr><th align="center">flag</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">n</td><td align="center">1到512之间的一个数字,表示对文本模式中指定模式第n次出现的情况进行替换</td></tr><tr><td align="center">g</td><td align="center">对模式空间的所有出现的情况进行全局更改</td></tr><tr><td align="center">p</td><td align="center">打印模式空间的内容,可以加感叹号，表示不打印</td></tr><tr><td align="center">W <file></td><td align="center">将模式空间的内容写到文件file中</td></tr></tbody></table><h4 id="替换部分的元字符"><a href="#替换部分的元字符" class="headerlink" title="替换部分的元字符"></a>替换部分的元字符</h4><ul><li><code>&amp;</code>:表示命中的正则表达式</li><li><code>\</code>:后面可接回车,其他元字符转义</li><li><code>\&lt;n&gt;</code>:表示匹配的部分,在pattern中用<code>\(</code>和<code>\)</code>括起来</li></ul><h4 id="界定符"><a href="#界定符" class="headerlink" title="界定符"></a>界定符</h4><ul><li>如果模式中含有’&#x2F;‘可以用感叹号作定界符,如<code>s!/usr/mail!/usr2/mail!</code></li><li>注意地址的界定符不能这么玩</li></ul><h3 id="删除d"><a href="#删除d" class="headerlink" title="删除d"></a>删除d</h3><p>匹配到这个地址就删除模式空间内容,并且会导致不再执行接下来的脚本，读取新的行。</p><h3 id="a、i、c"><a href="#a、i、c" class="headerlink" title="a、i、c"></a>a、i、c</h3><ul><li>追加<code>[line-address(单行)]a\   \&lt;text\&gt;</code><br>加入模式空间内容之后</li><li>插入<code>[line-address(单行)]i\   \&lt;text\&gt;</code><br>插入模式空间内容之前</li><li>更改<code>[address(可以是范围)]c\   \&lt;text\&gt;</code><br>替换模式空间(范围的话,替换范围内的内容)的内容</li></ul><h4 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h4><ul><li>每一个都要求后面跟一个反斜杠转义第一个行尾,text必须从下一行开始</li><li>text内容如果是多行,则行末要加反斜线,最后一行不需要</li><li>如果更改存在于组命令中,且是个范围，则会存在每一行都替换,而不是范围替换一次</li><li>插入与追加的文本内容不受命令影响,也不影响行计数器</li><li>更改命令则与删除命令类似,接下来的脚本不会作用，会立刻读入新行</li></ul><h3 id="读和写命令"><a href="#读和写命令" class="headerlink" title="读和写命令"></a>读和写命令</h3><ul><li><code>[line-address]r file</code>读入某个文件的内容,追加到模式空间后</li><li><code>[address]w file</code>把模式空间内容写到某个文件</li></ul><h4 id="注意项-1"><a href="#注意项-1" class="headerlink" title="注意项"></a>注意项</h4><ul><li>文件不存在不会报错</li><li>如果一个脚本中有多个指令写到同一个文件,那么每个写命令都将追加到这个文件</li><li>读的内容不受之后命令影响</li><li>sed最多打开10个文件</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>列表<code>[addess]l</code>:不仅显示内容,非打印字符显示为两个数字的ASCLL代码</li><li><code>[line-address]=</code>:不打印内容,但打印行号</li><li><code>[address]n</code>:输出模式空间内容(没抑制输出的话),读取输入的下一行,并且后续命令用于新行,之前的命令不会用于新行</li><li><code>[line-address]q</code>:停止读入新行，退出脚本,经常用来打印前几行</li><li>转换<code>[address]y/abc/xyz/</code>(类似于tr),有用的例子转换大小写y&#x2F;abcdefghijklmnopqrstuvwxyz&#x2F;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x2F;</li></ul><h3 id="反斜线圆括号用法"><a href="#反斜线圆括号用法" class="headerlink" title="反斜线圆括号用法"></a>反斜线圆括号用法</h3><p><code>s/\([0-9]\)-\([0-9]\)/\2-\1/g</code>指交换斜杠前后的两个数字</p><h3 id="多行模式N"><a href="#多行模式N" class="headerlink" title="多行模式N"></a>多行模式N</h3><p>多行模式空间:多行Next(N)命令通过读取新的输入行,并将它添加到模式空间的现有内容来创建多行模式空间。模式空间最初的内容和新的输入行之间用换行符分隔。在模式空间中嵌入的换行符可以用转义序列”\n”来匹配。在多行模式空间中,元字符”^”匹配空间中的第一个字条,而不匹配换行符后面的字符。同样,”$”只匹配模式空间中最后的换行符,而不匹配任何嵌入的换行符。在执行Next命令之后,控制将被传递给脚本中的后续命令。<br>这与next不同，next不创建多行模式，它输出内容，然后，读取新的行。<br>举例:例如要将”Owner and Operator Guide”换成”Installation Guide”,对于处于不同行的情况可以这样做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Operator$/&#123;<br>N<br>s/Owner and Operator\nGuide/Installation Guide/<br>&#125;<br></code></pre></td></tr></table></figure><p>上面比较不普遍,更普遍做法是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">s/Owner and Operator Guide/Installtion Guide/<br>/Owner/&#123;<br>N<br>s/ *\n/ /<br>s/Owner and Operator Guide */Installation Guide\<br>/<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多行模式D"><a href="#多行模式D" class="headerlink" title="多行模式D"></a>多行模式D</h3><p>删除命令(d)删除模式空间的内容并导致读入新的输入行,从而在脚本的顶端重新使用编辑方法。删除命令(D)稍微有些不同:它删除模式空间中直到第一个嵌入的换行符的这部分内容。他不会导致读入新的输入行,相反,<strong>它返回到脚本的顶端</strong>,将这些指令应用于模式空间的剩余内容。<br>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/^ $/&#123;<br>N<br>/^ \n$/D<br>&#125;<br></code></pre></td></tr></table></figure><p>以上可以删除连续多个空行,只保留一个空行</p><h3 id="多行模式P"><a href="#多行模式P" class="headerlink" title="多行模式P"></a>多行模式P</h3><p>该命令输出多行模式空间的第一部分，直到第一个嵌入的换行符为止。<br>P命令经常出现在Next命令之后和Delete命令之前，建立一个输入&#x2F;输出循环，用来维护两行的模式空间，这样就能之输出第一行，然后返回到脚本的顶端，用于第二行。</p><h3 id="保持空间"><a href="#保持空间" class="headerlink" title="保持空间"></a>保持空间</h3><p>保持空间:当改变模式空间中的原始内容时,用于保留当前输入行的副本。影响模式空间的命令</p><table><thead><tr><th align="center">命令</th><th align="center">缩写</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Hold</td><td align="center">h或H</td><td align="center">将模式空间的内容复制或追加到保持空间(大写追加)</td></tr><tr><td align="center">Get</td><td align="center">g或G</td><td align="center">将保持空间的内容复制或追加到模式空间(大写追加)</td></tr><tr><td align="center">Exchange</td><td align="center">x</td><td align="center">交换保持空间和模式空间的内容</td></tr></tbody></table><h3 id="高级的流控制命令"><a href="#高级的流控制命令" class="headerlink" title="高级的流控制命令"></a>高级的流控制命令</h3><ul><li>分支:在脚本中将控制转移到另一行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">:top<br>command1<br>command2<br>/pattern/b top<br>command3<br></code></pre></td></tr></table></figure>如果没有定义top或没有标签(可以为任意命名),则将跳转到脚本末尾,上面例子意思是如果找不到pattern,才执行commmand3<br><strong>注意</strong>不要在标签后加空格</li><li>测试:如果当前匹配行上成功进行了替换,那么test命令就会转到标签处,用法和分支一样,把b改成t即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sth/&#123;<br>s/a/b/<br>t<br>s/c/b/<br>t<br>s/d/b/<br>&#125;<br></code></pre></td></tr></table></figure>一旦一个替换被执行，控制就到脚本末尾</li></ul><h3 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h3><ul><li><code>sed &#39;52q;d&#39; file</code>打印52行，效率高</li><li><code>cat jane.txt | tr &#39;[A-Z]&#39; &#39;[a-z]&#39; | tr &#39;;.?\047,():&quot;-&#39; &#39; &#39;|tr &#39; &#39; &#39;\012&#39; | grep -v &#39;^ *$&#39; | sort | uniq -c | sort -n</code>:统计单词数,首先大写替换为小写，然后替换标点为空格,再替换空格为换行,去空行,排序，计数，再排序。</li><li><code>sed &#39;G&#39; file</code>在每行后添加个空行</li><li><code>sed -n &quot;$!N;/^(.*)n1$/!P;D&#39; test.txt</code>删除文件中连续且重复的行</li><li><code>sed &#39;/^$/d;G&#39;</code>保证每一行后都有个空行，会删除连续空行，并添加空行</li><li><code>sed &#39;n;d&#39; test.txt</code>删除偶数行</li><li><code>sed &#39;/regex/&#123;x;p;x&#125;&#39; test.txt</code>匹配regex之前添加空行</li><li><code>sed &#39;/regex/G&#39; test.txt</code>匹配regex之后添加空行</li><li><code>sed &#39;/regex/&#123;x;p;x;G;&#125;&#39; test.txt</code>之前之后都添加空行</li><li><code>sed &#39;n;n;n;n;G&#39;</code>每5行添加一个空行或<code>sed &#39;0~5G&#39; text.txt</code></li><li><code>sed &#39;=&#39; test.txt | sed &#39;N;s/s*ns*/t/&#39;</code>给每一行添加行号，以制表符分隔</li><li><code>sed &#39;/./=&#39; test.txt | sed &#39;/./N; s/s*ns*/t/&#39;</code>为非空行添加行号</li><li><code>sed -n &#39;$=&#39; test.txt</code>统计行数</li><li><code>sed &#39;s/^[[:blank:]]*|[[:blank:]]*$//&#39; test.txt</code>删除行首和行尾空白</li><li><code>sed &#39;1!G;h;$!d&#39; test.txt</code>反转每一行的顺序(类似tac)</li><li><code>sed &#39;/n/!G;s/(.)(.*n)/&amp;21/;//D;s/.//&#39;</code>反转每一行的字母顺序(类似rev)</li><li><code>sed -e &#39;:a&#39; -e &#39;s/([0-9])([0-9]&#123;3&#125;)($|,)/1,2/;ta&#39; test.txt</code>给数字串加逗号或<code>sed -e &#39;:a&#39; -e &#39;s/(.*[0-9])([0-9]&#123;3&#125;)/1,2/;ta&#39; test.txt</code></li><li><code>sed &#39;q&#39; test.txt</code>打印文件第一行</li><li><code>sed -n &#39;N;P&#39; file</code>打印奇数行</li><li><code>sed -n &#39;/regex/&#123;n;p&#125;&#39; test.txt</code> 打印匹配那一行的后一行</li><li><code>sed -n &#39;/regex/&#123;=;x;1!p;g;$!N;p;D;&#125;; h&#39; test.txt</code>  打印匹配“regex”那一行的前后一行，并且打印匹配行的行号(类似grep -A1 -B1)</li><li><code>sed -n &#39;/^.&#123;65&#125;/p&#39; test.txt</code>打印长于65个字符的行</li><li><code>sed &#39;/^$/N;/n$/D&#39; test.txt</code>压缩连续空行(类似于cat -s)</li><li><code>sed &#39;/./,$!d&#39;</code>删除文件开头的空行</li><li><code>sed &#39;:a;/^n*$/&#123;$d;N;ba&#125;&#39; test.txt</code>删除文件结尾空行</li></ul>]]></content>
    
    
    <categories>
      
      <category>文本处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++小知识</title>
    <link href="/2019/07/18/C-%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2019/07/18/C-%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="指针与应用"><a href="#指针与应用" class="headerlink" title="指针与应用"></a>指针与应用</h2><p>.初始化要求不同，引用创建的同时必须初始化，而指针不必，可以重新赋值。<br>.可修改性不同，引用一旦被初始化，就不可更改，而指针可以指向另一个变量<br>.不存在NULL引用，指针可以，指针更灵活，但风险也大<br>.指针是一个实体，引用是一个别名<br>.内存上，指针有分配的存储空间，而应用则不用</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li>c++无符号右移高位都补0</li><li><code>auto dp = vector&lt;vector&lt;int&gt;&gt;(length, vector&lt;int&gt;(length));</code>可以这样声明数组</li><li>八进制整型常量以”0”开头如:0123</li><li>十六进制以”0x(X)”开头</li><li>长整型以”L(l)”结尾</li><li>无符号型以”U(u)”结尾</li><li>默认数据类型为int型,默认实型为double型,若要表示float型在结尾加”F(f)”</li><li>register+类型+变量名,存放在寄存器,加快调用</li></ul><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p>格式:<code>[capture list] (parameter list) -&gt; return type &#123;function body&#125;</code>,capture list可以为空，里面一般是包含此lambda的函数的(非static)局部变量,该函数外的变量可以在函数体内直接用,return type可以省略。</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="使用初始化列表比较大小"><a href="#使用初始化列表比较大小" class="headerlink" title="使用初始化列表比较大小"></a>使用初始化列表比较大小</h3><p><strong>差：</strong><code>small = min(x,min(y,z));</code><br><strong>好：</strong><code>small = min(&#123;x,y,z,k&#125;);</code></p><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; cur = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">auto</span> [x,y] = cur;<br></code></pre></td></tr></table></figure><h3 id="debug宏"><a href="#debug宏" class="headerlink" title="debug宏"></a>debug宏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#definde deb(x) cout&lt;&lt; #x &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; x</span><br><span class="hljs-type">int</span> ten = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">deb</span>(ten); <span class="hljs-comment">//prints &quot;ten = 10&quot;</span><br></code></pre></td></tr></table></figure><h3 id="支持多参数的debug宏"><a href="#支持多参数的debug宏" class="headerlink" title="支持多参数的debug宏"></a>支持多参数的debug宏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> deb(...) logger(#__VA_ARGS__, __VA_ARGS__)</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> ...Args&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">logger</span><span class="hljs-params">(string vars, Args&amp;&amp;... values)</span> </span>&#123;<br>    cout &lt;&lt; vars &lt;&lt; <span class="hljs-string">&quot; = &quot;</span>;<br>    string delim = <span class="hljs-string">&quot;&quot;</span>;<br>    (..., (cout &lt;&lt; delim &lt;&lt; values, delim = <span class="hljs-string">&quot;, &quot;</span>));<br>&#125;<br><br><span class="hljs-type">int</span> xx = <span class="hljs-number">3</span>, yy = <span class="hljs-number">10</span>, xxyy = <span class="hljs-number">103</span>;<br><span class="hljs-built_in">deb</span>(xx); <span class="hljs-comment">// prints &quot;xx = 3&quot;</span><br><span class="hljs-built_in">deb</span>(xx, yy, xxyy); <span class="hljs-comment">// prints &quot;xx, yy, xxyy = 3, 10, 103&quot;</span><br></code></pre></td></tr></table></figure><h3 id="读写容器和多变量"><a href="#读写容器和多变量" class="headerlink" title="读写容器和多变量"></a>读写容器和多变量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;...args)</span> </span>&#123;<br>    ((cin &gt;&gt; args), ...);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(string delimiter, T &amp;&amp;...args)</span> </span>&#123;<br>    ((cout &lt;&lt; args &lt;&lt; delimiter), ...);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">readContainer</span><span class="hljs-params">(T &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;e : t) &#123;<br>        <span class="hljs-built_in">read</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writeContainer</span><span class="hljs-params">(string delimiter, T &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;e : t) &#123;<br>        <span class="hljs-built_in">write</span>(delimiter, e);<br>    &#125;<br>    <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">// Question: read three space seprated integers and print them in different lines.</span><br><span class="hljs-type">int</span> x, y, z;<br><span class="hljs-built_in">read</span>(x, y, z);<br><span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;\n&quot;</span>, x, y, z);<br><br><span class="hljs-comment">// even works with variable data types :)</span><br><span class="hljs-type">int</span> n;<br>string s;<br><span class="hljs-built_in">read</span>(n, s);<br><span class="hljs-built_in">write</span>(<span class="hljs-string">&quot; &quot;</span>, s, <span class="hljs-string">&quot;has length&quot;</span>, n, <span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-comment">// Question: read an array of `N` integers and print it to the output console.</span><br><span class="hljs-type">int</span> N;<br><span class="hljs-built_in">read</span>(N);<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(N)</span></span>;<br><span class="hljs-built_in">readContainer</span>(arr);<br><span class="hljs-built_in">writeContainer</span>(<span class="hljs-string">&quot; &quot;</span>, arr); <span class="hljs-comment">// output: arr[0] arr[1] arr[2] ... arr[N - 1]</span><br><span class="hljs-built_in">writeContainer</span>(<span class="hljs-string">&quot;\n&quot;</span>, arr);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* output:</span><br><span class="hljs-comment">* arr[0]</span><br><span class="hljs-comment">* arr[1]</span><br><span class="hljs-comment">* arr[2]</span><br><span class="hljs-comment">* ...</span><br><span class="hljs-comment">* ...</span><br><span class="hljs-comment">* ...</span><br><span class="hljs-comment">* arr[N - 1]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="debug函数"><a href="#debug函数" class="headerlink" title="debug函数"></a>debug函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> ...T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printer</span><span class="hljs-params">(T&amp;&amp;... args)</span> </span>&#123;<br>    ((cout &lt;&lt; args &lt;&lt; <span class="hljs-string">&quot; &quot;</span>), ...);<br>&#125;<br><br><span class="hljs-type">int</span> age = <span class="hljs-number">25</span>;<br>string name = <span class="hljs-string">&quot;Rachit&quot;</span>;<br><span class="hljs-built_in">printer</span>(<span class="hljs-string">&quot;I am&quot;</span>, name, <span class="hljs-string">&#x27;,&#x27;</span>, age, <span class="hljs-string">&quot;years old&quot;</span>);<br><span class="hljs-comment">// ^ This prints the following</span><br><span class="hljs-comment">// I am Rachit, 25 years old</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> F&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">debug_func</span><span class="hljs-params">(<span class="hljs-type">const</span> F&amp; func)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [func](<span class="hljs-keyword">auto</span> &amp;&amp;...args) &#123; <span class="hljs-comment">// forward reference</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;input = &quot;</span>;<br>        <span class="hljs-built_in">printer</span>(args...);<br>        <span class="hljs-keyword">auto</span> res = <span class="hljs-built_in">func</span>(forward&lt;<span class="hljs-keyword">decltype</span>(args)&gt;(args)...);<br>        cout &lt;&lt; <span class="hljs-string">&quot;res = &quot;</span> &lt;&lt; res &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;;<br>&#125;<br><br><span class="hljs-built_in">debug_func</span>(pow)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// ^ this automatically prints</span><br><span class="hljs-comment">// input = 2 3 res = 8</span><br></code></pre></td></tr></table></figure><h3 id="默认构造"><a href="#默认构造" class="headerlink" title="默认构造"></a>默认构造</h3><p>默认第一个类型的构造函数，第一个类型必须有构造函数，可以用monostate来作第一个参数，类似空指针</p><h2 id="span-c-20"><a href="#span-c-20" class="headerlink" title="span(c++20)"></a>span(c++20)</h2><p>span(std::string_view类似)是对数组的引用，可以对C风格的数组引用，可以使用vector的部分风格，例如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(span&lt;<span class="hljs-type">int</span>&gt; r)</span> <span class="hljs-comment">// read into the range of integers r</span><br>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;r.size()&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//100</span><br>&#125;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br>read(a);        <span class="hljs-comment">// better: let the compiler figure out the number of elements</span><br></code></pre></td></tr></table></figure><h2 id="string-view和span"><a href="#string-view和span" class="headerlink" title="string_view和span"></a>string_view和span<char></h2><p>string_view只读，span<char>可变</p><h2 id="maybe-unused"><a href="#maybe-unused" class="headerlink" title="[[maybe_unused]]"></a>[[maybe_unused]]</h2><p>可以使用该attribute，声明条件用到的参数<br><code>Value* find(const set&lt;Value&gt;&amp; s, const Value&amp; v, [[maybe_unused]] Hint hint)</code><br><code>[[maybe_unused]] int x = value</code></p><h2 id="zstring或not-null来表明C字符串"><a href="#zstring或not-null来表明C字符串" class="headerlink" title="zstring或not_null来表明C字符串"></a>zstring或not_null<zstring>来表明C字符串</h2><p><code>int length(const char* p)</code>&#x3D;&gt;<code>int length(zstring p)</code><br><code>int length(not_null&lt;zstring&gt;)</code></p><h2 id="不变参数用模板"><a href="#不变参数用模板" class="headerlink" title="不变参数用模板"></a>不变参数用模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-comment">/*...*/</span>)<br>        result += va_arg(<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span>); <span class="hljs-comment">// BAD, assumes it will be passed ints</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br>sum(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// ok</span><br>sum(<span class="hljs-number">3.14159</span>, <span class="hljs-number">2.71828</span>); <span class="hljs-comment">// BAD, undefined</span><br><br>template&lt;class ...Args&gt;<br><span class="hljs-keyword">auto</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(Args... args)</span> <span class="hljs-comment">// GOOD, and much more flexible</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (... + args); <span class="hljs-comment">// note: C++17 &quot;fold expression&quot;</span><br>&#125;<br><br>sum(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// ok: 5</span><br>sum(<span class="hljs-number">3.14159</span>, <span class="hljs-number">2.71828</span>); <span class="hljs-comment">// ok: ~5.85987</span><br></code></pre></td></tr></table></figure><h2 id="原始指针只表示内存地址，owner表示所有权"><a href="#原始指针只表示内存地址，owner表示所有权" class="headerlink" title="原始指针只表示内存地址，owner表示所有权"></a>原始指针只表示内存地址，owner表示所有权</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">X2</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    owner&lt;T*&gt; p;  <span class="hljs-comment">// OK: p is owning</span><br>    T* q;         <span class="hljs-comment">// OK: q is not owning</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="C和C-互相调用"><a href="#C和C-互相调用" class="headerlink" title="C和C++互相调用"></a>C和C++互相调用</h2><ul><li>从C++调用C:<ul><li>in C:<br>  double sqrt(double);</li><li>in C++:<br>  extern “C” double sqrt(double);<br>  sqrt(2);</li></ul></li><li>从C调用C++:<ul><li>in C:<br>  X call_f(struct Y*, int);</li><li>in C++:<br>  extern “C” X call_f(Y* p, int i)<br>  {<br>  return p-&gt;f(i);   &#x2F;&#x2F; possibly a virtual function call<br>  }</li></ul></li></ul><h2 id="c-23的print"><a href="#c-23的print" class="headerlink" title="c++23的print"></a>c++23的print</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;print&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World! &#123;&#125;, &#123;&#125;, &#123;&#125;\n&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4ll</span>, <span class="hljs-string">&quot;aa&quot;</span>);<br>    <span class="hljs-comment">// print &quot;Hello World! 3 4 aa&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-20的"><a href="#c-20的" class="headerlink" title="c++20的&lt;=&gt;"></a>c++20的<code>&lt;=&gt;</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">(<span class="hljs-number">3</span> &lt;=&gt; <span class="hljs-number">5</span>) == <span class="hljs-number">0</span>; <span class="hljs-comment">// false</span><br>(<span class="hljs-string">&#x27;a&#x27;</span> &lt;=&gt; <span class="hljs-string">&#x27;a&#x27;</span>) == <span class="hljs-number">0</span>; <span class="hljs-comment">// true</span><br>(<span class="hljs-number">3</span> &lt;=&gt; <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>; <span class="hljs-comment">// true</span><br>(<span class="hljs-number">7</span> &lt;=&gt; <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>强大的default</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;compare&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Obj</span> &#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">char</span> y;<br><span class="hljs-type">short</span> z[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">auto</span> <span class="hljs-built_in">operator</span>&lt;=&gt;(<span class="hljs-type">const</span> Obj&amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br><span class="hljs-comment">// if x == other.x, then compare y</span><br><span class="hljs-comment">// if y == other.y, then compare z</span><br><span class="hljs-comment">// if z[0] == other.z[0], then compare z[1]</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="c-20的有符号与无符号的比较"><a href="#c-20的有符号与无符号的比较" class="headerlink" title="c++20的有符号与无符号的比较"></a>c++20的有符号与无符号的比较</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_equal</span><span class="hljs-params">(T1 a, T2 b)</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_not_equal</span><span class="hljs-params">(T1 a, T2 b)</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_less</span><span class="hljs-params">(T1 a, T2 b)</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_greater</span><span class="hljs-params">(T1 a, T2 b)</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_less_equal</span><span class="hljs-params">(T1 a, T2 b)</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_greater_equal</span><span class="hljs-params">(T1 a, T2 b)</span></span><br><span class="hljs-function"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span></span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> a </span>= <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">-3</span>;<br><span class="hljs-type">bool</span> v1 = (a &gt; b); <span class="hljs-comment">// false!!!, see next slides</span><br><span class="hljs-type">bool</span> v2 = std::<span class="hljs-built_in">cmp_greater</span>(a, b); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="C-17-enum-class支持attributes"><a href="#C-17-enum-class支持attributes" class="headerlink" title="C++17 enum class支持attributes"></a>C++17 enum class支持attributes</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Color</span> &#123; RED, GREEN, BLUE [[deprecated]] &#125;;<br><span class="hljs-keyword">auto</span> x = Color::BLUE; <span class="hljs-comment">// compiler warning</span><br></code></pre></td></tr></table></figure><h2 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h2><table><thead><tr><th align="center">关键字</th><th align="center">最低标准</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>[[noreturn]]</code></td><td align="center">c++11</td><td align="center">表示函数不返回</td></tr><tr><td align="center"><code>[[deprecated]],[[deprecated(&quot;reason&quot;)]]</code></td><td align="center">c++14</td><td align="center">表示将会弃用函数，产生编译告警</td></tr><tr><td align="center"><code>[[nodiscard]]</code></td><td align="center">c++17</td><td align="center">见下</td></tr><tr><td align="center"><code>[[nodiscard(&quot;reason&quot;)]]</code></td><td align="center">c++20</td><td align="center">如果返回值没被使用，会产生告警</td></tr><tr><td align="center"><code>[[maybe_unused]]</code></td><td align="center">c++17</td><td align="center">未使用的变量不产生告警</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">[[noreturn]] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123; std::<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br>[[deprecated]] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_rand</span><span class="hljs-params">()</span> </span>&#123; ... &#125;<br>[[nodiscard]] <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x)</span> </span>&#123;<br><span class="hljs-built_in">update</span>(x);<br><span class="hljs-type">bool</span> status = ...;<br><span class="hljs-keyword">return</span> status;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">h</span><span class="hljs-params">([[maybe_unused]] x)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(SKIP_COMPUTATION)</span><br>... use x ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-comment">//----------------------------------------------------------------------</span><br><span class="hljs-built_in">my_rand</span>(); <span class="hljs-comment">// WARNING &quot;deprecated&quot;</span><br><span class="hljs-built_in">g</span>(y); <span class="hljs-comment">// WARNING &quot;discard return value&quot;</span><br><span class="hljs-type">int</span> z = <span class="hljs-built_in">g</span>(); <span class="hljs-comment">// no warning</span><br><span class="hljs-built_in">h</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// no warning if SKIP_COMPUTATION is defined</span><br></code></pre></td></tr></table></figure><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>不建议使用宏，一般在以下情况使用宏</p><ul><li>条件编译： 不同架构、编译器等</li><li>多语言混编</li><li>复杂名字代替</li></ul><h3 id="内置宏"><a href="#内置宏" class="headerlink" title="内置宏"></a>内置宏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>std::cout &lt;&lt; __FILE__ &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; __LINE__; <span class="hljs-comment">// print &#x27;source.cpp:4&#x27;</span><br>std::cout &lt;&lt; __FUNCTION__; <span class="hljs-comment">// print &#x27;f&#x27;</span><br>std::cout &lt;&lt; __func__; <span class="hljs-comment">// print &#x27;f&#x27;</span><br>&#125;<br><span class="hljs-comment">// see template lectures</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">g</span><span class="hljs-params">(T p)</span> </span>&#123;<br>std::cout &lt;&lt; __PRETTY_FUNCTION__; <span class="hljs-comment">// print &#x27;float g(T) [T = int]&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0.0f</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g1</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">g</span>(<span class="hljs-number">3</span>); &#125;<br></code></pre></td></tr></table></figure><p>C++20在<source_location>提供了函数方法来代替这些宏。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;source_location&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(std::source_location s = std::source_location::current())</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;function: &quot;</span> &lt;&lt; s.<span class="hljs-built_in">function_name</span>() &lt;&lt; <span class="hljs-string">&quot;, line &quot;</span> &lt;&lt; s.<span class="hljs-built_in">line</span>();<br>&#125; <span class="hljs-comment">// column(),file_name() also support</span><br><span class="hljs-built_in">f</span>(); <span class="hljs-comment">// print: &quot;function: f, line 6&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>__DATE__</code>:输出编译的开始日期以’mmm dd yyyy’格式</li><li><code>__TIME__</code>:输出编译的开始时间</li></ul><h3 id="常见的条件编译"><a href="#常见的条件编译" class="headerlink" title="常见的条件编译"></a>常见的条件编译</h3><p>可见网址<img src="https://sourceforge.net/p/predef/wiki/Home/"><br>可见网址<img src="https://abseil.io/docs/cpp/platforms/macros"></p><table><thead><tr><th align="center">语法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>#if defined( cplusplus)</code></td><td align="center">C++ code</td></tr><tr><td align="center"><code>#if cplusplus == 199711L</code></td><td align="center">ISO C++ 1998&#x2F;2003,仅限于linux,MSVC的2011和2014也是该值</td></tr><tr><td align="center"><code>#if cplusplus == 201103L</code></td><td align="center">ISO C++ 2011,仅限于linux</td></tr><tr><td align="center"><code>#if cplusplus == 201402L</code></td><td align="center">ISO C++ 2014,仅限于linux</td></tr><tr><td align="center"><code>#if cplusplus == 201703L</code></td><td align="center">ISO C++ 2017</td></tr><tr><td align="center"><code>#if defined( GNUG )</code></td><td align="center">The compiler is gcc&#x2F;g++</td></tr><tr><td align="center"><code>#if defined( clang )</code></td><td align="center">The compiler is clang&#x2F;clang++</td></tr><tr><td align="center"><code>#if defined( MSC VER)</code></td><td align="center">The compiler is Microsoft Visual C++</td></tr><tr><td align="center"><code>#if defined( WIN64)</code></td><td align="center">OS is Windows 64-bit</td></tr><tr><td align="center"><code>#if defined( linux )</code></td><td align="center">OS is Linux</td></tr><tr><td align="center"><code>#if defined( APPLE )</code></td><td align="center">OS is Mac OS</td></tr><tr><td align="center"><code>#if defined( MINGW32 )</code></td><td align="center">OS is MinGW 32-bit</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>#</code>:等价于加个双引号<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">define</span> STRING_MACRO(string) #string</span><br>cout &lt;&lt; <span class="hljs-built_in">STRING_MACRO</span>(hello); <span class="hljs-comment">// equivalent to &quot;hello&quot;</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> INFO_MACRO(my_func) \</span><br><span class="hljs-meta">&#123; \</span><br><span class="hljs-meta">my_func \</span><br><span class="hljs-meta">cout &lt;&lt; <span class="hljs-string">&quot;call &quot;</span> &lt;&lt; #my_func &lt;&lt; <span class="hljs-string">&quot; at &quot;</span> \</span><br><span class="hljs-meta">&lt;&lt; __FILE__ &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> __LINE__; \</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> </span>&#123;&#125;<br><span class="hljs-built_in">INFO_MACRO</span>( <span class="hljs-built_in">g</span>(<span class="hljs-number">3</span>) ) <span class="hljs-comment">// print: &quot;call g(3) at my_file.cpp:7&quot;</span><br></code></pre></td></tr></table></figure></li><li><code>#error &quot;text&quot;</code>:编译器遇到时会输出error</li><li><code>#warning &quot;text&quot;</code>:编译器遇到时会输出warning</li><li><code>##</code>：连接字符串<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">define</span> FUNC_GEN_A(tokenA, tokenB) \</span><br><span class="hljs-meta">void tokenA##tokenB() &#123;&#125;</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> FUNC_GEN_B(tokenA, tokenB) \</span><br><span class="hljs-meta">void tokenA##_##tokenB() &#123;&#125;</span><br><span class="hljs-built_in">FUNC_GEN_A</span>(my, function)<br><span class="hljs-built_in">FUNC_GEN_B</span>(my, function)<br><span class="hljs-built_in">myfunction</span>(); <span class="hljs-comment">// ok, from FUNC_GEN_A</span><br><span class="hljs-built_in">my_function</span>(); <span class="hljs-comment">// ok, from FUNC_GEN_B</span><br></code></pre></td></tr></table></figure></li><li><code>__VA_ARGS__</code>:多参数宏<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, a, b); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, a, b, c); &#125;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> PRINT(...) \</span><br><span class="hljs-meta">f( VA ARGS );</span><br><span class="hljs-built_in">PRINT</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">PRINT</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <br></code></pre></td></tr></table></figure></li><li><code>#if __has_include(&lt;iostream&gt;)</code>：c++17判断是否存在头文件<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">if</span> __has_include(<span class="hljs-string">&lt;iostream&gt;</span>)</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li><code>#if __cpp_constexpr</code>:C++20引入，判断编译器是否支持某特性，还有许多其它的宏<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">if</span> __cpp_constexpr</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x * x; &#125;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li><code>#pragma</code>:调用某个指令，依赖于编译器</li></ul><h3 id="技巧-1"><a href="#技巧-1" class="headerlink" title="技巧"></a>技巧</h3><p><strong>数字转字符串</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">define</span> TO_LITERAL_AUX(x) #x</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TO_LITERAL(x) TO_LITERAL_AUX(x)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> x1 = <span class="hljs-number">3</span> * <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> y1 = __LINE__ + <span class="hljs-number">4</span>;<br><span class="hljs-type">char</span> x2[] = <span class="hljs-built_in">TO_LITERAL</span>(<span class="hljs-number">3</span>);<br><span class="hljs-type">char</span> y2[] = <span class="hljs-built_in">TO_LITERAL</span>(__LINE__);<span class="hljs-comment">//这里你知道为啥包一层了把，有些并不是无意义的包</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Bitfield"><a href="#Bitfield" class="headerlink" title="Bitfield"></a>Bitfield</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S1</span> &#123;<br><span class="hljs-type">int</span> b1 : <span class="hljs-number">10</span>; <span class="hljs-comment">// range [0, 1023]</span><br><span class="hljs-type">int</span> b2 : <span class="hljs-number">10</span>; <span class="hljs-comment">// range [0, 1023]</span><br><span class="hljs-type">int</span> b3 : <span class="hljs-number">8</span>; <span class="hljs-comment">// range [0, 255]</span><br>&#125;; <span class="hljs-comment">// sizeof(S1): 4 bytes</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S2</span> &#123;<br><span class="hljs-type">int</span> b1 : <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> : <span class="hljs-number">0</span>; <span class="hljs-comment">// reset: force the next field</span><br><span class="hljs-type">int</span> b2 : <span class="hljs-number">10</span>; <span class="hljs-comment">// to start at bit 32</span><br>&#125;; <span class="hljs-comment">// sizeof(S1): 8 bytes</span><br></code></pre></td></tr></table></figure><h2 id="type-info"><a href="#type-info" class="headerlink" title="type_info"></a>type_info</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span> : A &#123;&#125;;<br>A a;<br>B b;<br>A&amp; a1 = b; <span class="hljs-comment">// implicit upcasting</span><br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(a).<span class="hljs-built_in">name</span>(); <span class="hljs-comment">// print &quot;1A&quot;</span><br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(b).<span class="hljs-built_in">name</span>(); <span class="hljs-comment">// print &quot;1B&quot;</span><br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(a1).<span class="hljs-built_in">name</span>(); <span class="hljs-comment">// print &quot;1B&quot;</span><br></code></pre></td></tr></table></figure><h2 id="未定义行为"><a href="#未定义行为" class="headerlink" title="未定义行为"></a>未定义行为</h2><h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><ul><li>Dereferencing a NULL pointer</li><li>Dereferencing a pointer returned by a “new” allocation of size zero</li><li>Using pointers to objects whose lifetime has ended (for instance, stack allocated objects or deleted objects)</li><li>Dereferencing a pointer that has not yet been definitely initialized</li><li>Performing pointer arithmetic that yields a result outside the boundaries (either above or below) of an array.</li><li>Dereferencing the pointer at a location beyond the end of an array.</li><li>Converting pointers to objects of incompatible types</li><li>Using memcpy to copy overlapping buffers.</li></ul><h3 id="buffer-overflows"><a href="#buffer-overflows" class="headerlink" title="buffer overflows"></a>buffer overflows</h3><ul><li>Reading or writing to an object or array at an offset that is negative, or beyond the size of that object (stack&#x2F;heap overflow)</li></ul><h3 id="Integer-Overflows"><a href="#Integer-Overflows" class="headerlink" title="Integer Overflows"></a>Integer Overflows</h3><ul><li>Signed integer overflow</li><li>Evaluating an expression that is not mathematically defined</li><li>Left-shifting values by a negative amount (right shifts by negative amounts are implementation defined)</li><li>Shifting values by an amount greater than or equal to the number of bits in the number (e.g. int64_t i &#x3D; 1; i &lt;&lt;&#x3D; 72 is undefined)</li></ul><h3 id="Types-Cast-and-Const"><a href="#Types-Cast-and-Const" class="headerlink" title="Types, Cast and Const"></a>Types, Cast and Const</h3><ul><li>Casting a numeric value into a value that can’t be represented by the target type (either directly or via static_cast)</li><li>Using an automatic variable before it has been definitely assigned (e.g., int i; i++; cout &lt;&lt; i;)</li><li>Using the value of any object of type other than volatile or sig_atomic_t at the receipt of a signal</li><li>Attempting to modify a string literal or any other const object during its lifetime</li><li>Concatenating a narrow with a wide string literal during preprocessing</li></ul><h3 id="Function-and-Template"><a href="#Function-and-Template" class="headerlink" title="Function and Template"></a>Function and Template</h3><ul><li>Not returning a value from a value-returning function (directly or by flowing off from a try-block)</li><li>Multiple different definitions for the same entity (class, template, enumeration, inline function, static member function, etc.)</li><li>Infinite recursion in the instantiation of templates</li><li>Calling a function using different parameters or linkage to the parameters and linkage that the function is defined as using.</li></ul><h3 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h3><ul><li>Cascading destructions of objects with static storage duration</li><li>The result of assigning to partially overlapping objects</li><li>Recursively re-entering a function during the initialization of its static objects</li><li>Making virtual function calls to pure virtual functions of an object from its constructor or destructor</li><li>Referring to nonstatic members of objects that have not been constructed or have already been destructed</li></ul><h3 id="Source-file-and-Preprocessing"><a href="#Source-file-and-Preprocessing" class="headerlink" title="Source file and Preprocessing"></a>Source file and Preprocessing</h3><ul><li>A non-empty source file that doesn’t end with a newline, or ends with a backslash (prior to C++11)</li><li>A backslash followed by a character that is not part of the specified escape codes in a character or string constant (this is implementation-defined in C++11).</li><li>Exceeding implementation limits (number of nested blocks, number of functions in a program, available stack space …)</li><li>Preprocessor numeric values that can’t be represented by a long int</li><li>Preprocessing directive on the left side of a function-like macro definition</li><li>Dynamically generating the defined token in a #if expression</li></ul><h3 id="to-be-classified"><a href="#to-be-classified" class="headerlink" title="to be classified"></a>to be classified</h3><ul><li>Calling exit during the destruction of a program with static storage duration</li></ul><h2 id="c-str2num"><a href="#c-str2num" class="headerlink" title="c_str2num"></a>c_str2num</h2><p>高性能转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> N, <span class="hljs-type">unsigned</span> MUL, <span class="hljs-type">int</span> INDEX = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">struct</span> fastStringToIntStr;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-title">fastStringToUnsigned</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str, <span class="hljs-type">int</span> length)</span> </span>&#123;<br><span class="hljs-keyword">switch</span>(length) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt;<span class="hljs-number">10</span>, <span class="hljs-number">1000000000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">9</span>, <span class="hljs-number">100000000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">8</span>, <span class="hljs-number">10000000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">7</span>, <span class="hljs-number">1000000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">6</span>, <span class="hljs-number">100000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">4</span>, <span class="hljs-number">1000</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">3</span>, <span class="hljs-number">100</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">2</span>, <span class="hljs-number">10</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> fastStringToIntStr&lt; <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br><span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> N, <span class="hljs-type">unsigned</span> MUL, <span class="hljs-type">int</span> INDEX&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fastStringToIntStr</span> &#123;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-title">aux</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span>&gt;(str[INDEX] - <span class="hljs-string">&#x27;0&#x27;</span>) * MUL +<br>fastStringToIntStr&lt;N - <span class="hljs-number">1</span>, MUL / <span class="hljs-number">10</span>, INDEX + <span class="hljs-number">1</span>&gt;::<span class="hljs-built_in">aux</span>(str);<br>&#125;<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">unsigned</span> MUL, <span class="hljs-type">int</span> INDEX&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fastStringToIntStr</span>&lt;<span class="hljs-number">1</span>, MUL, INDEX&gt; &#123;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-title">aux</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span>&gt;(str[INDEX] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="删除vector某个元素"><a href="#删除vector某个元素" class="headerlink" title="删除vector某个元素"></a>删除vector某个元素</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[v.size()-<span class="hljs-number">1</span>]);<br>v<span class="hljs-selector-class">.pop_back</span>();<br></code></pre></td></tr></table></figure><h2 id="批量删除vector元素"><a href="#批量删除vector元素" class="headerlink" title="批量删除vector元素"></a>批量删除vector元素</h2><p>以下方法都是类似于把元素移到末尾，然后统一删除</p><ul><li>删除所有值为42的：<code>v.erase(remove(v.begin(), v.end(), 42), v.end());</code></li><li>删除所有值大于0的:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">remove_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> x) &#123;<br>    <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">0</span>;<br>&#125;), v.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure></li><li>c++20<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-built_in">erase</span>(v, <span class="hljs-number">42</span>);       <span class="hljs-comment">// 删除所有值为 42 的元素</span><br><span class="hljs-built_in">erase_if</span>(v, [](<span class="hljs-type">int</span> x) &#123;<br>    <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">0</span>;   <span class="hljs-comment">// 删除所有值大于 0 的元素</span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="维护有序的vector"><a href="#维护有序的vector" class="headerlink" title="维护有序的vector"></a>维护有序的vector</h2><p><code>s.insert(lower_bound(s.begin(),s.end(),3), 3)</code></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vi及vim</title>
    <link href="/2019/07/18/vi%E5%8F%8Avim/"/>
    <url>/2019/07/18/vi%E5%8F%8Avim/</url>
    
    <content type="html"><![CDATA[<ol><li>vi:<br>  a.命令模式替换:%s&#x2F;xx&#x2F;xx&#x2F;gc,s代表替换,g代表一行多次匹配,c表示确认。<br>  b.在每行尾部加相同内容技巧:进入列模式(ctrl+v)，按‘G’选中每一行，按‘$’延伸至行尾，再按‘A’添加内容</li><li>sed与awk的命令格式: command [options] script filename</li><li>awk默认模式为所有行，默认操作打印。</li><li>实心句点”.“表示当前行</li><li>$表示最后一行</li><li>ctrl+g显示当前文件名<br>ctrl+s锁住<br>ctrl+q解锁</li><li>一般模式中，”&gt;””&lt;”为缩进层级</li><li>ctrl+a会把当前或之后数字加1，若要一次加10则按10ctrl+a,而ctrl+x则是减</li><li>guu使当前行都变成小写，gUU使当前行都变成大写，g~则反转大小写</li><li>一般模式下按下yt，再按你想要复制内容的后一个词，之后再在插入模式里按ctrl+r+0或ctrl+r+ctrl+p+0，就完成粘贴</li><li>在插入模式中按下ctrl+r+&#x3D;进入计算模式完成后回车完成结果输入。</li><li>在插入模式中可以根据字符编码进行输入字符,汇总如下:</li></ol><table><thead><tr><th align="center">按键操作</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">ctrl+v{123}</td><td align="center">以十进制字符编码插入字符</td></tr><tr><td align="center">ctrl+v+u{1234}</td><td align="center">以十六进制字符编码插入字符</td></tr><tr><td align="center">ctrl+k{char1}{char2}</td><td align="center">插入以二合字母表示的字符</td></tr></tbody></table><p>　　可以在命令模式中输入:h digraph-table，来查看二合字母<br>　　一般模式中，在字符上面输入ga可查看其十进制及十六进制编码<br>13.<br>gv重新选上次的高亮区<br>14.<br>o在可视模式中切换高亮区的活动端<br>15.<br>命令模式中%代表全部行<br>16.<br>可以进入行可视模式，选中对应行，然后进入命令模式进行操作<br>17.<br>命令模式中t为copy命令的简写<br>18.<br>在命令模式中执行普通模式下的命令可以用normal，如:<br><code>:%normal A;</code><br>就是在每行后加;<br>19.<br>一般模式下按*可以查找当前光标下的单词<br>20.<br>可以在命令模式中执行shell命令，只要在命令前加!,这只适合执行一次<br>21.<br>当执行多次命令时，可以在命令模式中输入shell，要想返回vi可以在shell中输入exit<br>22.<br>read,与write命令可以与shell命令结合使用,read把shell命令的标准输出读入缓冲区，write则是把缓冲区当做shell命令的标准输入<br>23.<br>可以用source脚本文件执行一系列的命令<br>24.<br>可以在一般模式中输入ctrl+w+v竖着分隔同一文件<br>25.<br>gj、gk等是在屏幕行上的移动<br>26.<br>文本对象与选择区域</p><table><thead><tr><th align="center">文本对象</th><th align="center">选择区域</th><th align="center">文本对象</th><th align="center">选择区域</th></tr></thead><tbody><tr><td align="center">iw</td><td align="center">当前单词</td><td align="center">aw</td><td align="center">当前单词及空格</td></tr><tr><td align="center">iW</td><td align="center">当前字串</td><td align="center">aw</td><td align="center">当前字串及空格</td></tr><tr><td align="center">is</td><td align="center">当前句子</td><td align="center">as</td><td align="center">当前句子及空格</td></tr><tr><td align="center">ip</td><td align="center">当前段落</td><td align="center">ap</td><td align="center">当前段落及空格</td></tr><tr><td align="center">ab</td><td align="center">当前的圆括号</td><td align="center">ib</td><td align="center">当前圆括号的内部</td></tr><tr><td align="center">aB</td><td align="center">当前的花括号</td><td align="center">iB</td><td align="center">当前花括号内部</td></tr><tr><td align="center">a]</td><td align="center">当前的方括号</td><td align="center">i]</td><td align="center">当前方括号的内部</td></tr><tr><td align="center">a&gt;</td><td align="center">当前尖括号</td><td align="center">i&gt;</td><td align="center">当前尖括号的内部</td></tr><tr><td align="center">a’</td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">a”</td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">at</td><td align="center">xml标签</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><ol start="27"><li>m{a-zA-Z},标记位置，`{mark}跳转到对应位置,``上次跳转动作之前的位置,经常配合使用</li><li>ctrl+o也可以跳转到上次的位置</li><li>%命令可以在一对任意括号上进行跳转</li><li><code>&quot;add</code>指的是剪切一整行到a寄存器,<code>&quot;ap</code>则粘贴a寄存器里的内容</li><li>寄存器列表</li></ol><table><thead><tr><th align="center">名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">“”</td><td align="center">无名寄存器</td></tr><tr><td align="center">“0</td><td align="center">复制专用寄存器</td></tr><tr><td align="center">“(a-z)</td><td align="center">自定义寄存器</td></tr><tr><td align="center">“_</td><td align="center">黑洞寄存器</td></tr></tbody></table><p>　　在插入模式下可以用ctrl+r+上寄存器名来粘贴，此时没有”号<br>32.<br>宏录制的过程，q{register}录制开始-&gt;q录制结束-&gt;@{register}执行宏动作,还可以指定次数<br>33.<br>命令模式:reg {register}可以查看寄存器内容<br>34.<br>要想不覆盖寄存器内容，可以q{register}，register名字必须为大写(如qa-&gt;qA)，这样就追加了，否则是覆盖重新录制,<br>35.<br>一般模式下ctrl+b向前翻页<br>一般模式下ctrl+f向后翻页<br>36.<br>dG会删除光标之后的所有内容<br>37.<br>H,M,L,分别是移动到屏幕行的顶,中,尾<br>38.<br>按键映射</p><table><thead><tr><th align="center">递归</th><th align="center">非递归</th><th align="center">模式</th></tr></thead><tbody><tr><td align="center">:map</td><td align="center">:noremap</td><td align="center">normal,visual,operator-pending</td></tr><tr><td align="center">:nmap</td><td align="center">:nnoremap</td><td align="center">normal</td></tr><tr><td align="center">:xmap</td><td align="center">:xnoremap</td><td align="center">visual</td></tr><tr><td align="center">:cmap</td><td align="center">:cnoremap</td><td align="center">command-line</td></tr><tr><td align="center">:omap</td><td align="center">:onoremap</td><td align="center">operator-pending</td></tr><tr><td align="center">:imap</td><td align="center">:inoremap</td><td align="center">insert</td></tr><tr><td align="center">39.</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">在.vim&#x2F;bundle&#x2F;YouCompleteMe&#x2F;.ycm_extra_conf.py配置c++20</td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="打造IDE"><a href="#打造IDE" class="headerlink" title="打造IDE"></a>打造IDE</h1><h2 id="单文件运行"><a href="#单文件运行" class="headerlink" title="单文件运行"></a>单文件运行</h2><ul><li>插件:skywind3000&#x2F;asynctasks.vim,skywind3000&#x2F;asyncrun.vim</li><li>链接:<a href="https://github.com/skywind3000/asyncrun.vim">asyncrun</a>,<a href="https://github.com/skywind3000/asynctasks.vim">asynctasks</a></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>F7</code></td><td align="center">编译并运行文件，这会打开一个运行shell的窗口</td></tr><tr><td align="center"><code>Ctrl+d</code></td><td align="center">关闭shell窗口</td></tr><tr><td align="center"><code>Ctrl+t</code></td><td align="center">隐藏&#x2F;显示shell窗口</td></tr><tr><td align="center"><code>Ctrl+\Ctrl+n</code></td><td align="center">把shell窗口的所有文字进入编辑模式，这样就能像操作文本一样操作该窗口(只读窗口)</td></tr><tr><td align="center"><code>Ctrl+w+&quot;&quot;</code></td><td align="center">前提先用y命令复制文本，然后进入shell窗口，按此快捷键就会粘贴</td></tr></tbody></table><h2 id="NerdTree"><a href="#NerdTree" class="headerlink" title="NerdTree"></a>NerdTree</h2><ul><li>插件:’preservim&#x2F;nerdtree’</li><li>链接:<a href="https://github.com/preservim/nerdtree">NerdTree</a></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>,nn</code></td><td align="center">打开nerdTree</td></tr></tbody></table><h2 id="对齐线"><a href="#对齐线" class="headerlink" title="对齐线"></a>对齐线</h2><ul><li>插件:’nathanaelkane&#x2F;vim-indent-guides’</li><li>链接:<a href="https://github.com/preservim/vim-indent-guides">vim-indent-guides</a></li></ul><p>|快捷键|作用|<br>|<code>,ig</code>|使用对齐线|</p><h2 id="成对元素"><a href="#成对元素" class="headerlink" title="成对元素"></a>成对元素</h2><ul><li>插件:’tpope&#x2F;vim-surround’</li><li>链接:<a href="https://github.com/tpope/vim-surround">vim-surround</a></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>cs&quot;&#39;</code></td><td align="center">在一个有<code>&quot;</code>元素包围的字段上，更改<code>&quot;</code>为<code>&#39;</code></td></tr><tr><td align="center"><code>ds&quot;</code></td><td align="center">在一个有<code>&quot;</code>元素包围的字段上，删除<code>&quot;</code></td></tr><tr><td align="center"><code>ysiw]</code></td><td align="center">用中括号包围一个单词</td></tr><tr><td align="center"><code>yss)]</code></td><td align="center">一行加括号</td></tr><tr><td align="center"><code>S&lt;p class=&quot;important&quot;&gt;</code></td><td align="center">V选中一行,然后输入，会包围该行</td></tr></tbody></table><ul><li>左括号会有空格</li><li>b可以代表作括号，B代表左花括号</li></ul><h2 id="快速查找文件"><a href="#快速查找文件" class="headerlink" title="快速查找文件"></a>快速查找文件</h2><ul><li>插件:’kien&#x2F;ctrlp.vim’</li><li>链接:<a href="https://github.com/ctrlpvim/ctrlp.vim?tab=readme-ov-file">ctrlp</a></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>,j</code></td><td align="center">快速查找磁盘文件</td></tr><tr><td align="center"><code>,b</code></td><td align="center">快速查找缓冲区文件</td></tr></tbody></table><h2 id="多行模式-有待研究"><a href="#多行模式-有待研究" class="headerlink" title="多行模式(有待研究)"></a>多行模式(有待研究)</h2><ul><li>插件:’mq979&#x2F;vim-visual-multi’</li><li>链接:<a href="https://github.com/mg979/vim-visual-multi">vim-visual-multi</a></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+Down/Up</code></td><td align="center">插入光标进入cursor mode等价于normal mode,Tab键可以切换到extend mode</td></tr><tr><td align="center"><code>Ctrl+n</code></td><td align="center">选中一个单词进入extend mode等价于visual mode,Tab键可以切换到cursor mode</td></tr><tr><td align="center"><code>Ctrl+Arrows</code></td><td align="center">选中字符</td></tr><tr><td align="center"><code>Q</code></td><td align="center">放弃当前的选中</td></tr></tbody></table><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>插件:’tpope&#x2F;vim-commentary’</li><li>链接:<a href="https://github.com/tpope/vim-commentary">vim-commentary</a></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>gcc</code></td><td align="center">快速注释一行</td></tr><tr><td align="center"><code>gcap</code></td><td align="center">注释一段</td></tr><tr><td align="center"><code>:7,17Commentary</code></td><td align="center">注释7,17行</td></tr><tr><td align="center"><code>:g/TODO/Commentary</code></td><td align="center">注释含有TODO行</td></tr></tbody></table><h2 id="快速ack-grep"><a href="#快速ack-grep" class="headerlink" title="快速ack(grep)"></a>快速ack(grep)</h2><ul><li>插件:<code>mileszs/ack.vim</code></li><li>链接:<a href="https://github.com/mileszs/ack.vim?tab=readme-ov-file">ack</a></li><li>前提:需要安装ack，他是高级版的grep</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th><th align="center">插件</th></tr></thead><tbody><tr><td align="center"><code>,sf</code></td><td align="center">列出当前文件所有函数</td><td align="center">Plug ‘Yggdroot&#x2F;LeaderF’, { ‘do’: ‘:LeaderfInstallCExtension’ }</td></tr><tr><td align="center"><code>,o</code></td><td align="center">查看缓冲区列表</td><td align="center">jlanzarotta&#x2F;bufexplorer</td></tr><tr><td align="center"><code>,bd</code></td><td align="center">关闭当前缓冲区</td><td align="center">jlanzarotta&#x2F;bufexplorer</td></tr><tr><td align="center"><code>,ba</code></td><td align="center">关闭所有缓冲区</td><td align="center">jlanzarotta&#x2F;bufexplorer</td></tr><tr><td align="center"><code>,bl</code></td><td align="center">切换缓冲区</td><td align="center">jlanzarotta&#x2F;bufexplorer</td></tr><tr><td align="center"><code>,bh</code></td><td align="center">切换缓冲区</td><td align="center">jlanzarotta&#x2F;bufexplorer</td></tr><tr><td align="center"><code>+/_</code></td><td align="center">智能扩展选中区域</td><td align="center">terryma&#x2F;vim-expand-region</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>文本处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件</title>
    <link href="/2019/07/18/Linux%E6%96%87%E4%BB%B6/"/>
    <url>/2019/07/18/Linux%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ol><li><p>&#x2F;etc&#x2F;resolv.conf:加快网速的</p></li><li><p>&#x2F;etc&#x2F;apt&#x2F;sources.list:源列表</p></li><li><p>&#x2F;etc&#x2F;sudoers:sudo权限设置</p></li><li><p>&#x2F;etc&#x2F;xinetd.d&#x2F;:守护进程文件夹</p></li><li><p>&#x2F;etc&#x2F;inputrc:登录式bash的热键设置</p></li><li><p>登录式bash加载设置文件顺序:&#x2F;etc&#x2F;profile -&gt; ~&#x2F;.bash_profile(~&#x2F;.bash_login、~&#x2F;.profile) -&gt; ~&#x2F;.bashrc</p></li><li><p>非登录式bash加载设置文件顺序:~&#x2F;.bashrc -&gt; &#x2F;etc&#x2F;bashrc -&gt; &#x2F;etc&#x2F;profile.d&#x2F;*.sh<br>这其中的&#x2F;etc&#x2F;profile.d&#x2F;*.sh里为bash操作界面、语系等</p></li><li><p>&#x2F;dev&#x2F;pts:伪终端设备的目录<br>&#x2F;dev&#x2F;:字符设备对应的节点</p></li><li><p>&#x2F;proc&#x2F;net&#x2F;dev:网络终端接口</p></li><li><p>&#x2F;etc&#x2F;mkinitcpio.conf:钩子的配置文件</p></li><li><p>&#x2F;etc&#x2F;default&#x2F;grub:设置当前系统的启动参数(仅deepin有)<br>&#x2F;boot&#x2F;grub&#x2F;grub.cfg:设置所有系统的启动参数(arch的也可以设置,存在于deepin目录)</p></li><li><p>&#x2F;proc&#x2F;kallsyms:内核导出的符号表，第一列表示内核地址空间地址，第二列表示符号属性，第三段表示符号的字符串，也就是EXPORT_SYMBOL()导出的符号，第四列表示那些模块在使用这些符号</p></li><li><p>&#x2F;proc&#x2F;devices:字符设备,第一列数字代表主设备号,第二列则是设备内核模块名<br>&#x2F;proc&#x2F;(number):进程号的相关动态信息</p></li><li><p>超级块是对一个文件系统的描述<br>索引节点是对一个文件物理属性的描述<br>目录项是对一个文件逻辑属性的描述<br>一个进程所处的位置是由fs_struct来描述的,而一个进程(或用户)打开的文件是由files_struct来描述的,而整个系统所打开的文件是由file结构来描述的<br>17.&#x2F;etc&#x2F;ld.so.conf.d&#x2F;*.conf<br>里面是库文件所在目录，配置完用<code>ldconfig</code>更新一下<br>18.&#x2F;usr&#x2F;share&#x2F;doc目录下为各个安装软件的文档<br>19.&#x2F;usr&#x2F;share&#x2F;dict下竟然存了个英文字典<br>20.修改用户头像<br>&#x2F;var&#x2F;lib&#x2F;AccountsService&#x2F;users&#x2F;[userName]<br>默认icons文件位置在&#x2F;usr&#x2F;share&#x2F;pixmaps&#x2F;faces&#x2F;<br>头像尺寸方形才不缺失</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2019/07/18/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/07/18/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>同时对某个目录下多个文件操作用<code>&#123;a,b&#125;</code></p></li><li><p>搜索某个软件包 <code>sudo apt-cache search &lt;关键字&gt;</code></p></li><li><p>终端快捷键:</p><table><thead><tr><th align="center">按键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">ctrl+a</td><td align="center">命令行首部</td></tr><tr><td align="center">ctrl+e</td><td align="center">命令行尾部</td></tr><tr><td align="center">ctrl+f</td><td align="center">前移一个字符</td></tr><tr><td align="center">ctrl+b</td><td align="center">后移一个字符</td></tr><tr><td align="center">ctrl+l</td><td align="center">等价于clear</td></tr><tr><td align="center">ctrl+n</td><td align="center">向下翻页</td></tr><tr><td align="center">ctrl+p</td><td align="center">向上翻页</td></tr><tr><td align="center">alt+f</td><td align="center">前移一个字</td></tr><tr><td align="center">alt+b</td><td align="center">后移一个字</td></tr><tr><td align="center">alt+c</td><td align="center">单词首字符大写</td></tr><tr><td align="center">alt+t</td><td align="center">光标位置的字和其前面的字互换</td></tr><tr><td align="center">alt+l</td><td align="center">从光标到字尾转换成小写字母</td></tr><tr><td align="center">alt+u</td><td align="center">从光标到字尾转换成大写字母</td></tr><tr><td align="center">alt+d</td><td align="center">剪切从光标到字尾的文本</td></tr><tr><td align="center">alt+#</td><td align="center">注释当前的命令</td></tr><tr><td align="center">alt+.</td><td align="center">插入上一个命令的最后一个参数</td></tr><tr><td align="center">alt+Backspace</td><td align="center">剪切从光标到字首的文本</td></tr><tr><td align="center">ctrl+k</td><td align="center">删除光标后的字符</td></tr><tr><td align="center">ctrl+d</td><td align="center">删除光标上的字符</td></tr><tr><td align="center">ctrl+t</td><td align="center">交换光标处和它的前面字符</td></tr><tr><td align="center">ctrl+s</td><td align="center">锁定屏幕</td></tr><tr><td align="center">ctrl+q</td><td align="center">解锁</td></tr><tr><td align="center">ctrl+h</td><td align="center">删除左侧字符</td></tr><tr><td align="center">ctrl+w</td><td align="center">删除上一个单词</td></tr><tr><td align="center">ctrl+y</td><td align="center">粘贴剪切的文本</td></tr><tr><td align="center">ctrl+k</td><td align="center">剪切从光标到行尾的文本</td></tr><tr><td align="center">ctrl+u</td><td align="center">剪切从光标到行首的文本</td></tr><tr><td align="center">ctrl+v</td><td align="center">输入特殊字符</td></tr><tr><td align="center">ctrl+r</td><td align="center">搜索词,再次按该组合键可以循环搜索,回车选中,ctrl+G不做任何操作返回终端</td></tr><tr><td align="center">ctrl+x+ctrl+e</td><td align="center">在文本编辑器中快速打开当前命令,退出编辑器后，自动执行</td></tr><tr><td align="center">set -o vi</td><td align="center">设置vi风格</td></tr><tr><td align="center">!$</td><td align="center">重新使用上一个命令中的最后一项(最好用<code>alt+.</code>可以跳转上几次)</td></tr><tr><td align="center">!number</td><td align="center">重复历史表中第number行命令</td></tr><tr><td align="center">!!</td><td align="center">执行上一个命令(常用于忘加sudo<code>sudo !!</code>)</td></tr></tbody></table></li><li><p>命令间连接</p><ul><li>“;”:一直执行无论成功与否</li><li>“&amp;&amp;”:前面的命令执行成功才能执行后面</li><li>“||”:前面的命令执行失败才能执行后面</li></ul></li><li><p><code>kill %2</code> 2代表jobs命令显示下的任务号码,%区别于进程ID</p></li><li><p>man</p><p><code>man &lt;num&gt; &lt;cmd&gt;</code></p><table><thead><tr><th align="center">章节</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">用户命令</td></tr><tr><td align="center">2</td><td align="center">程序接口内核系统调用</td></tr><tr><td align="center">3</td><td align="center">c库函数程序接口</td></tr><tr><td align="center">4</td><td align="center">特殊文件,比如说设备节点和驱动程序</td></tr><tr><td align="center">5</td><td align="center">文件格式</td></tr><tr><td align="center">6</td><td align="center">游戏娱乐,如屏幕保护程序</td></tr><tr><td align="center">7</td><td align="center">其他方面</td></tr><tr><td align="center">8</td><td align="center">系统管理员命令</td></tr><tr><td align="center">9</td><td align="center">内核例程</td></tr><tr><td align="center"><code>-k &lt;pattern&gt;</code>在文档中搜索某个关键字,</td><td align="center"></td></tr></tbody></table></li><li><p>后台运行</p><p><code>nohup [命令参数] &amp;</code></p></li><li><p>ln命令：</p><ul><li><code>ln source target</code> 硬链接</li><li><code>ln -s source target</code>软连接。</li></ul><p>两者的区别:</p><ul><li>软连接不增加文件的链接数，而硬链接则增加</li><li>不能跨文件系统创建硬链接，硬链接不能连接目录</li><li>硬链接的inode号完全相同，指向同一文件，软连接则有不同的inode号，并且新文件类型为专有软链接类型，其指向的文件内容存储着实际文件的路径</li><li>硬链接指向的文件当链接数减为0时，才真正删除，软链接若实际文件删除，则软链接失效。</li></ul></li></ul><p><code>readlink -f filename</code>可以显示链接的原始指向位置</p><ul><li><p>nslookup</p><p><code>nslookup github.global.ssl.fastly.Net</code><br><code>nslookup github.com</code><br>查到的域名加到&#x2F;etc&#x2F;hosts里可以加快访问速度</p></li></ul><p><code>sudo /etc/init.d/networking restart</code>刷新缓存</p><ul><li><p>systemctl</p><ul><li>systemctl查看&#x2F;etc&#x2F;init.d中哪些服务进程会在引导时启动<br><code>systemctl list-unit-files --type=service | grep enabled</code>  </li><li>查找废弃服务<br><code>systemctl --all | grep not-found</code></li><li>停止某个服务进程、开机禁止启动以及某个进程的状态<br><code>sudo systemctl stop xxx.service</code><br><code>sudo systemctl disable xxx.service</code><br><code>sudo systemctl status xxx.service</code></li></ul></li></ul><p><strong>注</strong>:不能启用或禁用静态服务，这些服务为其他进程所依赖。</p><ul><li><p>查看前一次启动的开机日志<code>journalctl -b -1</code>  </p></li><li><p>查看启动服务消耗时间<code>systemd-analyze blame</code></p></li><li><p>mask禁用某种服务 <code>systemctl mask xx.service</code></p></li><li><p>命令行复制到剪贴板<br><code>cat filename | xsel -b</code></p></li><li><p>plymouth</p><ul><li>主题文件夹：&#x2F;usr&#x2F;share&#x2F;plymouth&#x2F;themes&#x2F;</li><li>设置文件夹:&#x2F;etc&#x2F;plymouth&#x2F;plymouthd.conf</li><li>列出主题列表<code>plymouth-set-default-theme -l</code></li><li>更改Theme&#x3D;的内容<code>sudo vi /etc/plymouth/plymouthd.conf</code><br><code>sudo mkinitcpio -p linux</code>生成新的镜像,重启生效<br>需要’quite splash’静默启动参数,在grub里设置</li></ul></li><li><p><code>grub-mkconfig</code> 刷新grub的配置</p></li><li><p>同个命令对应不同软件版本配置</p><p><code>update-alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</code></p><p><code>update-alternatives --install /usr/bin/arm-linux-gnueabi-gcc arm-linux-gnueabi-gcc /usr/bin/arm-linux-gnueabi-gcc-5 5</code></p><p><code>update-alternatives --config arm-linux-gnueabi-gcc</code></p></li><li><p>内核模块相关</p><ul><li><code>modinfo *.ko</code>查看某个编译好的模块</li><li><code>sudo insmod *.ko</code>装入模块</li><li><code>dmesg</code> 查看内核打印信息</li><li><code>lsmod</code> 显示已加载的模块</li><li>已加载的模块会在&#x2F;sys&#x2F;module&#x2F;下建立对应文件夹</li><li><code>sudo rmmod x.ko</code>卸载模块</li></ul></li><li><p>手机USB线wifi共享：</p><ul><li><code>ip addr show</code>查看USB网络借口</li><li><code>dhclient enpxxx</code>给借口设置ip地址，手机热点要开</li></ul></li><li><p>od命令</p><ul><li><code>od -t x1 x.dat</code>以十六进制打印文件x.dat各字节</li><li><code>od -c /bin/bash</code>逐字符方式打印文件,遇到不可打印字符打印编码</li><li><code>echo \&#39; | od -t o1</code>查看单引号的八进制</li></ul></li><li><p>md5sum命令</p><ul><li><code>md5sum file1 file2</code>计算两个文件的md5值,相同文件md5值相同</li></ul></li><li><p>行律问题</p><ul><li><code>ctty -a</code>查看行律配置</li><li><code>ctty erase ^H</code>设置退格键</li></ul></li><li><p>windows文件不兼容</p><ul><li><code>unix2dos filename</code>转换成windows类型的文件,也有dos2unix命令</li></ul></li><li><p>gbk中文字符转换为utf</p><ul><li><code>iconv -f utf-8 -t gbk</code></li><li><code>echo &quot;汉字&quot; | iconv -f utf-8 -t gbk | od -t x1</code></li></ul></li><li><p><code>--</code>显示终止选项命令<br><code>rm -- -i</code>表示删除名为’-i’的文件</p></li><li><p>在任何命令前加<code>time</code>,可以计时运行时间</p></li></ul><h1 id="xargs命令"><a href="#xargs命令" class="headerlink" title="xargs命令"></a>xargs命令</h1><p>将标准输入构造为命令的命令行参数,如果命令行参数过多,会启动多个进程,与单一普通管道相比就是批处理</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ul><li>打印c语言文件含有–hlep的行：<code>find src -name \*.c -print | xargs grep -n -- --help</code></li><li>只打印不执行命令，用于确认：<code>ls|xargs -L1 -p head</code></li><li>移动文件到文件夹:<code>find . -name &quot;*.bak&quot; -print 0|xargs -0 -I file mv file ~/old</code></li></ul><h1 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h1><ul><li><code>cat &lt; filename</code>打印名为filename的文件内容</li><li><code>cat &lt;&lt; END</code>接下来直到END之间的内容</li><li><code>cat &lt;&lt;&lt; filename</code>打印filename这个单词</li><li><code>&gt; 文件名</code>清空文件</li></ul><h1 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h1><p>  从Stdin读取数据，并同时输出到Stdout和文件 <code>ls /usr/bin | tee ls.txt |grep zip</code></p><h1 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h1><ul><li><code>du -sh * | sort -rh</code>查看当前目录下所有文件大小并排序</li><li><code>du -sh</code>统计当前目录大小</li><li><code>du -h --max-depth=1 | sort</code>查看当前所有一级子目录大小并排序</li></ul><h1 id="at"><a href="#at" class="headerlink" title="at"></a>at</h1><ul><li><code>systemctl start atd.service</code>启动服务</li><li><code>at &lt;时间点&gt;</code>时间点格式举例:19:33、3pm+7 days、20:00 tomorrow 之后进入交互界面,输入命令,ctrl+D退出</li><li><code>at -l 或者 atq</code>查看列表</li><li><code>at -c 任务号</code>查看任务内容</li><li><code>at -r 任务号 或者 atrm 任务号</code>取消任务</li><li><code>at -f 脚本文件</code>不进入交互,直接运行某个脚本</li><li><code>-M</code>忽略产生的任何输出</li><li>&#x2F;etc&#x2F;at.deny,文件中的用户不能执行at(系统默认存在)</li><li>&#x2F;etc&#x2F;at.allow,默认不存在,只要存在的用户才能执行</li></ul><h1 id="crontab服务定时任务计划"><a href="#crontab服务定时任务计划" class="headerlink" title="crontab服务定时任务计划"></a>crontab服务定时任务计划</h1><ul><li><code>sudo systemctl start cronie.service</code>启动服务</li><li><code>crontab -e</code>新增任务或编辑任务</li><li><code>crontab -l</code>显示crontab文件</li><li><code>crontab -r</code>删除crontab文件</li><li><code>crontab -ir</code>删除crontab文件前提醒用户</li></ul><h2 id="内容格式"><a href="#内容格式" class="headerlink" title="内容格式"></a>内容格式</h2><p>格式如下: <code>&lt;minute&gt; &lt;hour&gt; &lt;day&gt; &lt;month&gt; &lt;week&gt; &lt;command&gt;</code></p><table><thead><tr><th align="center">条目</th><th align="center">取值</th></tr></thead><tbody><tr><td align="center">minute</td><td align="center">0到59之间任何整数</td></tr><tr><td align="center">hour</td><td align="center">0到23之间任何整数</td></tr><tr><td align="center">day</td><td align="center">1到31之间的任何整数</td></tr><tr><td align="center">month</td><td align="center">1到12之间任何整数</td></tr><tr><td align="center">week</td><td align="center">1到7之间任何整数,</td></tr><tr><td align="center">command</td><td align="center">执行的命令</td></tr></tbody></table><ul><li><code>*</code>代表所有可能值</li><li><code>,</code>一个列表范围</li><li><code>-</code>表示一个整数范围</li><li><code>/</code>指定时间间隔的频率,比如”0-23&#x2F;2”表示每两小时执行</li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>如果对时间精读要求不高,可以把脚本复制到&#x2F;etc&#x2F;cron.daily等目录下</p><ul><li><code>* * * * * myCommand</code>:每分钟执行一次</li><li><code>3,15 * * * * myCommand</code>:每小时的第3和第15分钟执行</li><li><code>3,15 8-11 * * * myCommand</code>:在上午8点到11点的第3和第15分钟执行</li><li><code>3,15 8-11 */2  *  * myCommand</code>:每隔两天的上午8点到11点的第3和第15分钟执行</li><li><code>3,15 8-11 * * 1 myCommand</code>:每周一上午8点到11点的第3和第15分钟执行</li><li><code>30 21 * * * /etc/init.d/smb restart</code>:每晚的21:30重启smb</li><li><code>45 4 1,10,22 * * /etc/init.d/smb restart</code>:每月1、10、22日的4 : 45重启smb</li><li><code>10 1 * * 6,0 /etc/init.d/smb restart</code>:每周六、周日的1 : 10重启smb</li><li><code>0,30 18-23 * * * /etc/init.d/smb restart</code>:每天18 : 00至23 : 00之间每隔30分钟重启smb</li><li><code>0 23 * * 6 /etc/init.d/smb restart</code>:每星期六的晚上11 : 00 pm重启smb</li><li><code>* */1 * * * /etc/init.d/smb restart</code>:每一小时重启smb</li><li><code>0 23-7 * * * /etc/init.d/smb restart</code>晚上11点到早上7点之间，每隔一小时重启smb</li></ul><h2 id="anacron"><a href="#anacron" class="headerlink" title="anacron"></a>anacron</h2><p>anacron是对该程序的一个补充,它会自动运行crontab原本应该运行但由于关机等原因造成的程序,但它只会处理位于&#x2F;etc&#x2F;cron.daily、&#x2F;etc&#x2F;cron.weekly、&#x2F;etc&#x2F;cron.monthly下的脚本文件,它的配置文件位于&#x2F;etc&#x2F;anacrontab<br>anacron是自动运行的?(有待研究)</p><ul><li><p>run-parts一个接一个运行同一目录下的脚本</p><ul><li><code>run-parts&lt;directory-path&gt;</code></li><li><code>run-parts --list --regex  &#39;^s.\*sh$&#39; &lt;directory&gt; </code></li></ul></li><li><p><code>type &lt;command&gt;</code>识别命令,有以下几种</p><ul><li>可执行命令，给出路径</li><li>shell自身的命令(builtins),内建命令不会产生子进程,代价更小</li><li>一个shell函数</li><li>别名命令</li></ul></li><li><p><code>whatis &lt;command&gt;</code>会给出命令简短的说明</p></li><li><p><code>rm !(*.csv)</code>删除除了csv结尾的所有文件(貌似只有bash支持，zsh不支持)</p></li><li><p><code>mkdir &#123;2007..2009&#125;\_0&#123;1..9&#125;&#123;A,B&#125;</code>创建一系列文件夹,这其实是花括号展开</p></li><li><p><code>apropos &lt;some word&gt;</code>在man手册里搜索关键字</p></li><li><p><code>info &lt;command&gt;</code>man手册的另一种排版，有点鸡肋</p></li><li><p>标准错误的重定向</p><p>标准错误和标准输出重定向同一个文件<br><code>ls -l xx &gt;info.txt 2&gt;&amp;1</code>等价于<code>ls -l xx &amp;&gt; info.txt</code></p></li><li><p>env 或 printenv打印当前环境变量(全局变量)</p></li><li><p>set打印当前环境变量并按字母排列(包括局部变量、全局变量、用户定义变量)</p></li><li><p>alias查看别名,上面的不可以查看</p></li><li><p><code>ps -f --forest</code> 可以显示当前shell的进程关系</p></li><li><p>coproc(这就是协程?)<br><code>coproc [job_name(可选)] [command]</code>等价于<code>( command )&amp;</code><br>即生成后台子shell，并在子shell中执行命令。command本身可以是小括号命令集(嵌套子shell)或大括号命令集</p></li><li><p>mktemp</p><p>mktemp可以用来创建临时文件,成功会输出文件路径</p><p><code>mktemp [module]</code>不指定[module]会在&#x2F;tmp中创建唯一临时文件,有用户有读写权限(不使用umask值),若指定[module],则会在当前文件夹下产生模板临时文件(会用任意字符替换模板值中的X),如<code>mktemp test.XXX</code>可能会在当前文件夹下产生文件test.UGH</p><p>-t:强制在&#x2F;tmp下创建临时文件</p><p>-d:创建临时目录</p></li><li><p>nice以某个优先级来运行某个程序<br><code>nice -[num] [command]</code>,num值越大,优先级越低,可以通过”ps -o ni”查看优先级,只能降低,不能提高优先级,</p></li><li><p>renice调整某个程序优先级<br><code>renice -[num] -p [process id]</code>普通用户只能降低优先级,root可以任意调整</p></li><li><p>ntpd<br><code>sudo ntpd -qg</code>可以校准时间</p></li><li><p>readlink输出文件的绝对路径<br> <code>readlink -f [fileName]</code></p></li><li><p>truncate<br><code>truncate -s 5 test.txt</code>截断test.txt，只保留5个字符</p></li><li><p>nm<br>nm作用于目标文件，统计标识符有大用</p></li><li><p>parallel<br>parallel用法复杂，建议读man<br><strong>用法:</strong></p><ul><li>cmd | parallel [options] ‘somecmd’,parallel会默认把每行的内容,插到命令末尾</li><li>parallel [options] ‘cmd’ ::: [parameter1 list] ::: [parameter2 list]…<br>强大的xargs的升级版（这只是个人感觉啊）</li></ul></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-j&#x2F;–jobs [num]</td><td align="center">同时运行num个任务</td></tr><tr><td align="center">–C&#x2F;–colsep [regep]</td><td align="center">参数分隔符号</td></tr><tr><td align="center">–header</td><td align="center">忽略第一行</td></tr><tr><td align="center">–results [file]</td><td align="center">保存输出内容到某文件，还会输出到标准输出</td></tr><tr><td align="center">–keep-order</td><td align="center">并行有时会不按输出行的顺序，这个保持顺序</td></tr><tr><td align="center">–tag</td><td align="center">在每个结果开头，输出参数内容</td></tr><tr><td align="center">–slf&#x2F;–sshloginfile [hostnames]</td><td align="center">使用远程机当算力</td></tr><tr><td align="center">–sshlogin</td><td align="center">登录远程机</td></tr><tr><td align="center">–nonall</td><td align="center">不传递参数，只传递命令给远程机</td></tr><tr><td align="center">-N[num]</td><td align="center">分配给远程多少个参数</td></tr></tbody></table><table><thead><tr><th align="center">特殊变量名</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>&#123;&#125;</code></td><td align="center">一行的内容</td></tr><tr><td align="center"><code>&#123;/&#125;</code></td><td align="center">相当于对当前行运行basename</td></tr><tr><td align="center"><code>&#123;井&#125;</code></td><td align="center">任务号，从1开始编号</td></tr></tbody></table><p><strong>例子：</strong></p><ul><li><code>seq 0 2 100 | parallel &quot;echo &#123;&#125;^2 | bc&quot;</code></li><li><code>seq 1000 | parallel -N100 --pipe --slf hostnames &quot;paste -sd+ | bc&quot; | paste -sd+|bc</code>并行算1-1000的和，一个核算一百个参数</li><li>history<br>任何匹配HISTIGNORE环境变量的命令不会被记录,以<code>:</code>分割多个模式</li></ul><ol><li><code>unset HISTFILE</code>当前会话下不记录命令行历史</li><li>设置HISTIGNORE为<code>HISTIGNORE=&quot;[&amp;:\t]&quot;</code>在命令前加空格会使当前命令不被记录到历史,并且<code>&amp;</code>表示上一次执行的命令，就是重复命令只记录一次</li><li><code>HISTFILE=~/docs/shell_history.txt</code>更改历史记录文件</li><li><code>HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S&quot;</code>在每条记录前加时间戳</li><li>显示执行最多的10个命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span> |<br>   sed <span class="hljs-string">&#x27;s/^ \+//;s/  / /&#x27;</span> |<br>   <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f2- |<br>   awk <span class="hljs-string">&#x27;&#123; count[$0]++ &#125; END &#123; for (i in count) print count[i], i &#125;&#x27;</span> |<br>   <span class="hljs-built_in">sort</span> -rn |<br>   <span class="hljs-built_in">head</span> -10<br></code></pre></td></tr></table></figure></li></ol><ul><li>使用python快速搭建web服务器<code>python3 -m http.server 8080</code></li><li>Linux性能分析火焰图<br><img src="/images/flameLinux1.jpg"><br><img src="/images/flameLinux2.jpg"><br><img src="/images/flameLinux3.jpg"><br><img src="/images/flameLinux4.jpg"></li><li>factor<br>分解一个数字的因子</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html及markdown</title>
    <link href="/2019/07/18/html%E5%8F%8Amarkdown/"/>
    <url>/2019/07/18/html%E5%8F%8Amarkdown/</url>
    
    <content type="html"><![CDATA[<ol><li>粗体&lt;b&gt;…&lt;&#x2F;b&gt;<br>斜体&lt;i&gt;…&lt;&#x2F;i&gt;<br>下标&lt;sub&gt;…&lt;&#x2F;sub&gt;<br>上标&lt;sup&gt;…&lt;&#x2F;sup&gt;<br>希腊字母&lt;greek&gt;…&lt;&#x2F;greek&gt;<br>数学符号&lt;math&gt;…&lt;&#x2F;math&gt;<br>特殊符号&lt;userdef&gt;…&lt;&#x2F;userdef&gt;<br>尖括号的转义则是在&amp;与;之间加入对应的编码</li><li>markdown特殊符号的打出：<br>空格可以全角的空格打出</li><li>字体的形式:<br>*斜体*——&gt;<em>斜体</em><br>**粗体**——&gt;<strong>粗体</strong><br>***粗斜体***——&gt;<em><strong>粗斜体</strong></em><br>~~删除线~~——&gt;<del>删除线</del><br>```<br>代码行１<br>代码行２<br>代码行３<br>```<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">代码行１<br>代码行２<br>代码行３<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>html</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
